
snake2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b48  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08004c08  08004c08  00014c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d88  08004d88  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004d88  08004d88  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d88  08004d88  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d88  08004d88  00014d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d8c  08004d8c  00014d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004d90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  20000074  08004e04  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  08004e04  00020208  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2dd  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027f0  00000000  00000000  0002f379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  00031b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d28  00000000  00000000  000329a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001379e  00000000  00000000  000336c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000139b9  00000000  00000000  00046e66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006a0d0  00000000  00000000  0005a81f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c48ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b68  00000000  00000000  000c4940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004bf0 	.word	0x08004bf0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08004bf0 	.word	0x08004bf0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_lmul>:
 8000234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000236:	46ce      	mov	lr, r9
 8000238:	4647      	mov	r7, r8
 800023a:	b580      	push	{r7, lr}
 800023c:	0007      	movs	r7, r0
 800023e:	4699      	mov	r9, r3
 8000240:	0c3b      	lsrs	r3, r7, #16
 8000242:	469c      	mov	ip, r3
 8000244:	0413      	lsls	r3, r2, #16
 8000246:	0c1b      	lsrs	r3, r3, #16
 8000248:	001d      	movs	r5, r3
 800024a:	000e      	movs	r6, r1
 800024c:	4661      	mov	r1, ip
 800024e:	0400      	lsls	r0, r0, #16
 8000250:	0c14      	lsrs	r4, r2, #16
 8000252:	0c00      	lsrs	r0, r0, #16
 8000254:	4345      	muls	r5, r0
 8000256:	434b      	muls	r3, r1
 8000258:	4360      	muls	r0, r4
 800025a:	4361      	muls	r1, r4
 800025c:	18c0      	adds	r0, r0, r3
 800025e:	0c2c      	lsrs	r4, r5, #16
 8000260:	1820      	adds	r0, r4, r0
 8000262:	468c      	mov	ip, r1
 8000264:	4283      	cmp	r3, r0
 8000266:	d903      	bls.n	8000270 <__aeabi_lmul+0x3c>
 8000268:	2380      	movs	r3, #128	; 0x80
 800026a:	025b      	lsls	r3, r3, #9
 800026c:	4698      	mov	r8, r3
 800026e:	44c4      	add	ip, r8
 8000270:	4649      	mov	r1, r9
 8000272:	4379      	muls	r1, r7
 8000274:	4372      	muls	r2, r6
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	4463      	add	r3, ip
 800027a:	042d      	lsls	r5, r5, #16
 800027c:	0c2d      	lsrs	r5, r5, #16
 800027e:	18c9      	adds	r1, r1, r3
 8000280:	0400      	lsls	r0, r0, #16
 8000282:	1940      	adds	r0, r0, r5
 8000284:	1889      	adds	r1, r1, r2
 8000286:	bcc0      	pop	{r6, r7}
 8000288:	46b9      	mov	r9, r7
 800028a:	46b0      	mov	r8, r6
 800028c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800028e:	46c0      	nop			; (mov r8, r8)

08000290 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000294:	4b07      	ldr	r3, [pc, #28]	; (80002b4 <HAL_Init+0x24>)
 8000296:	681a      	ldr	r2, [r3, #0]
 8000298:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <HAL_Init+0x24>)
 800029a:	2110      	movs	r1, #16
 800029c:	430a      	orrs	r2, r1
 800029e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80002a0:	2000      	movs	r0, #0
 80002a2:	f000 f809 	bl	80002b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80002a6:	f003 f9a5 	bl	80035f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80002aa:	2300      	movs	r3, #0
}
 80002ac:	0018      	movs	r0, r3
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	46c0      	nop			; (mov r8, r8)
 80002b4:	40022000 	.word	0x40022000

080002b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002b8:	b590      	push	{r4, r7, lr}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80002c0:	4b14      	ldr	r3, [pc, #80]	; (8000314 <HAL_InitTick+0x5c>)
 80002c2:	681c      	ldr	r4, [r3, #0]
 80002c4:	4b14      	ldr	r3, [pc, #80]	; (8000318 <HAL_InitTick+0x60>)
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	0019      	movs	r1, r3
 80002ca:	23fa      	movs	r3, #250	; 0xfa
 80002cc:	0098      	lsls	r0, r3, #2
 80002ce:	f7ff ff25 	bl	800011c <__udivsi3>
 80002d2:	0003      	movs	r3, r0
 80002d4:	0019      	movs	r1, r3
 80002d6:	0020      	movs	r0, r4
 80002d8:	f7ff ff20 	bl	800011c <__udivsi3>
 80002dc:	0003      	movs	r3, r0
 80002de:	0018      	movs	r0, r3
 80002e0:	f000 fce1 	bl	8000ca6 <HAL_SYSTICK_Config>
 80002e4:	1e03      	subs	r3, r0, #0
 80002e6:	d001      	beq.n	80002ec <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80002e8:	2301      	movs	r3, #1
 80002ea:	e00f      	b.n	800030c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2b03      	cmp	r3, #3
 80002f0:	d80b      	bhi.n	800030a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002f2:	6879      	ldr	r1, [r7, #4]
 80002f4:	2301      	movs	r3, #1
 80002f6:	425b      	negs	r3, r3
 80002f8:	2200      	movs	r2, #0
 80002fa:	0018      	movs	r0, r3
 80002fc:	f000 fcae 	bl	8000c5c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000300:	4b06      	ldr	r3, [pc, #24]	; (800031c <HAL_InitTick+0x64>)
 8000302:	687a      	ldr	r2, [r7, #4]
 8000304:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000306:	2300      	movs	r3, #0
 8000308:	e000      	b.n	800030c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800030a:	2301      	movs	r3, #1
}
 800030c:	0018      	movs	r0, r3
 800030e:	46bd      	mov	sp, r7
 8000310:	b003      	add	sp, #12
 8000312:	bd90      	pop	{r4, r7, pc}
 8000314:	2000000c 	.word	0x2000000c
 8000318:	20000004 	.word	0x20000004
 800031c:	20000000 	.word	0x20000000

08000320 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000324:	4b05      	ldr	r3, [pc, #20]	; (800033c <HAL_IncTick+0x1c>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	001a      	movs	r2, r3
 800032a:	4b05      	ldr	r3, [pc, #20]	; (8000340 <HAL_IncTick+0x20>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	18d2      	adds	r2, r2, r3
 8000330:	4b03      	ldr	r3, [pc, #12]	; (8000340 <HAL_IncTick+0x20>)
 8000332:	601a      	str	r2, [r3, #0]
}
 8000334:	46c0      	nop			; (mov r8, r8)
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	46c0      	nop			; (mov r8, r8)
 800033c:	20000004 	.word	0x20000004
 8000340:	20000090 	.word	0x20000090

08000344 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  return uwTick;
 8000348:	4b02      	ldr	r3, [pc, #8]	; (8000354 <HAL_GetTick+0x10>)
 800034a:	681b      	ldr	r3, [r3, #0]
}
 800034c:	0018      	movs	r0, r3
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	46c0      	nop			; (mov r8, r8)
 8000354:	20000090 	.word	0x20000090

08000358 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000360:	f7ff fff0 	bl	8000344 <HAL_GetTick>
 8000364:	0003      	movs	r3, r0
 8000366:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	3301      	adds	r3, #1
 8000370:	d005      	beq.n	800037e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000372:	4b0a      	ldr	r3, [pc, #40]	; (800039c <HAL_Delay+0x44>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	001a      	movs	r2, r3
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	189b      	adds	r3, r3, r2
 800037c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800037e:	46c0      	nop			; (mov r8, r8)
 8000380:	f7ff ffe0 	bl	8000344 <HAL_GetTick>
 8000384:	0002      	movs	r2, r0
 8000386:	68bb      	ldr	r3, [r7, #8]
 8000388:	1ad3      	subs	r3, r2, r3
 800038a:	68fa      	ldr	r2, [r7, #12]
 800038c:	429a      	cmp	r2, r3
 800038e:	d8f7      	bhi.n	8000380 <HAL_Delay+0x28>
  {
  }
}
 8000390:	46c0      	nop			; (mov r8, r8)
 8000392:	46c0      	nop			; (mov r8, r8)
 8000394:	46bd      	mov	sp, r7
 8000396:	b004      	add	sp, #16
 8000398:	bd80      	pop	{r7, pc}
 800039a:	46c0      	nop			; (mov r8, r8)
 800039c:	20000004 	.word	0x20000004

080003a0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b084      	sub	sp, #16
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80003a8:	230f      	movs	r3, #15
 80003aa:	18fb      	adds	r3, r7, r3
 80003ac:	2200      	movs	r2, #0
 80003ae:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80003b0:	2300      	movs	r3, #0
 80003b2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d101      	bne.n	80003be <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80003ba:	2301      	movs	r3, #1
 80003bc:	e125      	b.n	800060a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d10a      	bne.n	80003dc <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	2200      	movs	r2, #0
 80003ca:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	2234      	movs	r2, #52	; 0x34
 80003d0:	2100      	movs	r1, #0
 80003d2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	0018      	movs	r0, r3
 80003d8:	f002 f95e 	bl	8002698 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80003e0:	2210      	movs	r2, #16
 80003e2:	4013      	ands	r3, r2
 80003e4:	d000      	beq.n	80003e8 <HAL_ADC_Init+0x48>
 80003e6:	e103      	b.n	80005f0 <HAL_ADC_Init+0x250>
 80003e8:	230f      	movs	r3, #15
 80003ea:	18fb      	adds	r3, r7, r3
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d000      	beq.n	80003f4 <HAL_ADC_Init+0x54>
 80003f2:	e0fd      	b.n	80005f0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	689b      	ldr	r3, [r3, #8]
 80003fa:	2204      	movs	r2, #4
 80003fc:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80003fe:	d000      	beq.n	8000402 <HAL_ADC_Init+0x62>
 8000400:	e0f6      	b.n	80005f0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000406:	4a83      	ldr	r2, [pc, #524]	; (8000614 <HAL_ADC_Init+0x274>)
 8000408:	4013      	ands	r3, r2
 800040a:	2202      	movs	r2, #2
 800040c:	431a      	orrs	r2, r3
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	689b      	ldr	r3, [r3, #8]
 8000418:	2203      	movs	r2, #3
 800041a:	4013      	ands	r3, r2
 800041c:	2b01      	cmp	r3, #1
 800041e:	d112      	bne.n	8000446 <HAL_ADC_Init+0xa6>
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	2201      	movs	r2, #1
 8000428:	4013      	ands	r3, r2
 800042a:	2b01      	cmp	r3, #1
 800042c:	d009      	beq.n	8000442 <HAL_ADC_Init+0xa2>
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	68da      	ldr	r2, [r3, #12]
 8000434:	2380      	movs	r3, #128	; 0x80
 8000436:	021b      	lsls	r3, r3, #8
 8000438:	401a      	ands	r2, r3
 800043a:	2380      	movs	r3, #128	; 0x80
 800043c:	021b      	lsls	r3, r3, #8
 800043e:	429a      	cmp	r2, r3
 8000440:	d101      	bne.n	8000446 <HAL_ADC_Init+0xa6>
 8000442:	2301      	movs	r3, #1
 8000444:	e000      	b.n	8000448 <HAL_ADC_Init+0xa8>
 8000446:	2300      	movs	r3, #0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d116      	bne.n	800047a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	68db      	ldr	r3, [r3, #12]
 8000452:	2218      	movs	r2, #24
 8000454:	4393      	bics	r3, r2
 8000456:	0019      	movs	r1, r3
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	689a      	ldr	r2, [r3, #8]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	430a      	orrs	r2, r1
 8000462:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	691b      	ldr	r3, [r3, #16]
 800046a:	009b      	lsls	r3, r3, #2
 800046c:	0899      	lsrs	r1, r3, #2
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	685a      	ldr	r2, [r3, #4]
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	430a      	orrs	r2, r1
 8000478:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	68da      	ldr	r2, [r3, #12]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4964      	ldr	r1, [pc, #400]	; (8000618 <HAL_ADC_Init+0x278>)
 8000486:	400a      	ands	r2, r1
 8000488:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	7e1b      	ldrb	r3, [r3, #24]
 800048e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	7e5b      	ldrb	r3, [r3, #25]
 8000494:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000496:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	7e9b      	ldrb	r3, [r3, #26]
 800049c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800049e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d002      	beq.n	80004ae <HAL_ADC_Init+0x10e>
 80004a8:	2380      	movs	r3, #128	; 0x80
 80004aa:	015b      	lsls	r3, r3, #5
 80004ac:	e000      	b.n	80004b0 <HAL_ADC_Init+0x110>
 80004ae:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80004b0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80004b6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	691b      	ldr	r3, [r3, #16]
 80004bc:	2b02      	cmp	r3, #2
 80004be:	d101      	bne.n	80004c4 <HAL_ADC_Init+0x124>
 80004c0:	2304      	movs	r3, #4
 80004c2:	e000      	b.n	80004c6 <HAL_ADC_Init+0x126>
 80004c4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80004c6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	2124      	movs	r1, #36	; 0x24
 80004cc:	5c5b      	ldrb	r3, [r3, r1]
 80004ce:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80004d0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80004d2:	68ba      	ldr	r2, [r7, #8]
 80004d4:	4313      	orrs	r3, r2
 80004d6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	7edb      	ldrb	r3, [r3, #27]
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d115      	bne.n	800050c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	7e9b      	ldrb	r3, [r3, #26]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d105      	bne.n	80004f4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	0252      	lsls	r2, r2, #9
 80004ee:	4313      	orrs	r3, r2
 80004f0:	60bb      	str	r3, [r7, #8]
 80004f2:	e00b      	b.n	800050c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004f8:	2220      	movs	r2, #32
 80004fa:	431a      	orrs	r2, r3
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000504:	2201      	movs	r2, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	69da      	ldr	r2, [r3, #28]
 8000510:	23c2      	movs	r3, #194	; 0xc2
 8000512:	33ff      	adds	r3, #255	; 0xff
 8000514:	429a      	cmp	r2, r3
 8000516:	d007      	beq.n	8000528 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000520:	4313      	orrs	r3, r2
 8000522:	68ba      	ldr	r2, [r7, #8]
 8000524:	4313      	orrs	r3, r2
 8000526:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	68d9      	ldr	r1, [r3, #12]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	68ba      	ldr	r2, [r7, #8]
 8000534:	430a      	orrs	r2, r1
 8000536:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800053c:	2380      	movs	r3, #128	; 0x80
 800053e:	055b      	lsls	r3, r3, #21
 8000540:	429a      	cmp	r2, r3
 8000542:	d01b      	beq.n	800057c <HAL_ADC_Init+0x1dc>
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000548:	2b01      	cmp	r3, #1
 800054a:	d017      	beq.n	800057c <HAL_ADC_Init+0x1dc>
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000550:	2b02      	cmp	r3, #2
 8000552:	d013      	beq.n	800057c <HAL_ADC_Init+0x1dc>
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000558:	2b03      	cmp	r3, #3
 800055a:	d00f      	beq.n	800057c <HAL_ADC_Init+0x1dc>
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000560:	2b04      	cmp	r3, #4
 8000562:	d00b      	beq.n	800057c <HAL_ADC_Init+0x1dc>
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000568:	2b05      	cmp	r3, #5
 800056a:	d007      	beq.n	800057c <HAL_ADC_Init+0x1dc>
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000570:	2b06      	cmp	r3, #6
 8000572:	d003      	beq.n	800057c <HAL_ADC_Init+0x1dc>
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000578:	2b07      	cmp	r3, #7
 800057a:	d112      	bne.n	80005a2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	695a      	ldr	r2, [r3, #20]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2107      	movs	r1, #7
 8000588:	438a      	bics	r2, r1
 800058a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	6959      	ldr	r1, [r3, #20]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000596:	2207      	movs	r2, #7
 8000598:	401a      	ands	r2, r3
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	430a      	orrs	r2, r1
 80005a0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	4a1c      	ldr	r2, [pc, #112]	; (800061c <HAL_ADC_Init+0x27c>)
 80005aa:	4013      	ands	r3, r2
 80005ac:	68ba      	ldr	r2, [r7, #8]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	d10b      	bne.n	80005ca <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2200      	movs	r2, #0
 80005b6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005bc:	2203      	movs	r2, #3
 80005be:	4393      	bics	r3, r2
 80005c0:	2201      	movs	r2, #1
 80005c2:	431a      	orrs	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80005c8:	e01c      	b.n	8000604 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005ce:	2212      	movs	r2, #18
 80005d0:	4393      	bics	r3, r2
 80005d2:	2210      	movs	r2, #16
 80005d4:	431a      	orrs	r2, r3
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005de:	2201      	movs	r2, #1
 80005e0:	431a      	orrs	r2, r3
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80005e6:	230f      	movs	r3, #15
 80005e8:	18fb      	adds	r3, r7, r3
 80005ea:	2201      	movs	r2, #1
 80005ec:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80005ee:	e009      	b.n	8000604 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005f4:	2210      	movs	r2, #16
 80005f6:	431a      	orrs	r2, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80005fc:	230f      	movs	r3, #15
 80005fe:	18fb      	adds	r3, r7, r3
 8000600:	2201      	movs	r2, #1
 8000602:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000604:	230f      	movs	r3, #15
 8000606:	18fb      	adds	r3, r7, r3
 8000608:	781b      	ldrb	r3, [r3, #0]
}
 800060a:	0018      	movs	r0, r3
 800060c:	46bd      	mov	sp, r7
 800060e:	b004      	add	sp, #16
 8000610:	bd80      	pop	{r7, pc}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	fffffefd 	.word	0xfffffefd
 8000618:	fffe0219 	.word	0xfffe0219
 800061c:	833fffe7 	.word	0x833fffe7

08000620 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000620:	b590      	push	{r4, r7, lr}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000628:	230f      	movs	r3, #15
 800062a:	18fb      	adds	r3, r7, r3
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	689b      	ldr	r3, [r3, #8]
 8000636:	2204      	movs	r2, #4
 8000638:	4013      	ands	r3, r2
 800063a:	d138      	bne.n	80006ae <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2234      	movs	r2, #52	; 0x34
 8000640:	5c9b      	ldrb	r3, [r3, r2]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d101      	bne.n	800064a <HAL_ADC_Start+0x2a>
 8000646:	2302      	movs	r3, #2
 8000648:	e038      	b.n	80006bc <HAL_ADC_Start+0x9c>
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2234      	movs	r2, #52	; 0x34
 800064e:	2101      	movs	r1, #1
 8000650:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	7e5b      	ldrb	r3, [r3, #25]
 8000656:	2b01      	cmp	r3, #1
 8000658:	d007      	beq.n	800066a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800065a:	230f      	movs	r3, #15
 800065c:	18fc      	adds	r4, r7, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	0018      	movs	r0, r3
 8000662:	f000 f9cb 	bl	80009fc <ADC_Enable>
 8000666:	0003      	movs	r3, r0
 8000668:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800066a:	230f      	movs	r3, #15
 800066c:	18fb      	adds	r3, r7, r3
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d120      	bne.n	80006b6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000678:	4a12      	ldr	r2, [pc, #72]	; (80006c4 <HAL_ADC_Start+0xa4>)
 800067a:	4013      	ands	r3, r2
 800067c:	2280      	movs	r2, #128	; 0x80
 800067e:	0052      	lsls	r2, r2, #1
 8000680:	431a      	orrs	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2200      	movs	r2, #0
 800068a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2234      	movs	r2, #52	; 0x34
 8000690:	2100      	movs	r1, #0
 8000692:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	221c      	movs	r2, #28
 800069a:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	689a      	ldr	r2, [r3, #8]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2104      	movs	r1, #4
 80006a8:	430a      	orrs	r2, r1
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	e003      	b.n	80006b6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80006ae:	230f      	movs	r3, #15
 80006b0:	18fb      	adds	r3, r7, r3
 80006b2:	2202      	movs	r2, #2
 80006b4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80006b6:	230f      	movs	r3, #15
 80006b8:	18fb      	adds	r3, r7, r3
 80006ba:	781b      	ldrb	r3, [r3, #0]
}
 80006bc:	0018      	movs	r0, r3
 80006be:	46bd      	mov	sp, r7
 80006c0:	b005      	add	sp, #20
 80006c2:	bd90      	pop	{r4, r7, pc}
 80006c4:	fffff0fe 	.word	0xfffff0fe

080006c8 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	2b08      	cmp	r3, #8
 80006d8:	d102      	bne.n	80006e0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80006da:	2308      	movs	r3, #8
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	e014      	b.n	800070a <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	68db      	ldr	r3, [r3, #12]
 80006e6:	2201      	movs	r2, #1
 80006e8:	4013      	ands	r3, r2
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d10b      	bne.n	8000706 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006f2:	2220      	movs	r2, #32
 80006f4:	431a      	orrs	r2, r3
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2234      	movs	r2, #52	; 0x34
 80006fe:	2100      	movs	r1, #0
 8000700:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8000702:	2301      	movs	r3, #1
 8000704:	e071      	b.n	80007ea <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000706:	230c      	movs	r3, #12
 8000708:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800070a:	f7ff fe1b 	bl	8000344 <HAL_GetTick>
 800070e:	0003      	movs	r3, r0
 8000710:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000712:	e01f      	b.n	8000754 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	3301      	adds	r3, #1
 8000718:	d01c      	beq.n	8000754 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d007      	beq.n	8000730 <HAL_ADC_PollForConversion+0x68>
 8000720:	f7ff fe10 	bl	8000344 <HAL_GetTick>
 8000724:	0002      	movs	r2, r0
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	683a      	ldr	r2, [r7, #0]
 800072c:	429a      	cmp	r2, r3
 800072e:	d211      	bcs.n	8000754 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	68fa      	ldr	r2, [r7, #12]
 8000738:	4013      	ands	r3, r2
 800073a:	d10b      	bne.n	8000754 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000740:	2204      	movs	r2, #4
 8000742:	431a      	orrs	r2, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2234      	movs	r2, #52	; 0x34
 800074c:	2100      	movs	r1, #0
 800074e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8000750:	2303      	movs	r3, #3
 8000752:	e04a      	b.n	80007ea <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	68fa      	ldr	r2, [r7, #12]
 800075c:	4013      	ands	r3, r2
 800075e:	d0d9      	beq.n	8000714 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000764:	2280      	movs	r2, #128	; 0x80
 8000766:	0092      	lsls	r2, r2, #2
 8000768:	431a      	orrs	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	68da      	ldr	r2, [r3, #12]
 8000774:	23c0      	movs	r3, #192	; 0xc0
 8000776:	011b      	lsls	r3, r3, #4
 8000778:	4013      	ands	r3, r2
 800077a:	d12d      	bne.n	80007d8 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000780:	2b00      	cmp	r3, #0
 8000782:	d129      	bne.n	80007d8 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2208      	movs	r2, #8
 800078c:	4013      	ands	r3, r2
 800078e:	2b08      	cmp	r3, #8
 8000790:	d122      	bne.n	80007d8 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	689b      	ldr	r3, [r3, #8]
 8000798:	2204      	movs	r2, #4
 800079a:	4013      	ands	r3, r2
 800079c:	d110      	bne.n	80007c0 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	685a      	ldr	r2, [r3, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	210c      	movs	r1, #12
 80007aa:	438a      	bics	r2, r1
 80007ac:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007b2:	4a10      	ldr	r2, [pc, #64]	; (80007f4 <HAL_ADC_PollForConversion+0x12c>)
 80007b4:	4013      	ands	r3, r2
 80007b6:	2201      	movs	r2, #1
 80007b8:	431a      	orrs	r2, r3
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	639a      	str	r2, [r3, #56]	; 0x38
 80007be:	e00b      	b.n	80007d8 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007c4:	2220      	movs	r2, #32
 80007c6:	431a      	orrs	r2, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007d0:	2201      	movs	r2, #1
 80007d2:	431a      	orrs	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	7e1b      	ldrb	r3, [r3, #24]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d103      	bne.n	80007e8 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	220c      	movs	r2, #12
 80007e6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80007e8:	2300      	movs	r3, #0
}
 80007ea:	0018      	movs	r0, r3
 80007ec:	46bd      	mov	sp, r7
 80007ee:	b004      	add	sp, #16
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	fffffefe 	.word	0xfffffefe

080007f8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000806:	0018      	movs	r0, r3
 8000808:	46bd      	mov	sp, r7
 800080a:	b002      	add	sp, #8
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800081a:	230f      	movs	r3, #15
 800081c:	18fb      	adds	r3, r7, r3
 800081e:	2200      	movs	r2, #0
 8000820:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800082a:	2380      	movs	r3, #128	; 0x80
 800082c:	055b      	lsls	r3, r3, #21
 800082e:	429a      	cmp	r2, r3
 8000830:	d011      	beq.n	8000856 <HAL_ADC_ConfigChannel+0x46>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000836:	2b01      	cmp	r3, #1
 8000838:	d00d      	beq.n	8000856 <HAL_ADC_ConfigChannel+0x46>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800083e:	2b02      	cmp	r3, #2
 8000840:	d009      	beq.n	8000856 <HAL_ADC_ConfigChannel+0x46>
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000846:	2b03      	cmp	r3, #3
 8000848:	d005      	beq.n	8000856 <HAL_ADC_ConfigChannel+0x46>
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800084e:	2b04      	cmp	r3, #4
 8000850:	d001      	beq.n	8000856 <HAL_ADC_ConfigChannel+0x46>
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2234      	movs	r2, #52	; 0x34
 800085a:	5c9b      	ldrb	r3, [r3, r2]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d101      	bne.n	8000864 <HAL_ADC_ConfigChannel+0x54>
 8000860:	2302      	movs	r3, #2
 8000862:	e0bb      	b.n	80009dc <HAL_ADC_ConfigChannel+0x1cc>
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2234      	movs	r2, #52	; 0x34
 8000868:	2101      	movs	r1, #1
 800086a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	2204      	movs	r2, #4
 8000874:	4013      	ands	r3, r2
 8000876:	d000      	beq.n	800087a <HAL_ADC_ConfigChannel+0x6a>
 8000878:	e09f      	b.n	80009ba <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	4a59      	ldr	r2, [pc, #356]	; (80009e4 <HAL_ADC_ConfigChannel+0x1d4>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d100      	bne.n	8000886 <HAL_ADC_ConfigChannel+0x76>
 8000884:	e077      	b.n	8000976 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2201      	movs	r2, #1
 8000892:	409a      	lsls	r2, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	430a      	orrs	r2, r1
 800089a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008a0:	2380      	movs	r3, #128	; 0x80
 80008a2:	055b      	lsls	r3, r3, #21
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d037      	beq.n	8000918 <HAL_ADC_ConfigChannel+0x108>
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d033      	beq.n	8000918 <HAL_ADC_ConfigChannel+0x108>
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b4:	2b02      	cmp	r3, #2
 80008b6:	d02f      	beq.n	8000918 <HAL_ADC_ConfigChannel+0x108>
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008bc:	2b03      	cmp	r3, #3
 80008be:	d02b      	beq.n	8000918 <HAL_ADC_ConfigChannel+0x108>
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c4:	2b04      	cmp	r3, #4
 80008c6:	d027      	beq.n	8000918 <HAL_ADC_ConfigChannel+0x108>
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008cc:	2b05      	cmp	r3, #5
 80008ce:	d023      	beq.n	8000918 <HAL_ADC_ConfigChannel+0x108>
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d4:	2b06      	cmp	r3, #6
 80008d6:	d01f      	beq.n	8000918 <HAL_ADC_ConfigChannel+0x108>
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008dc:	2b07      	cmp	r3, #7
 80008de:	d01b      	beq.n	8000918 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	689a      	ldr	r2, [r3, #8]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	2107      	movs	r1, #7
 80008ec:	400b      	ands	r3, r1
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d012      	beq.n	8000918 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	695a      	ldr	r2, [r3, #20]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2107      	movs	r1, #7
 80008fe:	438a      	bics	r2, r1
 8000900:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	6959      	ldr	r1, [r3, #20]
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	2207      	movs	r2, #7
 800090e:	401a      	ands	r2, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	430a      	orrs	r2, r1
 8000916:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b10      	cmp	r3, #16
 800091e:	d003      	beq.n	8000928 <HAL_ADC_ConfigChannel+0x118>
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b11      	cmp	r3, #17
 8000926:	d152      	bne.n	80009ce <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000928:	4b2f      	ldr	r3, [pc, #188]	; (80009e8 <HAL_ADC_ConfigChannel+0x1d8>)
 800092a:	6819      	ldr	r1, [r3, #0]
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b10      	cmp	r3, #16
 8000932:	d102      	bne.n	800093a <HAL_ADC_ConfigChannel+0x12a>
 8000934:	2380      	movs	r3, #128	; 0x80
 8000936:	041b      	lsls	r3, r3, #16
 8000938:	e001      	b.n	800093e <HAL_ADC_ConfigChannel+0x12e>
 800093a:	2380      	movs	r3, #128	; 0x80
 800093c:	03db      	lsls	r3, r3, #15
 800093e:	4a2a      	ldr	r2, [pc, #168]	; (80009e8 <HAL_ADC_ConfigChannel+0x1d8>)
 8000940:	430b      	orrs	r3, r1
 8000942:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b10      	cmp	r3, #16
 800094a:	d140      	bne.n	80009ce <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800094c:	4b27      	ldr	r3, [pc, #156]	; (80009ec <HAL_ADC_ConfigChannel+0x1dc>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4927      	ldr	r1, [pc, #156]	; (80009f0 <HAL_ADC_ConfigChannel+0x1e0>)
 8000952:	0018      	movs	r0, r3
 8000954:	f7ff fbe2 	bl	800011c <__udivsi3>
 8000958:	0003      	movs	r3, r0
 800095a:	001a      	movs	r2, r3
 800095c:	0013      	movs	r3, r2
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	189b      	adds	r3, r3, r2
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000966:	e002      	b.n	800096e <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	3b01      	subs	r3, #1
 800096c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d1f9      	bne.n	8000968 <HAL_ADC_ConfigChannel+0x158>
 8000974:	e02b      	b.n	80009ce <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2101      	movs	r1, #1
 8000982:	4099      	lsls	r1, r3
 8000984:	000b      	movs	r3, r1
 8000986:	43d9      	mvns	r1, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	400a      	ands	r2, r1
 800098e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b10      	cmp	r3, #16
 8000996:	d003      	beq.n	80009a0 <HAL_ADC_ConfigChannel+0x190>
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b11      	cmp	r3, #17
 800099e:	d116      	bne.n	80009ce <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <HAL_ADC_ConfigChannel+0x1d8>)
 80009a2:	6819      	ldr	r1, [r3, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b10      	cmp	r3, #16
 80009aa:	d101      	bne.n	80009b0 <HAL_ADC_ConfigChannel+0x1a0>
 80009ac:	4a11      	ldr	r2, [pc, #68]	; (80009f4 <HAL_ADC_ConfigChannel+0x1e4>)
 80009ae:	e000      	b.n	80009b2 <HAL_ADC_ConfigChannel+0x1a2>
 80009b0:	4a11      	ldr	r2, [pc, #68]	; (80009f8 <HAL_ADC_ConfigChannel+0x1e8>)
 80009b2:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <HAL_ADC_ConfigChannel+0x1d8>)
 80009b4:	400a      	ands	r2, r1
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	e009      	b.n	80009ce <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009be:	2220      	movs	r2, #32
 80009c0:	431a      	orrs	r2, r3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80009c6:	230f      	movs	r3, #15
 80009c8:	18fb      	adds	r3, r7, r3
 80009ca:	2201      	movs	r2, #1
 80009cc:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2234      	movs	r2, #52	; 0x34
 80009d2:	2100      	movs	r1, #0
 80009d4:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80009d6:	230f      	movs	r3, #15
 80009d8:	18fb      	adds	r3, r7, r3
 80009da:	781b      	ldrb	r3, [r3, #0]
}
 80009dc:	0018      	movs	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	b004      	add	sp, #16
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	00001001 	.word	0x00001001
 80009e8:	40012708 	.word	0x40012708
 80009ec:	2000000c 	.word	0x2000000c
 80009f0:	000f4240 	.word	0x000f4240
 80009f4:	ff7fffff 	.word	0xff7fffff
 80009f8:	ffbfffff 	.word	0xffbfffff

080009fc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	2203      	movs	r2, #3
 8000a14:	4013      	ands	r3, r2
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d112      	bne.n	8000a40 <ADC_Enable+0x44>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2201      	movs	r2, #1
 8000a22:	4013      	ands	r3, r2
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d009      	beq.n	8000a3c <ADC_Enable+0x40>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	68da      	ldr	r2, [r3, #12]
 8000a2e:	2380      	movs	r3, #128	; 0x80
 8000a30:	021b      	lsls	r3, r3, #8
 8000a32:	401a      	ands	r2, r3
 8000a34:	2380      	movs	r3, #128	; 0x80
 8000a36:	021b      	lsls	r3, r3, #8
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d101      	bne.n	8000a40 <ADC_Enable+0x44>
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	e000      	b.n	8000a42 <ADC_Enable+0x46>
 8000a40:	2300      	movs	r3, #0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d152      	bne.n	8000aec <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	4a2a      	ldr	r2, [pc, #168]	; (8000af8 <ADC_Enable+0xfc>)
 8000a4e:	4013      	ands	r3, r2
 8000a50:	d00d      	beq.n	8000a6e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a56:	2210      	movs	r2, #16
 8000a58:	431a      	orrs	r2, r3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a62:	2201      	movs	r2, #1
 8000a64:	431a      	orrs	r2, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e03f      	b.n	8000aee <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	689a      	ldr	r2, [r3, #8]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2101      	movs	r1, #1
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000a7e:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <ADC_Enable+0x100>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	491f      	ldr	r1, [pc, #124]	; (8000b00 <ADC_Enable+0x104>)
 8000a84:	0018      	movs	r0, r3
 8000a86:	f7ff fb49 	bl	800011c <__udivsi3>
 8000a8a:	0003      	movs	r3, r0
 8000a8c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000a8e:	e002      	b.n	8000a96 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	3b01      	subs	r3, #1
 8000a94:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d1f9      	bne.n	8000a90 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8000a9c:	f7ff fc52 	bl	8000344 <HAL_GetTick>
 8000aa0:	0003      	movs	r3, r0
 8000aa2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000aa4:	e01b      	b.n	8000ade <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000aa6:	f7ff fc4d 	bl	8000344 <HAL_GetTick>
 8000aaa:	0002      	movs	r2, r0
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	1ad3      	subs	r3, r2, r3
 8000ab0:	2b02      	cmp	r3, #2
 8000ab2:	d914      	bls.n	8000ade <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2201      	movs	r2, #1
 8000abc:	4013      	ands	r3, r2
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d00d      	beq.n	8000ade <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ac6:	2210      	movs	r2, #16
 8000ac8:	431a      	orrs	r2, r3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	431a      	orrs	r2, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	e007      	b.n	8000aee <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d1dc      	bne.n	8000aa6 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	0018      	movs	r0, r3
 8000af0:	46bd      	mov	sp, r7
 8000af2:	b004      	add	sp, #16
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	80000017 	.word	0x80000017
 8000afc:	2000000c 	.word	0x2000000c
 8000b00:	000f4240 	.word	0x000f4240

08000b04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	0002      	movs	r2, r0
 8000b0c:	1dfb      	adds	r3, r7, #7
 8000b0e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b10:	1dfb      	adds	r3, r7, #7
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b7f      	cmp	r3, #127	; 0x7f
 8000b16:	d809      	bhi.n	8000b2c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b18:	1dfb      	adds	r3, r7, #7
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	001a      	movs	r2, r3
 8000b1e:	231f      	movs	r3, #31
 8000b20:	401a      	ands	r2, r3
 8000b22:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <__NVIC_EnableIRQ+0x30>)
 8000b24:	2101      	movs	r1, #1
 8000b26:	4091      	lsls	r1, r2
 8000b28:	000a      	movs	r2, r1
 8000b2a:	601a      	str	r2, [r3, #0]
  }
}
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b002      	add	sp, #8
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	e000e100 	.word	0xe000e100

08000b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b38:	b590      	push	{r4, r7, lr}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	0002      	movs	r2, r0
 8000b40:	6039      	str	r1, [r7, #0]
 8000b42:	1dfb      	adds	r3, r7, #7
 8000b44:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b46:	1dfb      	adds	r3, r7, #7
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b7f      	cmp	r3, #127	; 0x7f
 8000b4c:	d828      	bhi.n	8000ba0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b4e:	4a2f      	ldr	r2, [pc, #188]	; (8000c0c <__NVIC_SetPriority+0xd4>)
 8000b50:	1dfb      	adds	r3, r7, #7
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	b25b      	sxtb	r3, r3
 8000b56:	089b      	lsrs	r3, r3, #2
 8000b58:	33c0      	adds	r3, #192	; 0xc0
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	589b      	ldr	r3, [r3, r2]
 8000b5e:	1dfa      	adds	r2, r7, #7
 8000b60:	7812      	ldrb	r2, [r2, #0]
 8000b62:	0011      	movs	r1, r2
 8000b64:	2203      	movs	r2, #3
 8000b66:	400a      	ands	r2, r1
 8000b68:	00d2      	lsls	r2, r2, #3
 8000b6a:	21ff      	movs	r1, #255	; 0xff
 8000b6c:	4091      	lsls	r1, r2
 8000b6e:	000a      	movs	r2, r1
 8000b70:	43d2      	mvns	r2, r2
 8000b72:	401a      	ands	r2, r3
 8000b74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	019b      	lsls	r3, r3, #6
 8000b7a:	22ff      	movs	r2, #255	; 0xff
 8000b7c:	401a      	ands	r2, r3
 8000b7e:	1dfb      	adds	r3, r7, #7
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	0018      	movs	r0, r3
 8000b84:	2303      	movs	r3, #3
 8000b86:	4003      	ands	r3, r0
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b8c:	481f      	ldr	r0, [pc, #124]	; (8000c0c <__NVIC_SetPriority+0xd4>)
 8000b8e:	1dfb      	adds	r3, r7, #7
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	b25b      	sxtb	r3, r3
 8000b94:	089b      	lsrs	r3, r3, #2
 8000b96:	430a      	orrs	r2, r1
 8000b98:	33c0      	adds	r3, #192	; 0xc0
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b9e:	e031      	b.n	8000c04 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ba0:	4a1b      	ldr	r2, [pc, #108]	; (8000c10 <__NVIC_SetPriority+0xd8>)
 8000ba2:	1dfb      	adds	r3, r7, #7
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	0019      	movs	r1, r3
 8000ba8:	230f      	movs	r3, #15
 8000baa:	400b      	ands	r3, r1
 8000bac:	3b08      	subs	r3, #8
 8000bae:	089b      	lsrs	r3, r3, #2
 8000bb0:	3306      	adds	r3, #6
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	18d3      	adds	r3, r2, r3
 8000bb6:	3304      	adds	r3, #4
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	1dfa      	adds	r2, r7, #7
 8000bbc:	7812      	ldrb	r2, [r2, #0]
 8000bbe:	0011      	movs	r1, r2
 8000bc0:	2203      	movs	r2, #3
 8000bc2:	400a      	ands	r2, r1
 8000bc4:	00d2      	lsls	r2, r2, #3
 8000bc6:	21ff      	movs	r1, #255	; 0xff
 8000bc8:	4091      	lsls	r1, r2
 8000bca:	000a      	movs	r2, r1
 8000bcc:	43d2      	mvns	r2, r2
 8000bce:	401a      	ands	r2, r3
 8000bd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	019b      	lsls	r3, r3, #6
 8000bd6:	22ff      	movs	r2, #255	; 0xff
 8000bd8:	401a      	ands	r2, r3
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	0018      	movs	r0, r3
 8000be0:	2303      	movs	r3, #3
 8000be2:	4003      	ands	r3, r0
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000be8:	4809      	ldr	r0, [pc, #36]	; (8000c10 <__NVIC_SetPriority+0xd8>)
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	001c      	movs	r4, r3
 8000bf0:	230f      	movs	r3, #15
 8000bf2:	4023      	ands	r3, r4
 8000bf4:	3b08      	subs	r3, #8
 8000bf6:	089b      	lsrs	r3, r3, #2
 8000bf8:	430a      	orrs	r2, r1
 8000bfa:	3306      	adds	r3, #6
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	18c3      	adds	r3, r0, r3
 8000c00:	3304      	adds	r3, #4
 8000c02:	601a      	str	r2, [r3, #0]
}
 8000c04:	46c0      	nop			; (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b003      	add	sp, #12
 8000c0a:	bd90      	pop	{r4, r7, pc}
 8000c0c:	e000e100 	.word	0xe000e100
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	1e5a      	subs	r2, r3, #1
 8000c20:	2380      	movs	r3, #128	; 0x80
 8000c22:	045b      	lsls	r3, r3, #17
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d301      	bcc.n	8000c2c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e010      	b.n	8000c4e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <SysTick_Config+0x44>)
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	3a01      	subs	r2, #1
 8000c32:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c34:	2301      	movs	r3, #1
 8000c36:	425b      	negs	r3, r3
 8000c38:	2103      	movs	r1, #3
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f7ff ff7c 	bl	8000b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <SysTick_Config+0x44>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c46:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <SysTick_Config+0x44>)
 8000c48:	2207      	movs	r2, #7
 8000c4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	0018      	movs	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	b002      	add	sp, #8
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	e000e010 	.word	0xe000e010

08000c5c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
 8000c66:	210f      	movs	r1, #15
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	1c02      	adds	r2, r0, #0
 8000c6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	187b      	adds	r3, r7, r1
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	b25b      	sxtb	r3, r3
 8000c76:	0011      	movs	r1, r2
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f7ff ff5d 	bl	8000b38 <__NVIC_SetPriority>
}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b004      	add	sp, #16
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	0002      	movs	r2, r0
 8000c8e:	1dfb      	adds	r3, r7, #7
 8000c90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c92:	1dfb      	adds	r3, r7, #7
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	b25b      	sxtb	r3, r3
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f7ff ff33 	bl	8000b04 <__NVIC_EnableIRQ>
}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	b002      	add	sp, #8
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f7ff ffaf 	bl	8000c14 <SysTick_Config>
 8000cb6:	0003      	movs	r3, r0
}
 8000cb8:	0018      	movs	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	b002      	add	sp, #8
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cce:	e14f      	b.n	8000f70 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	697a      	ldr	r2, [r7, #20]
 8000cd8:	4091      	lsls	r1, r2
 8000cda:	000a      	movs	r2, r1
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d100      	bne.n	8000ce8 <HAL_GPIO_Init+0x28>
 8000ce6:	e140      	b.n	8000f6a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	2203      	movs	r2, #3
 8000cee:	4013      	ands	r3, r2
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d005      	beq.n	8000d00 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d130      	bne.n	8000d62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	409a      	lsls	r2, r3
 8000d0e:	0013      	movs	r3, r2
 8000d10:	43da      	mvns	r2, r3
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	4013      	ands	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	68da      	ldr	r2, [r3, #12]
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	409a      	lsls	r2, r3
 8000d22:	0013      	movs	r3, r2
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d36:	2201      	movs	r2, #1
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	409a      	lsls	r2, r3
 8000d3c:	0013      	movs	r3, r2
 8000d3e:	43da      	mvns	r2, r3
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	4013      	ands	r3, r2
 8000d44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	091b      	lsrs	r3, r3, #4
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	401a      	ands	r2, r3
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	409a      	lsls	r2, r3
 8000d54:	0013      	movs	r3, r2
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	2203      	movs	r2, #3
 8000d68:	4013      	ands	r3, r2
 8000d6a:	2b03      	cmp	r3, #3
 8000d6c:	d017      	beq.n	8000d9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	2203      	movs	r2, #3
 8000d7a:	409a      	lsls	r2, r3
 8000d7c:	0013      	movs	r3, r2
 8000d7e:	43da      	mvns	r2, r3
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	4013      	ands	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	689a      	ldr	r2, [r3, #8]
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	409a      	lsls	r2, r3
 8000d90:	0013      	movs	r3, r2
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	2203      	movs	r2, #3
 8000da4:	4013      	ands	r3, r2
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d123      	bne.n	8000df2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	08da      	lsrs	r2, r3, #3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3208      	adds	r2, #8
 8000db2:	0092      	lsls	r2, r2, #2
 8000db4:	58d3      	ldr	r3, [r2, r3]
 8000db6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	2207      	movs	r2, #7
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	220f      	movs	r2, #15
 8000dc2:	409a      	lsls	r2, r3
 8000dc4:	0013      	movs	r3, r2
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	691a      	ldr	r2, [r3, #16]
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	2107      	movs	r1, #7
 8000dd6:	400b      	ands	r3, r1
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	409a      	lsls	r2, r3
 8000ddc:	0013      	movs	r3, r2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	08da      	lsrs	r2, r3, #3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3208      	adds	r2, #8
 8000dec:	0092      	lsls	r2, r2, #2
 8000dee:	6939      	ldr	r1, [r7, #16]
 8000df0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	409a      	lsls	r2, r3
 8000e00:	0013      	movs	r3, r2
 8000e02:	43da      	mvns	r2, r3
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2203      	movs	r2, #3
 8000e10:	401a      	ands	r2, r3
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	409a      	lsls	r2, r3
 8000e18:	0013      	movs	r3, r2
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685a      	ldr	r2, [r3, #4]
 8000e2a:	23c0      	movs	r3, #192	; 0xc0
 8000e2c:	029b      	lsls	r3, r3, #10
 8000e2e:	4013      	ands	r3, r2
 8000e30:	d100      	bne.n	8000e34 <HAL_GPIO_Init+0x174>
 8000e32:	e09a      	b.n	8000f6a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e34:	4b54      	ldr	r3, [pc, #336]	; (8000f88 <HAL_GPIO_Init+0x2c8>)
 8000e36:	699a      	ldr	r2, [r3, #24]
 8000e38:	4b53      	ldr	r3, [pc, #332]	; (8000f88 <HAL_GPIO_Init+0x2c8>)
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	619a      	str	r2, [r3, #24]
 8000e40:	4b51      	ldr	r3, [pc, #324]	; (8000f88 <HAL_GPIO_Init+0x2c8>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	2201      	movs	r2, #1
 8000e46:	4013      	ands	r3, r2
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e4c:	4a4f      	ldr	r2, [pc, #316]	; (8000f8c <HAL_GPIO_Init+0x2cc>)
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	089b      	lsrs	r3, r3, #2
 8000e52:	3302      	adds	r3, #2
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	589b      	ldr	r3, [r3, r2]
 8000e58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	4013      	ands	r3, r2
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	220f      	movs	r2, #15
 8000e64:	409a      	lsls	r2, r3
 8000e66:	0013      	movs	r3, r2
 8000e68:	43da      	mvns	r2, r3
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	2390      	movs	r3, #144	; 0x90
 8000e74:	05db      	lsls	r3, r3, #23
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d013      	beq.n	8000ea2 <HAL_GPIO_Init+0x1e2>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a44      	ldr	r2, [pc, #272]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d00d      	beq.n	8000e9e <HAL_GPIO_Init+0x1de>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a43      	ldr	r2, [pc, #268]	; (8000f94 <HAL_GPIO_Init+0x2d4>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d007      	beq.n	8000e9a <HAL_GPIO_Init+0x1da>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a42      	ldr	r2, [pc, #264]	; (8000f98 <HAL_GPIO_Init+0x2d8>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d101      	bne.n	8000e96 <HAL_GPIO_Init+0x1d6>
 8000e92:	2303      	movs	r3, #3
 8000e94:	e006      	b.n	8000ea4 <HAL_GPIO_Init+0x1e4>
 8000e96:	2305      	movs	r3, #5
 8000e98:	e004      	b.n	8000ea4 <HAL_GPIO_Init+0x1e4>
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	e002      	b.n	8000ea4 <HAL_GPIO_Init+0x1e4>
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e000      	b.n	8000ea4 <HAL_GPIO_Init+0x1e4>
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	697a      	ldr	r2, [r7, #20]
 8000ea6:	2103      	movs	r1, #3
 8000ea8:	400a      	ands	r2, r1
 8000eaa:	0092      	lsls	r2, r2, #2
 8000eac:	4093      	lsls	r3, r2
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000eb4:	4935      	ldr	r1, [pc, #212]	; (8000f8c <HAL_GPIO_Init+0x2cc>)
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	089b      	lsrs	r3, r3, #2
 8000eba:	3302      	adds	r3, #2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ec2:	4b36      	ldr	r3, [pc, #216]	; (8000f9c <HAL_GPIO_Init+0x2dc>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	43da      	mvns	r2, r3
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685a      	ldr	r2, [r3, #4]
 8000ed6:	2380      	movs	r3, #128	; 0x80
 8000ed8:	025b      	lsls	r3, r3, #9
 8000eda:	4013      	ands	r3, r2
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ee6:	4b2d      	ldr	r3, [pc, #180]	; (8000f9c <HAL_GPIO_Init+0x2dc>)
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000eec:	4b2b      	ldr	r3, [pc, #172]	; (8000f9c <HAL_GPIO_Init+0x2dc>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	43da      	mvns	r2, r3
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685a      	ldr	r2, [r3, #4]
 8000f00:	2380      	movs	r3, #128	; 0x80
 8000f02:	029b      	lsls	r3, r3, #10
 8000f04:	4013      	ands	r3, r2
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f10:	4b22      	ldr	r3, [pc, #136]	; (8000f9c <HAL_GPIO_Init+0x2dc>)
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f16:	4b21      	ldr	r3, [pc, #132]	; (8000f9c <HAL_GPIO_Init+0x2dc>)
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685a      	ldr	r2, [r3, #4]
 8000f2a:	2380      	movs	r3, #128	; 0x80
 8000f2c:	035b      	lsls	r3, r3, #13
 8000f2e:	4013      	ands	r3, r2
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f3a:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <HAL_GPIO_Init+0x2dc>)
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f40:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <HAL_GPIO_Init+0x2dc>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	43da      	mvns	r2, r3
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685a      	ldr	r2, [r3, #4]
 8000f54:	2380      	movs	r3, #128	; 0x80
 8000f56:	039b      	lsls	r3, r3, #14
 8000f58:	4013      	ands	r3, r2
 8000f5a:	d003      	beq.n	8000f64 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f64:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <HAL_GPIO_Init+0x2dc>)
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	40da      	lsrs	r2, r3
 8000f78:	1e13      	subs	r3, r2, #0
 8000f7a:	d000      	beq.n	8000f7e <HAL_GPIO_Init+0x2be>
 8000f7c:	e6a8      	b.n	8000cd0 <HAL_GPIO_Init+0x10>
  } 
}
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	46c0      	nop			; (mov r8, r8)
 8000f82:	46bd      	mov	sp, r7
 8000f84:	b006      	add	sp, #24
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	40010000 	.word	0x40010000
 8000f90:	48000400 	.word	0x48000400
 8000f94:	48000800 	.word	0x48000800
 8000f98:	48000c00 	.word	0x48000c00
 8000f9c:	40010400 	.word	0x40010400

08000fa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	000a      	movs	r2, r1
 8000faa:	1cbb      	adds	r3, r7, #2
 8000fac:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	691b      	ldr	r3, [r3, #16]
 8000fb2:	1cba      	adds	r2, r7, #2
 8000fb4:	8812      	ldrh	r2, [r2, #0]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	d004      	beq.n	8000fc4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000fba:	230f      	movs	r3, #15
 8000fbc:	18fb      	adds	r3, r7, r3
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	701a      	strb	r2, [r3, #0]
 8000fc2:	e003      	b.n	8000fcc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fc4:	230f      	movs	r3, #15
 8000fc6:	18fb      	adds	r3, r7, r3
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000fcc:	230f      	movs	r3, #15
 8000fce:	18fb      	adds	r3, r7, r3
 8000fd0:	781b      	ldrb	r3, [r3, #0]
  }
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	b004      	add	sp, #16
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
 8000fe2:	0008      	movs	r0, r1
 8000fe4:	0011      	movs	r1, r2
 8000fe6:	1cbb      	adds	r3, r7, #2
 8000fe8:	1c02      	adds	r2, r0, #0
 8000fea:	801a      	strh	r2, [r3, #0]
 8000fec:	1c7b      	adds	r3, r7, #1
 8000fee:	1c0a      	adds	r2, r1, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ff2:	1c7b      	adds	r3, r7, #1
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d004      	beq.n	8001004 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ffa:	1cbb      	adds	r3, r7, #2
 8000ffc:	881a      	ldrh	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001002:	e003      	b.n	800100c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001004:	1cbb      	adds	r3, r7, #2
 8001006:	881a      	ldrh	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800100c:	46c0      	nop			; (mov r8, r8)
 800100e:	46bd      	mov	sp, r7
 8001010:	b002      	add	sp, #8
 8001012:	bd80      	pop	{r7, pc}

08001014 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e301      	b.n	800162a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2201      	movs	r2, #1
 800102c:	4013      	ands	r3, r2
 800102e:	d100      	bne.n	8001032 <HAL_RCC_OscConfig+0x1e>
 8001030:	e08d      	b.n	800114e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001032:	4bc3      	ldr	r3, [pc, #780]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	220c      	movs	r2, #12
 8001038:	4013      	ands	r3, r2
 800103a:	2b04      	cmp	r3, #4
 800103c:	d00e      	beq.n	800105c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800103e:	4bc0      	ldr	r3, [pc, #768]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	220c      	movs	r2, #12
 8001044:	4013      	ands	r3, r2
 8001046:	2b08      	cmp	r3, #8
 8001048:	d116      	bne.n	8001078 <HAL_RCC_OscConfig+0x64>
 800104a:	4bbd      	ldr	r3, [pc, #756]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 800104c:	685a      	ldr	r2, [r3, #4]
 800104e:	2380      	movs	r3, #128	; 0x80
 8001050:	025b      	lsls	r3, r3, #9
 8001052:	401a      	ands	r2, r3
 8001054:	2380      	movs	r3, #128	; 0x80
 8001056:	025b      	lsls	r3, r3, #9
 8001058:	429a      	cmp	r2, r3
 800105a:	d10d      	bne.n	8001078 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800105c:	4bb8      	ldr	r3, [pc, #736]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	2380      	movs	r3, #128	; 0x80
 8001062:	029b      	lsls	r3, r3, #10
 8001064:	4013      	ands	r3, r2
 8001066:	d100      	bne.n	800106a <HAL_RCC_OscConfig+0x56>
 8001068:	e070      	b.n	800114c <HAL_RCC_OscConfig+0x138>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d000      	beq.n	8001074 <HAL_RCC_OscConfig+0x60>
 8001072:	e06b      	b.n	800114c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e2d8      	b.n	800162a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d107      	bne.n	8001090 <HAL_RCC_OscConfig+0x7c>
 8001080:	4baf      	ldr	r3, [pc, #700]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4bae      	ldr	r3, [pc, #696]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 8001086:	2180      	movs	r1, #128	; 0x80
 8001088:	0249      	lsls	r1, r1, #9
 800108a:	430a      	orrs	r2, r1
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	e02f      	b.n	80010f0 <HAL_RCC_OscConfig+0xdc>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d10c      	bne.n	80010b2 <HAL_RCC_OscConfig+0x9e>
 8001098:	4ba9      	ldr	r3, [pc, #676]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4ba8      	ldr	r3, [pc, #672]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 800109e:	49a9      	ldr	r1, [pc, #676]	; (8001344 <HAL_RCC_OscConfig+0x330>)
 80010a0:	400a      	ands	r2, r1
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	4ba6      	ldr	r3, [pc, #664]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4ba5      	ldr	r3, [pc, #660]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80010aa:	49a7      	ldr	r1, [pc, #668]	; (8001348 <HAL_RCC_OscConfig+0x334>)
 80010ac:	400a      	ands	r2, r1
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	e01e      	b.n	80010f0 <HAL_RCC_OscConfig+0xdc>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2b05      	cmp	r3, #5
 80010b8:	d10e      	bne.n	80010d8 <HAL_RCC_OscConfig+0xc4>
 80010ba:	4ba1      	ldr	r3, [pc, #644]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	4ba0      	ldr	r3, [pc, #640]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80010c0:	2180      	movs	r1, #128	; 0x80
 80010c2:	02c9      	lsls	r1, r1, #11
 80010c4:	430a      	orrs	r2, r1
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	4b9d      	ldr	r3, [pc, #628]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b9c      	ldr	r3, [pc, #624]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80010ce:	2180      	movs	r1, #128	; 0x80
 80010d0:	0249      	lsls	r1, r1, #9
 80010d2:	430a      	orrs	r2, r1
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	e00b      	b.n	80010f0 <HAL_RCC_OscConfig+0xdc>
 80010d8:	4b99      	ldr	r3, [pc, #612]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b98      	ldr	r3, [pc, #608]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80010de:	4999      	ldr	r1, [pc, #612]	; (8001344 <HAL_RCC_OscConfig+0x330>)
 80010e0:	400a      	ands	r2, r1
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	4b96      	ldr	r3, [pc, #600]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4b95      	ldr	r3, [pc, #596]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80010ea:	4997      	ldr	r1, [pc, #604]	; (8001348 <HAL_RCC_OscConfig+0x334>)
 80010ec:	400a      	ands	r2, r1
 80010ee:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d014      	beq.n	8001122 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f8:	f7ff f924 	bl	8000344 <HAL_GetTick>
 80010fc:	0003      	movs	r3, r0
 80010fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001100:	e008      	b.n	8001114 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001102:	f7ff f91f 	bl	8000344 <HAL_GetTick>
 8001106:	0002      	movs	r2, r0
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b64      	cmp	r3, #100	; 0x64
 800110e:	d901      	bls.n	8001114 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e28a      	b.n	800162a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001114:	4b8a      	ldr	r3, [pc, #552]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	2380      	movs	r3, #128	; 0x80
 800111a:	029b      	lsls	r3, r3, #10
 800111c:	4013      	ands	r3, r2
 800111e:	d0f0      	beq.n	8001102 <HAL_RCC_OscConfig+0xee>
 8001120:	e015      	b.n	800114e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001122:	f7ff f90f 	bl	8000344 <HAL_GetTick>
 8001126:	0003      	movs	r3, r0
 8001128:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800112c:	f7ff f90a 	bl	8000344 <HAL_GetTick>
 8001130:	0002      	movs	r2, r0
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b64      	cmp	r3, #100	; 0x64
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e275      	b.n	800162a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800113e:	4b80      	ldr	r3, [pc, #512]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	2380      	movs	r3, #128	; 0x80
 8001144:	029b      	lsls	r3, r3, #10
 8001146:	4013      	ands	r3, r2
 8001148:	d1f0      	bne.n	800112c <HAL_RCC_OscConfig+0x118>
 800114a:	e000      	b.n	800114e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800114c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2202      	movs	r2, #2
 8001154:	4013      	ands	r3, r2
 8001156:	d100      	bne.n	800115a <HAL_RCC_OscConfig+0x146>
 8001158:	e069      	b.n	800122e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800115a:	4b79      	ldr	r3, [pc, #484]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	220c      	movs	r2, #12
 8001160:	4013      	ands	r3, r2
 8001162:	d00b      	beq.n	800117c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001164:	4b76      	ldr	r3, [pc, #472]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	220c      	movs	r2, #12
 800116a:	4013      	ands	r3, r2
 800116c:	2b08      	cmp	r3, #8
 800116e:	d11c      	bne.n	80011aa <HAL_RCC_OscConfig+0x196>
 8001170:	4b73      	ldr	r3, [pc, #460]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 8001172:	685a      	ldr	r2, [r3, #4]
 8001174:	2380      	movs	r3, #128	; 0x80
 8001176:	025b      	lsls	r3, r3, #9
 8001178:	4013      	ands	r3, r2
 800117a:	d116      	bne.n	80011aa <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800117c:	4b70      	ldr	r3, [pc, #448]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2202      	movs	r2, #2
 8001182:	4013      	ands	r3, r2
 8001184:	d005      	beq.n	8001192 <HAL_RCC_OscConfig+0x17e>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d001      	beq.n	8001192 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e24b      	b.n	800162a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001192:	4b6b      	ldr	r3, [pc, #428]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	22f8      	movs	r2, #248	; 0xf8
 8001198:	4393      	bics	r3, r2
 800119a:	0019      	movs	r1, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	00da      	lsls	r2, r3, #3
 80011a2:	4b67      	ldr	r3, [pc, #412]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80011a4:	430a      	orrs	r2, r1
 80011a6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011a8:	e041      	b.n	800122e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d024      	beq.n	80011fc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011b2:	4b63      	ldr	r3, [pc, #396]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	4b62      	ldr	r3, [pc, #392]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80011b8:	2101      	movs	r1, #1
 80011ba:	430a      	orrs	r2, r1
 80011bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011be:	f7ff f8c1 	bl	8000344 <HAL_GetTick>
 80011c2:	0003      	movs	r3, r0
 80011c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011c8:	f7ff f8bc 	bl	8000344 <HAL_GetTick>
 80011cc:	0002      	movs	r2, r0
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e227      	b.n	800162a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011da:	4b59      	ldr	r3, [pc, #356]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2202      	movs	r2, #2
 80011e0:	4013      	ands	r3, r2
 80011e2:	d0f1      	beq.n	80011c8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e4:	4b56      	ldr	r3, [pc, #344]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	22f8      	movs	r2, #248	; 0xf8
 80011ea:	4393      	bics	r3, r2
 80011ec:	0019      	movs	r1, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	00da      	lsls	r2, r3, #3
 80011f4:	4b52      	ldr	r3, [pc, #328]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80011f6:	430a      	orrs	r2, r1
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	e018      	b.n	800122e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011fc:	4b50      	ldr	r3, [pc, #320]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b4f      	ldr	r3, [pc, #316]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 8001202:	2101      	movs	r1, #1
 8001204:	438a      	bics	r2, r1
 8001206:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001208:	f7ff f89c 	bl	8000344 <HAL_GetTick>
 800120c:	0003      	movs	r3, r0
 800120e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001210:	e008      	b.n	8001224 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001212:	f7ff f897 	bl	8000344 <HAL_GetTick>
 8001216:	0002      	movs	r2, r0
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d901      	bls.n	8001224 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e202      	b.n	800162a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001224:	4b46      	ldr	r3, [pc, #280]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2202      	movs	r2, #2
 800122a:	4013      	ands	r3, r2
 800122c:	d1f1      	bne.n	8001212 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2208      	movs	r2, #8
 8001234:	4013      	ands	r3, r2
 8001236:	d036      	beq.n	80012a6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69db      	ldr	r3, [r3, #28]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d019      	beq.n	8001274 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001240:	4b3f      	ldr	r3, [pc, #252]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 8001242:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001244:	4b3e      	ldr	r3, [pc, #248]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 8001246:	2101      	movs	r1, #1
 8001248:	430a      	orrs	r2, r1
 800124a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124c:	f7ff f87a 	bl	8000344 <HAL_GetTick>
 8001250:	0003      	movs	r3, r0
 8001252:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001254:	e008      	b.n	8001268 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001256:	f7ff f875 	bl	8000344 <HAL_GetTick>
 800125a:	0002      	movs	r2, r0
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e1e0      	b.n	800162a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001268:	4b35      	ldr	r3, [pc, #212]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 800126a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126c:	2202      	movs	r2, #2
 800126e:	4013      	ands	r3, r2
 8001270:	d0f1      	beq.n	8001256 <HAL_RCC_OscConfig+0x242>
 8001272:	e018      	b.n	80012a6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001274:	4b32      	ldr	r3, [pc, #200]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 8001276:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001278:	4b31      	ldr	r3, [pc, #196]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 800127a:	2101      	movs	r1, #1
 800127c:	438a      	bics	r2, r1
 800127e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001280:	f7ff f860 	bl	8000344 <HAL_GetTick>
 8001284:	0003      	movs	r3, r0
 8001286:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001288:	e008      	b.n	800129c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800128a:	f7ff f85b 	bl	8000344 <HAL_GetTick>
 800128e:	0002      	movs	r2, r0
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e1c6      	b.n	800162a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800129c:	4b28      	ldr	r3, [pc, #160]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	2202      	movs	r2, #2
 80012a2:	4013      	ands	r3, r2
 80012a4:	d1f1      	bne.n	800128a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2204      	movs	r2, #4
 80012ac:	4013      	ands	r3, r2
 80012ae:	d100      	bne.n	80012b2 <HAL_RCC_OscConfig+0x29e>
 80012b0:	e0b4      	b.n	800141c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012b2:	201f      	movs	r0, #31
 80012b4:	183b      	adds	r3, r7, r0
 80012b6:	2200      	movs	r2, #0
 80012b8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ba:	4b21      	ldr	r3, [pc, #132]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80012bc:	69da      	ldr	r2, [r3, #28]
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	055b      	lsls	r3, r3, #21
 80012c2:	4013      	ands	r3, r2
 80012c4:	d110      	bne.n	80012e8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012c6:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80012c8:	69da      	ldr	r2, [r3, #28]
 80012ca:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80012cc:	2180      	movs	r1, #128	; 0x80
 80012ce:	0549      	lsls	r1, r1, #21
 80012d0:	430a      	orrs	r2, r1
 80012d2:	61da      	str	r2, [r3, #28]
 80012d4:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 80012d6:	69da      	ldr	r2, [r3, #28]
 80012d8:	2380      	movs	r3, #128	; 0x80
 80012da:	055b      	lsls	r3, r3, #21
 80012dc:	4013      	ands	r3, r2
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80012e2:	183b      	adds	r3, r7, r0
 80012e4:	2201      	movs	r2, #1
 80012e6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e8:	4b18      	ldr	r3, [pc, #96]	; (800134c <HAL_RCC_OscConfig+0x338>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	2380      	movs	r3, #128	; 0x80
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	4013      	ands	r3, r2
 80012f2:	d11a      	bne.n	800132a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012f4:	4b15      	ldr	r3, [pc, #84]	; (800134c <HAL_RCC_OscConfig+0x338>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <HAL_RCC_OscConfig+0x338>)
 80012fa:	2180      	movs	r1, #128	; 0x80
 80012fc:	0049      	lsls	r1, r1, #1
 80012fe:	430a      	orrs	r2, r1
 8001300:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001302:	f7ff f81f 	bl	8000344 <HAL_GetTick>
 8001306:	0003      	movs	r3, r0
 8001308:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800130c:	f7ff f81a 	bl	8000344 <HAL_GetTick>
 8001310:	0002      	movs	r2, r0
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b64      	cmp	r3, #100	; 0x64
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e185      	b.n	800162a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131e:	4b0b      	ldr	r3, [pc, #44]	; (800134c <HAL_RCC_OscConfig+0x338>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	4013      	ands	r3, r2
 8001328:	d0f0      	beq.n	800130c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d10e      	bne.n	8001350 <HAL_RCC_OscConfig+0x33c>
 8001332:	4b03      	ldr	r3, [pc, #12]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 8001334:	6a1a      	ldr	r2, [r3, #32]
 8001336:	4b02      	ldr	r3, [pc, #8]	; (8001340 <HAL_RCC_OscConfig+0x32c>)
 8001338:	2101      	movs	r1, #1
 800133a:	430a      	orrs	r2, r1
 800133c:	621a      	str	r2, [r3, #32]
 800133e:	e035      	b.n	80013ac <HAL_RCC_OscConfig+0x398>
 8001340:	40021000 	.word	0x40021000
 8001344:	fffeffff 	.word	0xfffeffff
 8001348:	fffbffff 	.word	0xfffbffff
 800134c:	40007000 	.word	0x40007000
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d10c      	bne.n	8001372 <HAL_RCC_OscConfig+0x35e>
 8001358:	4bb6      	ldr	r3, [pc, #728]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 800135a:	6a1a      	ldr	r2, [r3, #32]
 800135c:	4bb5      	ldr	r3, [pc, #724]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 800135e:	2101      	movs	r1, #1
 8001360:	438a      	bics	r2, r1
 8001362:	621a      	str	r2, [r3, #32]
 8001364:	4bb3      	ldr	r3, [pc, #716]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 8001366:	6a1a      	ldr	r2, [r3, #32]
 8001368:	4bb2      	ldr	r3, [pc, #712]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 800136a:	2104      	movs	r1, #4
 800136c:	438a      	bics	r2, r1
 800136e:	621a      	str	r2, [r3, #32]
 8001370:	e01c      	b.n	80013ac <HAL_RCC_OscConfig+0x398>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	2b05      	cmp	r3, #5
 8001378:	d10c      	bne.n	8001394 <HAL_RCC_OscConfig+0x380>
 800137a:	4bae      	ldr	r3, [pc, #696]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 800137c:	6a1a      	ldr	r2, [r3, #32]
 800137e:	4bad      	ldr	r3, [pc, #692]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 8001380:	2104      	movs	r1, #4
 8001382:	430a      	orrs	r2, r1
 8001384:	621a      	str	r2, [r3, #32]
 8001386:	4bab      	ldr	r3, [pc, #684]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 8001388:	6a1a      	ldr	r2, [r3, #32]
 800138a:	4baa      	ldr	r3, [pc, #680]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 800138c:	2101      	movs	r1, #1
 800138e:	430a      	orrs	r2, r1
 8001390:	621a      	str	r2, [r3, #32]
 8001392:	e00b      	b.n	80013ac <HAL_RCC_OscConfig+0x398>
 8001394:	4ba7      	ldr	r3, [pc, #668]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 8001396:	6a1a      	ldr	r2, [r3, #32]
 8001398:	4ba6      	ldr	r3, [pc, #664]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 800139a:	2101      	movs	r1, #1
 800139c:	438a      	bics	r2, r1
 800139e:	621a      	str	r2, [r3, #32]
 80013a0:	4ba4      	ldr	r3, [pc, #656]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 80013a2:	6a1a      	ldr	r2, [r3, #32]
 80013a4:	4ba3      	ldr	r3, [pc, #652]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 80013a6:	2104      	movs	r1, #4
 80013a8:	438a      	bics	r2, r1
 80013aa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d014      	beq.n	80013de <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b4:	f7fe ffc6 	bl	8000344 <HAL_GetTick>
 80013b8:	0003      	movs	r3, r0
 80013ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013bc:	e009      	b.n	80013d2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013be:	f7fe ffc1 	bl	8000344 <HAL_GetTick>
 80013c2:	0002      	movs	r2, r0
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	4a9b      	ldr	r2, [pc, #620]	; (8001638 <HAL_RCC_OscConfig+0x624>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e12b      	b.n	800162a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d2:	4b98      	ldr	r3, [pc, #608]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 80013d4:	6a1b      	ldr	r3, [r3, #32]
 80013d6:	2202      	movs	r2, #2
 80013d8:	4013      	ands	r3, r2
 80013da:	d0f0      	beq.n	80013be <HAL_RCC_OscConfig+0x3aa>
 80013dc:	e013      	b.n	8001406 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013de:	f7fe ffb1 	bl	8000344 <HAL_GetTick>
 80013e2:	0003      	movs	r3, r0
 80013e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e6:	e009      	b.n	80013fc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013e8:	f7fe ffac 	bl	8000344 <HAL_GetTick>
 80013ec:	0002      	movs	r2, r0
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	4a91      	ldr	r2, [pc, #580]	; (8001638 <HAL_RCC_OscConfig+0x624>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e116      	b.n	800162a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013fc:	4b8d      	ldr	r3, [pc, #564]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 80013fe:	6a1b      	ldr	r3, [r3, #32]
 8001400:	2202      	movs	r2, #2
 8001402:	4013      	ands	r3, r2
 8001404:	d1f0      	bne.n	80013e8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001406:	231f      	movs	r3, #31
 8001408:	18fb      	adds	r3, r7, r3
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d105      	bne.n	800141c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001410:	4b88      	ldr	r3, [pc, #544]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 8001412:	69da      	ldr	r2, [r3, #28]
 8001414:	4b87      	ldr	r3, [pc, #540]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 8001416:	4989      	ldr	r1, [pc, #548]	; (800163c <HAL_RCC_OscConfig+0x628>)
 8001418:	400a      	ands	r2, r1
 800141a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2210      	movs	r2, #16
 8001422:	4013      	ands	r3, r2
 8001424:	d063      	beq.n	80014ee <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d12a      	bne.n	8001484 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800142e:	4b81      	ldr	r3, [pc, #516]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 8001430:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001432:	4b80      	ldr	r3, [pc, #512]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 8001434:	2104      	movs	r1, #4
 8001436:	430a      	orrs	r2, r1
 8001438:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800143a:	4b7e      	ldr	r3, [pc, #504]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 800143c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800143e:	4b7d      	ldr	r3, [pc, #500]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 8001440:	2101      	movs	r1, #1
 8001442:	430a      	orrs	r2, r1
 8001444:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001446:	f7fe ff7d 	bl	8000344 <HAL_GetTick>
 800144a:	0003      	movs	r3, r0
 800144c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001450:	f7fe ff78 	bl	8000344 <HAL_GetTick>
 8001454:	0002      	movs	r2, r0
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e0e3      	b.n	800162a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001462:	4b74      	ldr	r3, [pc, #464]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 8001464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001466:	2202      	movs	r2, #2
 8001468:	4013      	ands	r3, r2
 800146a:	d0f1      	beq.n	8001450 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800146c:	4b71      	ldr	r3, [pc, #452]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 800146e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001470:	22f8      	movs	r2, #248	; 0xf8
 8001472:	4393      	bics	r3, r2
 8001474:	0019      	movs	r1, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	00da      	lsls	r2, r3, #3
 800147c:	4b6d      	ldr	r3, [pc, #436]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 800147e:	430a      	orrs	r2, r1
 8001480:	635a      	str	r2, [r3, #52]	; 0x34
 8001482:	e034      	b.n	80014ee <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	3305      	adds	r3, #5
 800148a:	d111      	bne.n	80014b0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800148c:	4b69      	ldr	r3, [pc, #420]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 800148e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001490:	4b68      	ldr	r3, [pc, #416]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 8001492:	2104      	movs	r1, #4
 8001494:	438a      	bics	r2, r1
 8001496:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001498:	4b66      	ldr	r3, [pc, #408]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 800149a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800149c:	22f8      	movs	r2, #248	; 0xf8
 800149e:	4393      	bics	r3, r2
 80014a0:	0019      	movs	r1, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	00da      	lsls	r2, r3, #3
 80014a8:	4b62      	ldr	r3, [pc, #392]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 80014aa:	430a      	orrs	r2, r1
 80014ac:	635a      	str	r2, [r3, #52]	; 0x34
 80014ae:	e01e      	b.n	80014ee <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80014b0:	4b60      	ldr	r3, [pc, #384]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 80014b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014b4:	4b5f      	ldr	r3, [pc, #380]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 80014b6:	2104      	movs	r1, #4
 80014b8:	430a      	orrs	r2, r1
 80014ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80014bc:	4b5d      	ldr	r3, [pc, #372]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 80014be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014c0:	4b5c      	ldr	r3, [pc, #368]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 80014c2:	2101      	movs	r1, #1
 80014c4:	438a      	bics	r2, r1
 80014c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c8:	f7fe ff3c 	bl	8000344 <HAL_GetTick>
 80014cc:	0003      	movs	r3, r0
 80014ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80014d2:	f7fe ff37 	bl	8000344 <HAL_GetTick>
 80014d6:	0002      	movs	r2, r0
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e0a2      	b.n	800162a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014e4:	4b53      	ldr	r3, [pc, #332]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 80014e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014e8:	2202      	movs	r2, #2
 80014ea:	4013      	ands	r3, r2
 80014ec:	d1f1      	bne.n	80014d2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a1b      	ldr	r3, [r3, #32]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d100      	bne.n	80014f8 <HAL_RCC_OscConfig+0x4e4>
 80014f6:	e097      	b.n	8001628 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014f8:	4b4e      	ldr	r3, [pc, #312]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	220c      	movs	r2, #12
 80014fe:	4013      	ands	r3, r2
 8001500:	2b08      	cmp	r3, #8
 8001502:	d100      	bne.n	8001506 <HAL_RCC_OscConfig+0x4f2>
 8001504:	e06b      	b.n	80015de <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	2b02      	cmp	r3, #2
 800150c:	d14c      	bne.n	80015a8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800150e:	4b49      	ldr	r3, [pc, #292]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	4b48      	ldr	r3, [pc, #288]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 8001514:	494a      	ldr	r1, [pc, #296]	; (8001640 <HAL_RCC_OscConfig+0x62c>)
 8001516:	400a      	ands	r2, r1
 8001518:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151a:	f7fe ff13 	bl	8000344 <HAL_GetTick>
 800151e:	0003      	movs	r3, r0
 8001520:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001524:	f7fe ff0e 	bl	8000344 <HAL_GetTick>
 8001528:	0002      	movs	r2, r0
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e079      	b.n	800162a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001536:	4b3f      	ldr	r3, [pc, #252]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	2380      	movs	r3, #128	; 0x80
 800153c:	049b      	lsls	r3, r3, #18
 800153e:	4013      	ands	r3, r2
 8001540:	d1f0      	bne.n	8001524 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001542:	4b3c      	ldr	r3, [pc, #240]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 8001544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001546:	220f      	movs	r2, #15
 8001548:	4393      	bics	r3, r2
 800154a:	0019      	movs	r1, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001550:	4b38      	ldr	r3, [pc, #224]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 8001552:	430a      	orrs	r2, r1
 8001554:	62da      	str	r2, [r3, #44]	; 0x2c
 8001556:	4b37      	ldr	r3, [pc, #220]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	4a3a      	ldr	r2, [pc, #232]	; (8001644 <HAL_RCC_OscConfig+0x630>)
 800155c:	4013      	ands	r3, r2
 800155e:	0019      	movs	r1, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001568:	431a      	orrs	r2, r3
 800156a:	4b32      	ldr	r3, [pc, #200]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 800156c:	430a      	orrs	r2, r1
 800156e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001570:	4b30      	ldr	r3, [pc, #192]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4b2f      	ldr	r3, [pc, #188]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 8001576:	2180      	movs	r1, #128	; 0x80
 8001578:	0449      	lsls	r1, r1, #17
 800157a:	430a      	orrs	r2, r1
 800157c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157e:	f7fe fee1 	bl	8000344 <HAL_GetTick>
 8001582:	0003      	movs	r3, r0
 8001584:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001588:	f7fe fedc 	bl	8000344 <HAL_GetTick>
 800158c:	0002      	movs	r2, r0
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e047      	b.n	800162a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800159a:	4b26      	ldr	r3, [pc, #152]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	049b      	lsls	r3, r3, #18
 80015a2:	4013      	ands	r3, r2
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0x574>
 80015a6:	e03f      	b.n	8001628 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a8:	4b22      	ldr	r3, [pc, #136]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4b21      	ldr	r3, [pc, #132]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 80015ae:	4924      	ldr	r1, [pc, #144]	; (8001640 <HAL_RCC_OscConfig+0x62c>)
 80015b0:	400a      	ands	r2, r1
 80015b2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b4:	f7fe fec6 	bl	8000344 <HAL_GetTick>
 80015b8:	0003      	movs	r3, r0
 80015ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015be:	f7fe fec1 	bl	8000344 <HAL_GetTick>
 80015c2:	0002      	movs	r2, r0
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e02c      	b.n	800162a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d0:	4b18      	ldr	r3, [pc, #96]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	2380      	movs	r3, #128	; 0x80
 80015d6:	049b      	lsls	r3, r3, #18
 80015d8:	4013      	ands	r3, r2
 80015da:	d1f0      	bne.n	80015be <HAL_RCC_OscConfig+0x5aa>
 80015dc:	e024      	b.n	8001628 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a1b      	ldr	r3, [r3, #32]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d101      	bne.n	80015ea <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e01f      	b.n	800162a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80015ea:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80015f0:	4b10      	ldr	r3, [pc, #64]	; (8001634 <HAL_RCC_OscConfig+0x620>)
 80015f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	2380      	movs	r3, #128	; 0x80
 80015fa:	025b      	lsls	r3, r3, #9
 80015fc:	401a      	ands	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001602:	429a      	cmp	r2, r3
 8001604:	d10e      	bne.n	8001624 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	220f      	movs	r2, #15
 800160a:	401a      	ands	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001610:	429a      	cmp	r2, r3
 8001612:	d107      	bne.n	8001624 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	23f0      	movs	r3, #240	; 0xf0
 8001618:	039b      	lsls	r3, r3, #14
 800161a:	401a      	ands	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001620:	429a      	cmp	r2, r3
 8001622:	d001      	beq.n	8001628 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e000      	b.n	800162a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	0018      	movs	r0, r3
 800162c:	46bd      	mov	sp, r7
 800162e:	b008      	add	sp, #32
 8001630:	bd80      	pop	{r7, pc}
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	40021000 	.word	0x40021000
 8001638:	00001388 	.word	0x00001388
 800163c:	efffffff 	.word	0xefffffff
 8001640:	feffffff 	.word	0xfeffffff
 8001644:	ffc2ffff 	.word	0xffc2ffff

08001648 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d101      	bne.n	800165c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e0b3      	b.n	80017c4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800165c:	4b5b      	ldr	r3, [pc, #364]	; (80017cc <HAL_RCC_ClockConfig+0x184>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2201      	movs	r2, #1
 8001662:	4013      	ands	r3, r2
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	429a      	cmp	r2, r3
 8001668:	d911      	bls.n	800168e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800166a:	4b58      	ldr	r3, [pc, #352]	; (80017cc <HAL_RCC_ClockConfig+0x184>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2201      	movs	r2, #1
 8001670:	4393      	bics	r3, r2
 8001672:	0019      	movs	r1, r3
 8001674:	4b55      	ldr	r3, [pc, #340]	; (80017cc <HAL_RCC_ClockConfig+0x184>)
 8001676:	683a      	ldr	r2, [r7, #0]
 8001678:	430a      	orrs	r2, r1
 800167a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800167c:	4b53      	ldr	r3, [pc, #332]	; (80017cc <HAL_RCC_ClockConfig+0x184>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2201      	movs	r2, #1
 8001682:	4013      	ands	r3, r2
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	429a      	cmp	r2, r3
 8001688:	d001      	beq.n	800168e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e09a      	b.n	80017c4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2202      	movs	r2, #2
 8001694:	4013      	ands	r3, r2
 8001696:	d015      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2204      	movs	r2, #4
 800169e:	4013      	ands	r3, r2
 80016a0:	d006      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80016a2:	4b4b      	ldr	r3, [pc, #300]	; (80017d0 <HAL_RCC_ClockConfig+0x188>)
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	4b4a      	ldr	r3, [pc, #296]	; (80017d0 <HAL_RCC_ClockConfig+0x188>)
 80016a8:	21e0      	movs	r1, #224	; 0xe0
 80016aa:	00c9      	lsls	r1, r1, #3
 80016ac:	430a      	orrs	r2, r1
 80016ae:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b0:	4b47      	ldr	r3, [pc, #284]	; (80017d0 <HAL_RCC_ClockConfig+0x188>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	22f0      	movs	r2, #240	; 0xf0
 80016b6:	4393      	bics	r3, r2
 80016b8:	0019      	movs	r1, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689a      	ldr	r2, [r3, #8]
 80016be:	4b44      	ldr	r3, [pc, #272]	; (80017d0 <HAL_RCC_ClockConfig+0x188>)
 80016c0:	430a      	orrs	r2, r1
 80016c2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2201      	movs	r2, #1
 80016ca:	4013      	ands	r3, r2
 80016cc:	d040      	beq.n	8001750 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d107      	bne.n	80016e6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d6:	4b3e      	ldr	r3, [pc, #248]	; (80017d0 <HAL_RCC_ClockConfig+0x188>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	2380      	movs	r3, #128	; 0x80
 80016dc:	029b      	lsls	r3, r3, #10
 80016de:	4013      	ands	r3, r2
 80016e0:	d114      	bne.n	800170c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e06e      	b.n	80017c4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d107      	bne.n	80016fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ee:	4b38      	ldr	r3, [pc, #224]	; (80017d0 <HAL_RCC_ClockConfig+0x188>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	049b      	lsls	r3, r3, #18
 80016f6:	4013      	ands	r3, r2
 80016f8:	d108      	bne.n	800170c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e062      	b.n	80017c4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016fe:	4b34      	ldr	r3, [pc, #208]	; (80017d0 <HAL_RCC_ClockConfig+0x188>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2202      	movs	r2, #2
 8001704:	4013      	ands	r3, r2
 8001706:	d101      	bne.n	800170c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e05b      	b.n	80017c4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800170c:	4b30      	ldr	r3, [pc, #192]	; (80017d0 <HAL_RCC_ClockConfig+0x188>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2203      	movs	r2, #3
 8001712:	4393      	bics	r3, r2
 8001714:	0019      	movs	r1, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	4b2d      	ldr	r3, [pc, #180]	; (80017d0 <HAL_RCC_ClockConfig+0x188>)
 800171c:	430a      	orrs	r2, r1
 800171e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001720:	f7fe fe10 	bl	8000344 <HAL_GetTick>
 8001724:	0003      	movs	r3, r0
 8001726:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001728:	e009      	b.n	800173e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800172a:	f7fe fe0b 	bl	8000344 <HAL_GetTick>
 800172e:	0002      	movs	r2, r0
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	4a27      	ldr	r2, [pc, #156]	; (80017d4 <HAL_RCC_ClockConfig+0x18c>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d901      	bls.n	800173e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e042      	b.n	80017c4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800173e:	4b24      	ldr	r3, [pc, #144]	; (80017d0 <HAL_RCC_ClockConfig+0x188>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	220c      	movs	r2, #12
 8001744:	401a      	ands	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	429a      	cmp	r2, r3
 800174e:	d1ec      	bne.n	800172a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001750:	4b1e      	ldr	r3, [pc, #120]	; (80017cc <HAL_RCC_ClockConfig+0x184>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2201      	movs	r2, #1
 8001756:	4013      	ands	r3, r2
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d211      	bcs.n	8001782 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175e:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <HAL_RCC_ClockConfig+0x184>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2201      	movs	r2, #1
 8001764:	4393      	bics	r3, r2
 8001766:	0019      	movs	r1, r3
 8001768:	4b18      	ldr	r3, [pc, #96]	; (80017cc <HAL_RCC_ClockConfig+0x184>)
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001770:	4b16      	ldr	r3, [pc, #88]	; (80017cc <HAL_RCC_ClockConfig+0x184>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2201      	movs	r2, #1
 8001776:	4013      	ands	r3, r2
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	429a      	cmp	r2, r3
 800177c:	d001      	beq.n	8001782 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e020      	b.n	80017c4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2204      	movs	r2, #4
 8001788:	4013      	ands	r3, r2
 800178a:	d009      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800178c:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <HAL_RCC_ClockConfig+0x188>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	4a11      	ldr	r2, [pc, #68]	; (80017d8 <HAL_RCC_ClockConfig+0x190>)
 8001792:	4013      	ands	r3, r2
 8001794:	0019      	movs	r1, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68da      	ldr	r2, [r3, #12]
 800179a:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <HAL_RCC_ClockConfig+0x188>)
 800179c:	430a      	orrs	r2, r1
 800179e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80017a0:	f000 f820 	bl	80017e4 <HAL_RCC_GetSysClockFreq>
 80017a4:	0001      	movs	r1, r0
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <HAL_RCC_ClockConfig+0x188>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	091b      	lsrs	r3, r3, #4
 80017ac:	220f      	movs	r2, #15
 80017ae:	4013      	ands	r3, r2
 80017b0:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <HAL_RCC_ClockConfig+0x194>)
 80017b2:	5cd3      	ldrb	r3, [r2, r3]
 80017b4:	000a      	movs	r2, r1
 80017b6:	40da      	lsrs	r2, r3
 80017b8:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <HAL_RCC_ClockConfig+0x198>)
 80017ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80017bc:	2000      	movs	r0, #0
 80017be:	f7fe fd7b 	bl	80002b8 <HAL_InitTick>
  
  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	0018      	movs	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	b004      	add	sp, #16
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40022000 	.word	0x40022000
 80017d0:	40021000 	.word	0x40021000
 80017d4:	00001388 	.word	0x00001388
 80017d8:	fffff8ff 	.word	0xfffff8ff
 80017dc:	08004c28 	.word	0x08004c28
 80017e0:	2000000c 	.word	0x2000000c

080017e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017e4:	b590      	push	{r4, r7, lr}
 80017e6:	b08f      	sub	sp, #60	; 0x3c
 80017e8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80017ea:	2314      	movs	r3, #20
 80017ec:	18fb      	adds	r3, r7, r3
 80017ee:	4a2b      	ldr	r2, [pc, #172]	; (800189c <HAL_RCC_GetSysClockFreq+0xb8>)
 80017f0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80017f2:	c313      	stmia	r3!, {r0, r1, r4}
 80017f4:	6812      	ldr	r2, [r2, #0]
 80017f6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	4a29      	ldr	r2, [pc, #164]	; (80018a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017fc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80017fe:	c313      	stmia	r3!, {r0, r1, r4}
 8001800:	6812      	ldr	r2, [r2, #0]
 8001802:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001804:	2300      	movs	r3, #0
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001808:	2300      	movs	r3, #0
 800180a:	62bb      	str	r3, [r7, #40]	; 0x28
 800180c:	2300      	movs	r3, #0
 800180e:	637b      	str	r3, [r7, #52]	; 0x34
 8001810:	2300      	movs	r3, #0
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001818:	4b22      	ldr	r3, [pc, #136]	; (80018a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800181e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001820:	220c      	movs	r2, #12
 8001822:	4013      	ands	r3, r2
 8001824:	2b04      	cmp	r3, #4
 8001826:	d002      	beq.n	800182e <HAL_RCC_GetSysClockFreq+0x4a>
 8001828:	2b08      	cmp	r3, #8
 800182a:	d003      	beq.n	8001834 <HAL_RCC_GetSysClockFreq+0x50>
 800182c:	e02d      	b.n	800188a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800182e:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001830:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001832:	e02d      	b.n	8001890 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001836:	0c9b      	lsrs	r3, r3, #18
 8001838:	220f      	movs	r2, #15
 800183a:	4013      	ands	r3, r2
 800183c:	2214      	movs	r2, #20
 800183e:	18ba      	adds	r2, r7, r2
 8001840:	5cd3      	ldrb	r3, [r2, r3]
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001844:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001848:	220f      	movs	r2, #15
 800184a:	4013      	ands	r3, r2
 800184c:	1d3a      	adds	r2, r7, #4
 800184e:	5cd3      	ldrb	r3, [r2, r3]
 8001850:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001854:	2380      	movs	r3, #128	; 0x80
 8001856:	025b      	lsls	r3, r3, #9
 8001858:	4013      	ands	r3, r2
 800185a:	d009      	beq.n	8001870 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800185c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800185e:	4812      	ldr	r0, [pc, #72]	; (80018a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001860:	f7fe fc5c 	bl	800011c <__udivsi3>
 8001864:	0003      	movs	r3, r0
 8001866:	001a      	movs	r2, r3
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	4353      	muls	r3, r2
 800186c:	637b      	str	r3, [r7, #52]	; 0x34
 800186e:	e009      	b.n	8001884 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001870:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001872:	000a      	movs	r2, r1
 8001874:	0152      	lsls	r2, r2, #5
 8001876:	1a52      	subs	r2, r2, r1
 8001878:	0193      	lsls	r3, r2, #6
 800187a:	1a9b      	subs	r3, r3, r2
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	185b      	adds	r3, r3, r1
 8001880:	021b      	lsls	r3, r3, #8
 8001882:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001886:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001888:	e002      	b.n	8001890 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800188a:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800188c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800188e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001892:	0018      	movs	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	b00f      	add	sp, #60	; 0x3c
 8001898:	bd90      	pop	{r4, r7, pc}
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	08004c08 	.word	0x08004c08
 80018a0:	08004c18 	.word	0x08004c18
 80018a4:	40021000 	.word	0x40021000
 80018a8:	007a1200 	.word	0x007a1200

080018ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018b0:	4b02      	ldr	r3, [pc, #8]	; (80018bc <HAL_RCC_GetHCLKFreq+0x10>)
 80018b2:	681b      	ldr	r3, [r3, #0]
}
 80018b4:	0018      	movs	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	2000000c 	.word	0x2000000c

080018c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80018c4:	f7ff fff2 	bl	80018ac <HAL_RCC_GetHCLKFreq>
 80018c8:	0001      	movs	r1, r0
 80018ca:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	0a1b      	lsrs	r3, r3, #8
 80018d0:	2207      	movs	r2, #7
 80018d2:	4013      	ands	r3, r2
 80018d4:	4a04      	ldr	r2, [pc, #16]	; (80018e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80018d6:	5cd3      	ldrb	r3, [r2, r3]
 80018d8:	40d9      	lsrs	r1, r3
 80018da:	000b      	movs	r3, r1
}    
 80018dc:	0018      	movs	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	40021000 	.word	0x40021000
 80018e8:	08004c38 	.word	0x08004c38

080018ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	2380      	movs	r3, #128	; 0x80
 8001902:	025b      	lsls	r3, r3, #9
 8001904:	4013      	ands	r3, r2
 8001906:	d100      	bne.n	800190a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001908:	e08e      	b.n	8001a28 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800190a:	2017      	movs	r0, #23
 800190c:	183b      	adds	r3, r7, r0
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001912:	4b57      	ldr	r3, [pc, #348]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001914:	69da      	ldr	r2, [r3, #28]
 8001916:	2380      	movs	r3, #128	; 0x80
 8001918:	055b      	lsls	r3, r3, #21
 800191a:	4013      	ands	r3, r2
 800191c:	d110      	bne.n	8001940 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800191e:	4b54      	ldr	r3, [pc, #336]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001920:	69da      	ldr	r2, [r3, #28]
 8001922:	4b53      	ldr	r3, [pc, #332]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001924:	2180      	movs	r1, #128	; 0x80
 8001926:	0549      	lsls	r1, r1, #21
 8001928:	430a      	orrs	r2, r1
 800192a:	61da      	str	r2, [r3, #28]
 800192c:	4b50      	ldr	r3, [pc, #320]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800192e:	69da      	ldr	r2, [r3, #28]
 8001930:	2380      	movs	r3, #128	; 0x80
 8001932:	055b      	lsls	r3, r3, #21
 8001934:	4013      	ands	r3, r2
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800193a:	183b      	adds	r3, r7, r0
 800193c:	2201      	movs	r2, #1
 800193e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001940:	4b4c      	ldr	r3, [pc, #304]	; (8001a74 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	2380      	movs	r3, #128	; 0x80
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	4013      	ands	r3, r2
 800194a:	d11a      	bne.n	8001982 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800194c:	4b49      	ldr	r3, [pc, #292]	; (8001a74 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4b48      	ldr	r3, [pc, #288]	; (8001a74 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001952:	2180      	movs	r1, #128	; 0x80
 8001954:	0049      	lsls	r1, r1, #1
 8001956:	430a      	orrs	r2, r1
 8001958:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800195a:	f7fe fcf3 	bl	8000344 <HAL_GetTick>
 800195e:	0003      	movs	r3, r0
 8001960:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001962:	e008      	b.n	8001976 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001964:	f7fe fcee 	bl	8000344 <HAL_GetTick>
 8001968:	0002      	movs	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b64      	cmp	r3, #100	; 0x64
 8001970:	d901      	bls.n	8001976 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e077      	b.n	8001a66 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001976:	4b3f      	ldr	r3, [pc, #252]	; (8001a74 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	2380      	movs	r3, #128	; 0x80
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	4013      	ands	r3, r2
 8001980:	d0f0      	beq.n	8001964 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001982:	4b3b      	ldr	r3, [pc, #236]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001984:	6a1a      	ldr	r2, [r3, #32]
 8001986:	23c0      	movs	r3, #192	; 0xc0
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4013      	ands	r3, r2
 800198c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d034      	beq.n	80019fe <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	23c0      	movs	r3, #192	; 0xc0
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4013      	ands	r3, r2
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d02c      	beq.n	80019fe <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80019a4:	4b32      	ldr	r3, [pc, #200]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	4a33      	ldr	r2, [pc, #204]	; (8001a78 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80019aa:	4013      	ands	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80019ae:	4b30      	ldr	r3, [pc, #192]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019b0:	6a1a      	ldr	r2, [r3, #32]
 80019b2:	4b2f      	ldr	r3, [pc, #188]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019b4:	2180      	movs	r1, #128	; 0x80
 80019b6:	0249      	lsls	r1, r1, #9
 80019b8:	430a      	orrs	r2, r1
 80019ba:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80019bc:	4b2c      	ldr	r3, [pc, #176]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019be:	6a1a      	ldr	r2, [r3, #32]
 80019c0:	4b2b      	ldr	r3, [pc, #172]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019c2:	492e      	ldr	r1, [pc, #184]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80019c4:	400a      	ands	r2, r1
 80019c6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80019c8:	4b29      	ldr	r3, [pc, #164]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2201      	movs	r2, #1
 80019d2:	4013      	ands	r3, r2
 80019d4:	d013      	beq.n	80019fe <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d6:	f7fe fcb5 	bl	8000344 <HAL_GetTick>
 80019da:	0003      	movs	r3, r0
 80019dc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019de:	e009      	b.n	80019f4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019e0:	f7fe fcb0 	bl	8000344 <HAL_GetTick>
 80019e4:	0002      	movs	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	4a25      	ldr	r2, [pc, #148]	; (8001a80 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e038      	b.n	8001a66 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f4:	4b1e      	ldr	r3, [pc, #120]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	2202      	movs	r2, #2
 80019fa:	4013      	ands	r3, r2
 80019fc:	d0f0      	beq.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80019fe:	4b1c      	ldr	r3, [pc, #112]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	4a1d      	ldr	r2, [pc, #116]	; (8001a78 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	0019      	movs	r1, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a12:	2317      	movs	r3, #23
 8001a14:	18fb      	adds	r3, r7, r3
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d105      	bne.n	8001a28 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a1c:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a1e:	69da      	ldr	r2, [r3, #28]
 8001a20:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a22:	4918      	ldr	r1, [pc, #96]	; (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001a24:	400a      	ands	r2, r1
 8001a26:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d009      	beq.n	8001a46 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a32:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	2203      	movs	r2, #3
 8001a38:	4393      	bics	r3, r2
 8001a3a:	0019      	movs	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a42:	430a      	orrs	r2, r1
 8001a44:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2220      	movs	r2, #32
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d009      	beq.n	8001a64 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001a50:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a54:	2210      	movs	r2, #16
 8001a56:	4393      	bics	r3, r2
 8001a58:	0019      	movs	r1, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68da      	ldr	r2, [r3, #12]
 8001a5e:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a60:	430a      	orrs	r2, r1
 8001a62:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	0018      	movs	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	b006      	add	sp, #24
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40007000 	.word	0x40007000
 8001a78:	fffffcff 	.word	0xfffffcff
 8001a7c:	fffeffff 	.word	0xfffeffff
 8001a80:	00001388 	.word	0x00001388
 8001a84:	efffffff 	.word	0xefffffff

08001a88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e042      	b.n	8001b20 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	223d      	movs	r2, #61	; 0x3d
 8001a9e:	5c9b      	ldrb	r3, [r3, r2]
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d107      	bne.n	8001ab6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	223c      	movs	r2, #60	; 0x3c
 8001aaa:	2100      	movs	r1, #0
 8001aac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f001 fee5 	bl	8003880 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	223d      	movs	r2, #61	; 0x3d
 8001aba:	2102      	movs	r1, #2
 8001abc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	0019      	movs	r1, r3
 8001ac8:	0010      	movs	r0, r2
 8001aca:	f000 f9af 	bl	8001e2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2246      	movs	r2, #70	; 0x46
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	223e      	movs	r2, #62	; 0x3e
 8001ada:	2101      	movs	r1, #1
 8001adc:	5499      	strb	r1, [r3, r2]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	223f      	movs	r2, #63	; 0x3f
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	5499      	strb	r1, [r3, r2]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2240      	movs	r2, #64	; 0x40
 8001aea:	2101      	movs	r1, #1
 8001aec:	5499      	strb	r1, [r3, r2]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2241      	movs	r2, #65	; 0x41
 8001af2:	2101      	movs	r1, #1
 8001af4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2242      	movs	r2, #66	; 0x42
 8001afa:	2101      	movs	r1, #1
 8001afc:	5499      	strb	r1, [r3, r2]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2243      	movs	r2, #67	; 0x43
 8001b02:	2101      	movs	r1, #1
 8001b04:	5499      	strb	r1, [r3, r2]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2244      	movs	r2, #68	; 0x44
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	5499      	strb	r1, [r3, r2]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2245      	movs	r2, #69	; 0x45
 8001b12:	2101      	movs	r1, #1
 8001b14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	223d      	movs	r2, #61	; 0x3d
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	0018      	movs	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	b002      	add	sp, #8
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	223d      	movs	r2, #61	; 0x3d
 8001b34:	5c9b      	ldrb	r3, [r3, r2]
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d001      	beq.n	8001b40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e035      	b.n	8001bac <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	223d      	movs	r2, #61	; 0x3d
 8001b44:	2102      	movs	r1, #2
 8001b46:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	68da      	ldr	r2, [r3, #12]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2101      	movs	r1, #1
 8001b54:	430a      	orrs	r2, r1
 8001b56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a15      	ldr	r2, [pc, #84]	; (8001bb4 <HAL_TIM_Base_Start_IT+0x8c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d009      	beq.n	8001b76 <HAL_TIM_Base_Start_IT+0x4e>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a14      	ldr	r2, [pc, #80]	; (8001bb8 <HAL_TIM_Base_Start_IT+0x90>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d004      	beq.n	8001b76 <HAL_TIM_Base_Start_IT+0x4e>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a12      	ldr	r2, [pc, #72]	; (8001bbc <HAL_TIM_Base_Start_IT+0x94>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d111      	bne.n	8001b9a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	2207      	movs	r2, #7
 8001b7e:	4013      	ands	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2b06      	cmp	r3, #6
 8001b86:	d010      	beq.n	8001baa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2101      	movs	r1, #1
 8001b94:	430a      	orrs	r2, r1
 8001b96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b98:	e007      	b.n	8001baa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	0018      	movs	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	b004      	add	sp, #16
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40012c00 	.word	0x40012c00
 8001bb8:	40000400 	.word	0x40000400
 8001bbc:	40014000 	.word	0x40014000

08001bc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d124      	bne.n	8001c20 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	2202      	movs	r2, #2
 8001bde:	4013      	ands	r3, r2
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d11d      	bne.n	8001c20 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2203      	movs	r2, #3
 8001bea:	4252      	negs	r2, r2
 8001bec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	2203      	movs	r2, #3
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d004      	beq.n	8001c0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	0018      	movs	r0, r3
 8001c04:	f000 f8fa 	bl	8001dfc <HAL_TIM_IC_CaptureCallback>
 8001c08:	e007      	b.n	8001c1a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	f000 f8ed 	bl	8001dec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	0018      	movs	r0, r3
 8001c16:	f000 f8f9 	bl	8001e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	2204      	movs	r2, #4
 8001c28:	4013      	ands	r3, r2
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	d125      	bne.n	8001c7a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	2204      	movs	r2, #4
 8001c36:	4013      	ands	r3, r2
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d11e      	bne.n	8001c7a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2205      	movs	r2, #5
 8001c42:	4252      	negs	r2, r2
 8001c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2202      	movs	r2, #2
 8001c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	699a      	ldr	r2, [r3, #24]
 8001c52:	23c0      	movs	r3, #192	; 0xc0
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4013      	ands	r3, r2
 8001c58:	d004      	beq.n	8001c64 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	f000 f8cd 	bl	8001dfc <HAL_TIM_IC_CaptureCallback>
 8001c62:	e007      	b.n	8001c74 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	0018      	movs	r0, r3
 8001c68:	f000 f8c0 	bl	8001dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	0018      	movs	r0, r3
 8001c70:	f000 f8cc 	bl	8001e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	2208      	movs	r2, #8
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	d124      	bne.n	8001cd2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	2208      	movs	r2, #8
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d11d      	bne.n	8001cd2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2209      	movs	r2, #9
 8001c9c:	4252      	negs	r2, r2
 8001c9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2204      	movs	r2, #4
 8001ca4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	2203      	movs	r2, #3
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d004      	beq.n	8001cbc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	f000 f8a1 	bl	8001dfc <HAL_TIM_IC_CaptureCallback>
 8001cba:	e007      	b.n	8001ccc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	f000 f894 	bl	8001dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	f000 f8a0 	bl	8001e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	2210      	movs	r2, #16
 8001cda:	4013      	ands	r3, r2
 8001cdc:	2b10      	cmp	r3, #16
 8001cde:	d125      	bne.n	8001d2c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	2210      	movs	r2, #16
 8001ce8:	4013      	ands	r3, r2
 8001cea:	2b10      	cmp	r3, #16
 8001cec:	d11e      	bne.n	8001d2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2211      	movs	r2, #17
 8001cf4:	4252      	negs	r2, r2
 8001cf6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2208      	movs	r2, #8
 8001cfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	69da      	ldr	r2, [r3, #28]
 8001d04:	23c0      	movs	r3, #192	; 0xc0
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d004      	beq.n	8001d16 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	0018      	movs	r0, r3
 8001d10:	f000 f874 	bl	8001dfc <HAL_TIM_IC_CaptureCallback>
 8001d14:	e007      	b.n	8001d26 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f000 f867 	bl	8001dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	0018      	movs	r0, r3
 8001d22:	f000 f873 	bl	8001e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	2201      	movs	r2, #1
 8001d34:	4013      	ands	r3, r2
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d10f      	bne.n	8001d5a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	2201      	movs	r2, #1
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d108      	bne.n	8001d5a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	4252      	negs	r2, r2
 8001d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	0018      	movs	r0, r3
 8001d56:	f001 fc95 	bl	8003684 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	2280      	movs	r2, #128	; 0x80
 8001d62:	4013      	ands	r3, r2
 8001d64:	2b80      	cmp	r3, #128	; 0x80
 8001d66:	d10f      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	2280      	movs	r2, #128	; 0x80
 8001d70:	4013      	ands	r3, r2
 8001d72:	2b80      	cmp	r3, #128	; 0x80
 8001d74:	d108      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2281      	movs	r2, #129	; 0x81
 8001d7c:	4252      	negs	r2, r2
 8001d7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	0018      	movs	r0, r3
 8001d84:	f000 f8d0 	bl	8001f28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	2240      	movs	r2, #64	; 0x40
 8001d90:	4013      	ands	r3, r2
 8001d92:	2b40      	cmp	r3, #64	; 0x40
 8001d94:	d10f      	bne.n	8001db6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	2240      	movs	r2, #64	; 0x40
 8001d9e:	4013      	ands	r3, r2
 8001da0:	2b40      	cmp	r3, #64	; 0x40
 8001da2:	d108      	bne.n	8001db6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2241      	movs	r2, #65	; 0x41
 8001daa:	4252      	negs	r2, r2
 8001dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	0018      	movs	r0, r3
 8001db2:	f000 f833 	bl	8001e1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	2220      	movs	r2, #32
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	2b20      	cmp	r3, #32
 8001dc2:	d10f      	bne.n	8001de4 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	4013      	ands	r3, r2
 8001dce:	2b20      	cmp	r3, #32
 8001dd0:	d108      	bne.n	8001de4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2221      	movs	r2, #33	; 0x21
 8001dd8:	4252      	negs	r2, r2
 8001dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	0018      	movs	r0, r3
 8001de0:	f000 f89a 	bl	8001f18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001de4:	46c0      	nop			; (mov r8, r8)
 8001de6:	46bd      	mov	sp, r7
 8001de8:	b002      	add	sp, #8
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001df4:	46c0      	nop			; (mov r8, r8)
 8001df6:	46bd      	mov	sp, r7
 8001df8:	b002      	add	sp, #8
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e04:	46c0      	nop			; (mov r8, r8)
 8001e06:	46bd      	mov	sp, r7
 8001e08:	b002      	add	sp, #8
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e14:	46c0      	nop			; (mov r8, r8)
 8001e16:	46bd      	mov	sp, r7
 8001e18:	b002      	add	sp, #8
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e24:	46c0      	nop			; (mov r8, r8)
 8001e26:	46bd      	mov	sp, r7
 8001e28:	b002      	add	sp, #8
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a2f      	ldr	r2, [pc, #188]	; (8001efc <TIM_Base_SetConfig+0xd0>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d003      	beq.n	8001e4c <TIM_Base_SetConfig+0x20>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a2e      	ldr	r2, [pc, #184]	; (8001f00 <TIM_Base_SetConfig+0xd4>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d108      	bne.n	8001e5e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2270      	movs	r2, #112	; 0x70
 8001e50:	4393      	bics	r3, r2
 8001e52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a26      	ldr	r2, [pc, #152]	; (8001efc <TIM_Base_SetConfig+0xd0>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d013      	beq.n	8001e8e <TIM_Base_SetConfig+0x62>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a25      	ldr	r2, [pc, #148]	; (8001f00 <TIM_Base_SetConfig+0xd4>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d00f      	beq.n	8001e8e <TIM_Base_SetConfig+0x62>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a24      	ldr	r2, [pc, #144]	; (8001f04 <TIM_Base_SetConfig+0xd8>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d00b      	beq.n	8001e8e <TIM_Base_SetConfig+0x62>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a23      	ldr	r2, [pc, #140]	; (8001f08 <TIM_Base_SetConfig+0xdc>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d007      	beq.n	8001e8e <TIM_Base_SetConfig+0x62>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a22      	ldr	r2, [pc, #136]	; (8001f0c <TIM_Base_SetConfig+0xe0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d003      	beq.n	8001e8e <TIM_Base_SetConfig+0x62>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a21      	ldr	r2, [pc, #132]	; (8001f10 <TIM_Base_SetConfig+0xe4>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d108      	bne.n	8001ea0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	4a20      	ldr	r2, [pc, #128]	; (8001f14 <TIM_Base_SetConfig+0xe8>)
 8001e92:	4013      	ands	r3, r2
 8001e94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2280      	movs	r2, #128	; 0x80
 8001ea4:	4393      	bics	r3, r2
 8001ea6:	001a      	movs	r2, r3
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a0c      	ldr	r2, [pc, #48]	; (8001efc <TIM_Base_SetConfig+0xd0>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d00b      	beq.n	8001ee6 <TIM_Base_SetConfig+0xba>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a0d      	ldr	r2, [pc, #52]	; (8001f08 <TIM_Base_SetConfig+0xdc>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d007      	beq.n	8001ee6 <TIM_Base_SetConfig+0xba>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a0c      	ldr	r2, [pc, #48]	; (8001f0c <TIM_Base_SetConfig+0xe0>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d003      	beq.n	8001ee6 <TIM_Base_SetConfig+0xba>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a0b      	ldr	r2, [pc, #44]	; (8001f10 <TIM_Base_SetConfig+0xe4>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d103      	bne.n	8001eee <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	691a      	ldr	r2, [r3, #16]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	615a      	str	r2, [r3, #20]
}
 8001ef4:	46c0      	nop			; (mov r8, r8)
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	b004      	add	sp, #16
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40012c00 	.word	0x40012c00
 8001f00:	40000400 	.word	0x40000400
 8001f04:	40002000 	.word	0x40002000
 8001f08:	40014000 	.word	0x40014000
 8001f0c:	40014400 	.word	0x40014400
 8001f10:	40014800 	.word	0x40014800
 8001f14:	fffffcff 	.word	0xfffffcff

08001f18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f20:	46c0      	nop			; (mov r8, r8)
 8001f22:	46bd      	mov	sp, r7
 8001f24:	b002      	add	sp, #8
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f30:	46c0      	nop			; (mov r8, r8)
 8001f32:	46bd      	mov	sp, r7
 8001f34:	b002      	add	sp, #8
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e044      	b.n	8001fd4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d107      	bne.n	8001f62 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2274      	movs	r2, #116	; 0x74
 8001f56:	2100      	movs	r1, #0
 8001f58:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	f001 fce7 	bl	8003930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2224      	movs	r2, #36	; 0x24
 8001f66:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2101      	movs	r1, #1
 8001f74:	438a      	bics	r2, r1
 8001f76:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	f000 f830 	bl	8001fe0 <UART_SetConfig>
 8001f80:	0003      	movs	r3, r0
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d101      	bne.n	8001f8a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e024      	b.n	8001fd4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	0018      	movs	r0, r3
 8001f96:	f000 f963 	bl	8002260 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	490d      	ldr	r1, [pc, #52]	; (8001fdc <HAL_UART_Init+0xa4>)
 8001fa6:	400a      	ands	r2, r1
 8001fa8:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2108      	movs	r1, #8
 8001fb6:	438a      	bics	r2, r1
 8001fb8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f000 f9fb 	bl	80023c8 <UART_CheckIdleState>
 8001fd2:	0003      	movs	r3, r0
}
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	b002      	add	sp, #8
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	fffff7ff 	.word	0xfffff7ff

08001fe0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b088      	sub	sp, #32
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001fe8:	231e      	movs	r3, #30
 8001fea:	18fb      	adds	r3, r7, r3
 8001fec:	2200      	movs	r2, #0
 8001fee:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	431a      	orrs	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	69db      	ldr	r3, [r3, #28]
 8002004:	4313      	orrs	r3, r2
 8002006:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a8d      	ldr	r2, [pc, #564]	; (8002244 <UART_SetConfig+0x264>)
 8002010:	4013      	ands	r3, r2
 8002012:	0019      	movs	r1, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	430a      	orrs	r2, r1
 800201c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	4a88      	ldr	r2, [pc, #544]	; (8002248 <UART_SetConfig+0x268>)
 8002026:	4013      	ands	r3, r2
 8002028:	0019      	movs	r1, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	4313      	orrs	r3, r2
 8002044:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	4a7f      	ldr	r2, [pc, #508]	; (800224c <UART_SetConfig+0x26c>)
 800204e:	4013      	ands	r3, r2
 8002050:	0019      	movs	r1, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	430a      	orrs	r2, r1
 800205a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a7b      	ldr	r2, [pc, #492]	; (8002250 <UART_SetConfig+0x270>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d127      	bne.n	80020b6 <UART_SetConfig+0xd6>
 8002066:	4b7b      	ldr	r3, [pc, #492]	; (8002254 <UART_SetConfig+0x274>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	2203      	movs	r2, #3
 800206c:	4013      	ands	r3, r2
 800206e:	2b03      	cmp	r3, #3
 8002070:	d00d      	beq.n	800208e <UART_SetConfig+0xae>
 8002072:	d81b      	bhi.n	80020ac <UART_SetConfig+0xcc>
 8002074:	2b02      	cmp	r3, #2
 8002076:	d014      	beq.n	80020a2 <UART_SetConfig+0xc2>
 8002078:	d818      	bhi.n	80020ac <UART_SetConfig+0xcc>
 800207a:	2b00      	cmp	r3, #0
 800207c:	d002      	beq.n	8002084 <UART_SetConfig+0xa4>
 800207e:	2b01      	cmp	r3, #1
 8002080:	d00a      	beq.n	8002098 <UART_SetConfig+0xb8>
 8002082:	e013      	b.n	80020ac <UART_SetConfig+0xcc>
 8002084:	231f      	movs	r3, #31
 8002086:	18fb      	adds	r3, r7, r3
 8002088:	2200      	movs	r2, #0
 800208a:	701a      	strb	r2, [r3, #0]
 800208c:	e021      	b.n	80020d2 <UART_SetConfig+0xf2>
 800208e:	231f      	movs	r3, #31
 8002090:	18fb      	adds	r3, r7, r3
 8002092:	2202      	movs	r2, #2
 8002094:	701a      	strb	r2, [r3, #0]
 8002096:	e01c      	b.n	80020d2 <UART_SetConfig+0xf2>
 8002098:	231f      	movs	r3, #31
 800209a:	18fb      	adds	r3, r7, r3
 800209c:	2204      	movs	r2, #4
 800209e:	701a      	strb	r2, [r3, #0]
 80020a0:	e017      	b.n	80020d2 <UART_SetConfig+0xf2>
 80020a2:	231f      	movs	r3, #31
 80020a4:	18fb      	adds	r3, r7, r3
 80020a6:	2208      	movs	r2, #8
 80020a8:	701a      	strb	r2, [r3, #0]
 80020aa:	e012      	b.n	80020d2 <UART_SetConfig+0xf2>
 80020ac:	231f      	movs	r3, #31
 80020ae:	18fb      	adds	r3, r7, r3
 80020b0:	2210      	movs	r2, #16
 80020b2:	701a      	strb	r2, [r3, #0]
 80020b4:	e00d      	b.n	80020d2 <UART_SetConfig+0xf2>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a67      	ldr	r2, [pc, #412]	; (8002258 <UART_SetConfig+0x278>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d104      	bne.n	80020ca <UART_SetConfig+0xea>
 80020c0:	231f      	movs	r3, #31
 80020c2:	18fb      	adds	r3, r7, r3
 80020c4:	2200      	movs	r2, #0
 80020c6:	701a      	strb	r2, [r3, #0]
 80020c8:	e003      	b.n	80020d2 <UART_SetConfig+0xf2>
 80020ca:	231f      	movs	r3, #31
 80020cc:	18fb      	adds	r3, r7, r3
 80020ce:	2210      	movs	r2, #16
 80020d0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69da      	ldr	r2, [r3, #28]
 80020d6:	2380      	movs	r3, #128	; 0x80
 80020d8:	021b      	lsls	r3, r3, #8
 80020da:	429a      	cmp	r2, r3
 80020dc:	d15d      	bne.n	800219a <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80020de:	231f      	movs	r3, #31
 80020e0:	18fb      	adds	r3, r7, r3
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d015      	beq.n	8002114 <UART_SetConfig+0x134>
 80020e8:	dc18      	bgt.n	800211c <UART_SetConfig+0x13c>
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d00d      	beq.n	800210a <UART_SetConfig+0x12a>
 80020ee:	dc15      	bgt.n	800211c <UART_SetConfig+0x13c>
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d002      	beq.n	80020fa <UART_SetConfig+0x11a>
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d005      	beq.n	8002104 <UART_SetConfig+0x124>
 80020f8:	e010      	b.n	800211c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80020fa:	f7ff fbe1 	bl	80018c0 <HAL_RCC_GetPCLK1Freq>
 80020fe:	0003      	movs	r3, r0
 8002100:	61bb      	str	r3, [r7, #24]
        break;
 8002102:	e012      	b.n	800212a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002104:	4b55      	ldr	r3, [pc, #340]	; (800225c <UART_SetConfig+0x27c>)
 8002106:	61bb      	str	r3, [r7, #24]
        break;
 8002108:	e00f      	b.n	800212a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800210a:	f7ff fb6b 	bl	80017e4 <HAL_RCC_GetSysClockFreq>
 800210e:	0003      	movs	r3, r0
 8002110:	61bb      	str	r3, [r7, #24]
        break;
 8002112:	e00a      	b.n	800212a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002114:	2380      	movs	r3, #128	; 0x80
 8002116:	021b      	lsls	r3, r3, #8
 8002118:	61bb      	str	r3, [r7, #24]
        break;
 800211a:	e006      	b.n	800212a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002120:	231e      	movs	r3, #30
 8002122:	18fb      	adds	r3, r7, r3
 8002124:	2201      	movs	r2, #1
 8002126:	701a      	strb	r2, [r3, #0]
        break;
 8002128:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d100      	bne.n	8002132 <UART_SetConfig+0x152>
 8002130:	e07b      	b.n	800222a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	005a      	lsls	r2, r3, #1
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	085b      	lsrs	r3, r3, #1
 800213c:	18d2      	adds	r2, r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	0019      	movs	r1, r3
 8002144:	0010      	movs	r0, r2
 8002146:	f7fd ffe9 	bl	800011c <__udivsi3>
 800214a:	0003      	movs	r3, r0
 800214c:	b29b      	uxth	r3, r3
 800214e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	2b0f      	cmp	r3, #15
 8002154:	d91c      	bls.n	8002190 <UART_SetConfig+0x1b0>
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	025b      	lsls	r3, r3, #9
 800215c:	429a      	cmp	r2, r3
 800215e:	d217      	bcs.n	8002190 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	b29a      	uxth	r2, r3
 8002164:	200e      	movs	r0, #14
 8002166:	183b      	adds	r3, r7, r0
 8002168:	210f      	movs	r1, #15
 800216a:	438a      	bics	r2, r1
 800216c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	085b      	lsrs	r3, r3, #1
 8002172:	b29b      	uxth	r3, r3
 8002174:	2207      	movs	r2, #7
 8002176:	4013      	ands	r3, r2
 8002178:	b299      	uxth	r1, r3
 800217a:	183b      	adds	r3, r7, r0
 800217c:	183a      	adds	r2, r7, r0
 800217e:	8812      	ldrh	r2, [r2, #0]
 8002180:	430a      	orrs	r2, r1
 8002182:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	183a      	adds	r2, r7, r0
 800218a:	8812      	ldrh	r2, [r2, #0]
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	e04c      	b.n	800222a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002190:	231e      	movs	r3, #30
 8002192:	18fb      	adds	r3, r7, r3
 8002194:	2201      	movs	r2, #1
 8002196:	701a      	strb	r2, [r3, #0]
 8002198:	e047      	b.n	800222a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800219a:	231f      	movs	r3, #31
 800219c:	18fb      	adds	r3, r7, r3
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	d015      	beq.n	80021d0 <UART_SetConfig+0x1f0>
 80021a4:	dc18      	bgt.n	80021d8 <UART_SetConfig+0x1f8>
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d00d      	beq.n	80021c6 <UART_SetConfig+0x1e6>
 80021aa:	dc15      	bgt.n	80021d8 <UART_SetConfig+0x1f8>
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d002      	beq.n	80021b6 <UART_SetConfig+0x1d6>
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d005      	beq.n	80021c0 <UART_SetConfig+0x1e0>
 80021b4:	e010      	b.n	80021d8 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80021b6:	f7ff fb83 	bl	80018c0 <HAL_RCC_GetPCLK1Freq>
 80021ba:	0003      	movs	r3, r0
 80021bc:	61bb      	str	r3, [r7, #24]
        break;
 80021be:	e012      	b.n	80021e6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80021c0:	4b26      	ldr	r3, [pc, #152]	; (800225c <UART_SetConfig+0x27c>)
 80021c2:	61bb      	str	r3, [r7, #24]
        break;
 80021c4:	e00f      	b.n	80021e6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80021c6:	f7ff fb0d 	bl	80017e4 <HAL_RCC_GetSysClockFreq>
 80021ca:	0003      	movs	r3, r0
 80021cc:	61bb      	str	r3, [r7, #24]
        break;
 80021ce:	e00a      	b.n	80021e6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80021d0:	2380      	movs	r3, #128	; 0x80
 80021d2:	021b      	lsls	r3, r3, #8
 80021d4:	61bb      	str	r3, [r7, #24]
        break;
 80021d6:	e006      	b.n	80021e6 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80021dc:	231e      	movs	r3, #30
 80021de:	18fb      	adds	r3, r7, r3
 80021e0:	2201      	movs	r2, #1
 80021e2:	701a      	strb	r2, [r3, #0]
        break;
 80021e4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d01e      	beq.n	800222a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	085a      	lsrs	r2, r3, #1
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	18d2      	adds	r2, r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	0019      	movs	r1, r3
 80021fc:	0010      	movs	r0, r2
 80021fe:	f7fd ff8d 	bl	800011c <__udivsi3>
 8002202:	0003      	movs	r3, r0
 8002204:	b29b      	uxth	r3, r3
 8002206:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	2b0f      	cmp	r3, #15
 800220c:	d909      	bls.n	8002222 <UART_SetConfig+0x242>
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	025b      	lsls	r3, r3, #9
 8002214:	429a      	cmp	r2, r3
 8002216:	d204      	bcs.n	8002222 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	60da      	str	r2, [r3, #12]
 8002220:	e003      	b.n	800222a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002222:	231e      	movs	r3, #30
 8002224:	18fb      	adds	r3, r7, r3
 8002226:	2201      	movs	r2, #1
 8002228:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002236:	231e      	movs	r3, #30
 8002238:	18fb      	adds	r3, r7, r3
 800223a:	781b      	ldrb	r3, [r3, #0]
}
 800223c:	0018      	movs	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	b008      	add	sp, #32
 8002242:	bd80      	pop	{r7, pc}
 8002244:	ffff69f3 	.word	0xffff69f3
 8002248:	ffffcfff 	.word	0xffffcfff
 800224c:	fffff4ff 	.word	0xfffff4ff
 8002250:	40013800 	.word	0x40013800
 8002254:	40021000 	.word	0x40021000
 8002258:	40004400 	.word	0x40004400
 800225c:	007a1200 	.word	0x007a1200

08002260 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	2201      	movs	r2, #1
 800226e:	4013      	ands	r3, r2
 8002270:	d00b      	beq.n	800228a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	4a4a      	ldr	r2, [pc, #296]	; (80023a4 <UART_AdvFeatureConfig+0x144>)
 800227a:	4013      	ands	r3, r2
 800227c:	0019      	movs	r1, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	430a      	orrs	r2, r1
 8002288:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228e:	2202      	movs	r2, #2
 8002290:	4013      	ands	r3, r2
 8002292:	d00b      	beq.n	80022ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	4a43      	ldr	r2, [pc, #268]	; (80023a8 <UART_AdvFeatureConfig+0x148>)
 800229c:	4013      	ands	r3, r2
 800229e:	0019      	movs	r1, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b0:	2204      	movs	r2, #4
 80022b2:	4013      	ands	r3, r2
 80022b4:	d00b      	beq.n	80022ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	4a3b      	ldr	r2, [pc, #236]	; (80023ac <UART_AdvFeatureConfig+0x14c>)
 80022be:	4013      	ands	r3, r2
 80022c0:	0019      	movs	r1, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	430a      	orrs	r2, r1
 80022cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d2:	2208      	movs	r2, #8
 80022d4:	4013      	ands	r3, r2
 80022d6:	d00b      	beq.n	80022f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	4a34      	ldr	r2, [pc, #208]	; (80023b0 <UART_AdvFeatureConfig+0x150>)
 80022e0:	4013      	ands	r3, r2
 80022e2:	0019      	movs	r1, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	2210      	movs	r2, #16
 80022f6:	4013      	ands	r3, r2
 80022f8:	d00b      	beq.n	8002312 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	4a2c      	ldr	r2, [pc, #176]	; (80023b4 <UART_AdvFeatureConfig+0x154>)
 8002302:	4013      	ands	r3, r2
 8002304:	0019      	movs	r1, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	430a      	orrs	r2, r1
 8002310:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	2220      	movs	r2, #32
 8002318:	4013      	ands	r3, r2
 800231a:	d00b      	beq.n	8002334 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	4a25      	ldr	r2, [pc, #148]	; (80023b8 <UART_AdvFeatureConfig+0x158>)
 8002324:	4013      	ands	r3, r2
 8002326:	0019      	movs	r1, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	2240      	movs	r2, #64	; 0x40
 800233a:	4013      	ands	r3, r2
 800233c:	d01d      	beq.n	800237a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	4a1d      	ldr	r2, [pc, #116]	; (80023bc <UART_AdvFeatureConfig+0x15c>)
 8002346:	4013      	ands	r3, r2
 8002348:	0019      	movs	r1, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800235a:	2380      	movs	r3, #128	; 0x80
 800235c:	035b      	lsls	r3, r3, #13
 800235e:	429a      	cmp	r2, r3
 8002360:	d10b      	bne.n	800237a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	4a15      	ldr	r2, [pc, #84]	; (80023c0 <UART_AdvFeatureConfig+0x160>)
 800236a:	4013      	ands	r3, r2
 800236c:	0019      	movs	r1, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	2280      	movs	r2, #128	; 0x80
 8002380:	4013      	ands	r3, r2
 8002382:	d00b      	beq.n	800239c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	4a0e      	ldr	r2, [pc, #56]	; (80023c4 <UART_AdvFeatureConfig+0x164>)
 800238c:	4013      	ands	r3, r2
 800238e:	0019      	movs	r1, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	605a      	str	r2, [r3, #4]
  }
}
 800239c:	46c0      	nop			; (mov r8, r8)
 800239e:	46bd      	mov	sp, r7
 80023a0:	b002      	add	sp, #8
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	fffdffff 	.word	0xfffdffff
 80023a8:	fffeffff 	.word	0xfffeffff
 80023ac:	fffbffff 	.word	0xfffbffff
 80023b0:	ffff7fff 	.word	0xffff7fff
 80023b4:	ffffefff 	.word	0xffffefff
 80023b8:	ffffdfff 	.word	0xffffdfff
 80023bc:	ffefffff 	.word	0xffefffff
 80023c0:	ff9fffff 	.word	0xff9fffff
 80023c4:	fff7ffff 	.word	0xfff7ffff

080023c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af02      	add	r7, sp, #8
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2280      	movs	r2, #128	; 0x80
 80023d4:	2100      	movs	r1, #0
 80023d6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80023d8:	f7fd ffb4 	bl	8000344 <HAL_GetTick>
 80023dc:	0003      	movs	r3, r0
 80023de:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2208      	movs	r2, #8
 80023e8:	4013      	ands	r3, r2
 80023ea:	2b08      	cmp	r3, #8
 80023ec:	d10c      	bne.n	8002408 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2280      	movs	r2, #128	; 0x80
 80023f2:	0391      	lsls	r1, r2, #14
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	4a17      	ldr	r2, [pc, #92]	; (8002454 <UART_CheckIdleState+0x8c>)
 80023f8:	9200      	str	r2, [sp, #0]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f000 f82c 	bl	8002458 <UART_WaitOnFlagUntilTimeout>
 8002400:	1e03      	subs	r3, r0, #0
 8002402:	d001      	beq.n	8002408 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e021      	b.n	800244c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2204      	movs	r2, #4
 8002410:	4013      	ands	r3, r2
 8002412:	2b04      	cmp	r3, #4
 8002414:	d10c      	bne.n	8002430 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2280      	movs	r2, #128	; 0x80
 800241a:	03d1      	lsls	r1, r2, #15
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	4a0d      	ldr	r2, [pc, #52]	; (8002454 <UART_CheckIdleState+0x8c>)
 8002420:	9200      	str	r2, [sp, #0]
 8002422:	2200      	movs	r2, #0
 8002424:	f000 f818 	bl	8002458 <UART_WaitOnFlagUntilTimeout>
 8002428:	1e03      	subs	r3, r0, #0
 800242a:	d001      	beq.n	8002430 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e00d      	b.n	800244c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2220      	movs	r2, #32
 8002434:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2220      	movs	r2, #32
 800243a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2274      	movs	r2, #116	; 0x74
 8002446:	2100      	movs	r1, #0
 8002448:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	0018      	movs	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	b004      	add	sp, #16
 8002452:	bd80      	pop	{r7, pc}
 8002454:	01ffffff 	.word	0x01ffffff

08002458 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b094      	sub	sp, #80	; 0x50
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	603b      	str	r3, [r7, #0]
 8002464:	1dfb      	adds	r3, r7, #7
 8002466:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002468:	e0a3      	b.n	80025b2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800246a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800246c:	3301      	adds	r3, #1
 800246e:	d100      	bne.n	8002472 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002470:	e09f      	b.n	80025b2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002472:	f7fd ff67 	bl	8000344 <HAL_GetTick>
 8002476:	0002      	movs	r2, r0
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800247e:	429a      	cmp	r2, r3
 8002480:	d302      	bcc.n	8002488 <UART_WaitOnFlagUntilTimeout+0x30>
 8002482:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002484:	2b00      	cmp	r3, #0
 8002486:	d13d      	bne.n	8002504 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002488:	f3ef 8310 	mrs	r3, PRIMASK
 800248c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800248e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002490:	647b      	str	r3, [r7, #68]	; 0x44
 8002492:	2301      	movs	r3, #1
 8002494:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002498:	f383 8810 	msr	PRIMASK, r3
}
 800249c:	46c0      	nop			; (mov r8, r8)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	494c      	ldr	r1, [pc, #304]	; (80025dc <UART_WaitOnFlagUntilTimeout+0x184>)
 80024aa:	400a      	ands	r2, r1
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024b0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b4:	f383 8810 	msr	PRIMASK, r3
}
 80024b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024ba:	f3ef 8310 	mrs	r3, PRIMASK
 80024be:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80024c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024c2:	643b      	str	r3, [r7, #64]	; 0x40
 80024c4:	2301      	movs	r3, #1
 80024c6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ca:	f383 8810 	msr	PRIMASK, r3
}
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2101      	movs	r1, #1
 80024dc:	438a      	bics	r2, r1
 80024de:	609a      	str	r2, [r3, #8]
 80024e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024e6:	f383 8810 	msr	PRIMASK, r3
}
 80024ea:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2220      	movs	r2, #32
 80024f0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2220      	movs	r2, #32
 80024f6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2274      	movs	r2, #116	; 0x74
 80024fc:	2100      	movs	r1, #0
 80024fe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e067      	b.n	80025d4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2204      	movs	r2, #4
 800250c:	4013      	ands	r3, r2
 800250e:	d050      	beq.n	80025b2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	69da      	ldr	r2, [r3, #28]
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	011b      	lsls	r3, r3, #4
 800251a:	401a      	ands	r2, r3
 800251c:	2380      	movs	r3, #128	; 0x80
 800251e:	011b      	lsls	r3, r3, #4
 8002520:	429a      	cmp	r2, r3
 8002522:	d146      	bne.n	80025b2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2280      	movs	r2, #128	; 0x80
 800252a:	0112      	lsls	r2, r2, #4
 800252c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800252e:	f3ef 8310 	mrs	r3, PRIMASK
 8002532:	613b      	str	r3, [r7, #16]
  return(result);
 8002534:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002536:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002538:	2301      	movs	r3, #1
 800253a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f383 8810 	msr	PRIMASK, r3
}
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4923      	ldr	r1, [pc, #140]	; (80025dc <UART_WaitOnFlagUntilTimeout+0x184>)
 8002550:	400a      	ands	r2, r1
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002556:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	f383 8810 	msr	PRIMASK, r3
}
 800255e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002560:	f3ef 8310 	mrs	r3, PRIMASK
 8002564:	61fb      	str	r3, [r7, #28]
  return(result);
 8002566:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002568:	64bb      	str	r3, [r7, #72]	; 0x48
 800256a:	2301      	movs	r3, #1
 800256c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800256e:	6a3b      	ldr	r3, [r7, #32]
 8002570:	f383 8810 	msr	PRIMASK, r3
}
 8002574:	46c0      	nop			; (mov r8, r8)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2101      	movs	r1, #1
 8002582:	438a      	bics	r2, r1
 8002584:	609a      	str	r2, [r3, #8]
 8002586:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002588:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	f383 8810 	msr	PRIMASK, r3
}
 8002590:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2220      	movs	r2, #32
 8002596:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2220      	movs	r2, #32
 800259c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2280      	movs	r2, #128	; 0x80
 80025a2:	2120      	movs	r1, #32
 80025a4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2274      	movs	r2, #116	; 0x74
 80025aa:	2100      	movs	r1, #0
 80025ac:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e010      	b.n	80025d4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	4013      	ands	r3, r2
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	425a      	negs	r2, r3
 80025c2:	4153      	adcs	r3, r2
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	001a      	movs	r2, r3
 80025c8:	1dfb      	adds	r3, r7, #7
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d100      	bne.n	80025d2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80025d0:	e74b      	b.n	800246a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	0018      	movs	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	b014      	add	sp, #80	; 0x50
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	fffffe5f 	.word	0xfffffe5f

080025e0 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80025e6:	1d3b      	adds	r3, r7, #4
 80025e8:	0018      	movs	r0, r3
 80025ea:	230c      	movs	r3, #12
 80025ec:	001a      	movs	r2, r3
 80025ee:	2100      	movs	r1, #0
 80025f0:	f001 fa40 	bl	8003a74 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80025f4:	4b26      	ldr	r3, [pc, #152]	; (8002690 <MX_ADC_Init+0xb0>)
 80025f6:	4a27      	ldr	r2, [pc, #156]	; (8002694 <MX_ADC_Init+0xb4>)
 80025f8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80025fa:	4b25      	ldr	r3, [pc, #148]	; (8002690 <MX_ADC_Init+0xb0>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002600:	4b23      	ldr	r3, [pc, #140]	; (8002690 <MX_ADC_Init+0xb0>)
 8002602:	2200      	movs	r2, #0
 8002604:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002606:	4b22      	ldr	r3, [pc, #136]	; (8002690 <MX_ADC_Init+0xb0>)
 8002608:	2200      	movs	r2, #0
 800260a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800260c:	4b20      	ldr	r3, [pc, #128]	; (8002690 <MX_ADC_Init+0xb0>)
 800260e:	2201      	movs	r2, #1
 8002610:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002612:	4b1f      	ldr	r3, [pc, #124]	; (8002690 <MX_ADC_Init+0xb0>)
 8002614:	2204      	movs	r2, #4
 8002616:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002618:	4b1d      	ldr	r3, [pc, #116]	; (8002690 <MX_ADC_Init+0xb0>)
 800261a:	2200      	movs	r2, #0
 800261c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800261e:	4b1c      	ldr	r3, [pc, #112]	; (8002690 <MX_ADC_Init+0xb0>)
 8002620:	2200      	movs	r2, #0
 8002622:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8002624:	4b1a      	ldr	r3, [pc, #104]	; (8002690 <MX_ADC_Init+0xb0>)
 8002626:	2201      	movs	r2, #1
 8002628:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800262a:	4b19      	ldr	r3, [pc, #100]	; (8002690 <MX_ADC_Init+0xb0>)
 800262c:	2200      	movs	r2, #0
 800262e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002630:	4b17      	ldr	r3, [pc, #92]	; (8002690 <MX_ADC_Init+0xb0>)
 8002632:	22c2      	movs	r2, #194	; 0xc2
 8002634:	32ff      	adds	r2, #255	; 0xff
 8002636:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002638:	4b15      	ldr	r3, [pc, #84]	; (8002690 <MX_ADC_Init+0xb0>)
 800263a:	2200      	movs	r2, #0
 800263c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800263e:	4b14      	ldr	r3, [pc, #80]	; (8002690 <MX_ADC_Init+0xb0>)
 8002640:	2224      	movs	r2, #36	; 0x24
 8002642:	2100      	movs	r1, #0
 8002644:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002646:	4b12      	ldr	r3, [pc, #72]	; (8002690 <MX_ADC_Init+0xb0>)
 8002648:	2201      	movs	r2, #1
 800264a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800264c:	4b10      	ldr	r3, [pc, #64]	; (8002690 <MX_ADC_Init+0xb0>)
 800264e:	0018      	movs	r0, r3
 8002650:	f7fd fea6 	bl	80003a0 <HAL_ADC_Init>
 8002654:	1e03      	subs	r3, r0, #0
 8002656:	d001      	beq.n	800265c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002658:	f000 ff05 	bl	8003466 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800265c:	1d3b      	adds	r3, r7, #4
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002662:	1d3b      	adds	r3, r7, #4
 8002664:	2280      	movs	r2, #128	; 0x80
 8002666:	0152      	lsls	r2, r2, #5
 8002668:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800266a:	1d3b      	adds	r3, r7, #4
 800266c:	2280      	movs	r2, #128	; 0x80
 800266e:	0552      	lsls	r2, r2, #21
 8002670:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002672:	1d3a      	adds	r2, r7, #4
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <MX_ADC_Init+0xb0>)
 8002676:	0011      	movs	r1, r2
 8002678:	0018      	movs	r0, r3
 800267a:	f7fe f8c9 	bl	8000810 <HAL_ADC_ConfigChannel>
 800267e:	1e03      	subs	r3, r0, #0
 8002680:	d001      	beq.n	8002686 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8002682:	f000 fef0 	bl	8003466 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	46bd      	mov	sp, r7
 800268a:	b004      	add	sp, #16
 800268c:	bd80      	pop	{r7, pc}
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	20000094 	.word	0x20000094
 8002694:	40012400 	.word	0x40012400

08002698 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002698:	b590      	push	{r4, r7, lr}
 800269a:	b08b      	sub	sp, #44	; 0x2c
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a0:	2414      	movs	r4, #20
 80026a2:	193b      	adds	r3, r7, r4
 80026a4:	0018      	movs	r0, r3
 80026a6:	2314      	movs	r3, #20
 80026a8:	001a      	movs	r2, r3
 80026aa:	2100      	movs	r1, #0
 80026ac:	f001 f9e2 	bl	8003a74 <memset>
  if(adcHandle->Instance==ADC1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a19      	ldr	r2, [pc, #100]	; (800271c <HAL_ADC_MspInit+0x84>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d12b      	bne.n	8002712 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026ba:	4b19      	ldr	r3, [pc, #100]	; (8002720 <HAL_ADC_MspInit+0x88>)
 80026bc:	699a      	ldr	r2, [r3, #24]
 80026be:	4b18      	ldr	r3, [pc, #96]	; (8002720 <HAL_ADC_MspInit+0x88>)
 80026c0:	2180      	movs	r1, #128	; 0x80
 80026c2:	0089      	lsls	r1, r1, #2
 80026c4:	430a      	orrs	r2, r1
 80026c6:	619a      	str	r2, [r3, #24]
 80026c8:	4b15      	ldr	r3, [pc, #84]	; (8002720 <HAL_ADC_MspInit+0x88>)
 80026ca:	699a      	ldr	r2, [r3, #24]
 80026cc:	2380      	movs	r3, #128	; 0x80
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4013      	ands	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
 80026d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d6:	4b12      	ldr	r3, [pc, #72]	; (8002720 <HAL_ADC_MspInit+0x88>)
 80026d8:	695a      	ldr	r2, [r3, #20]
 80026da:	4b11      	ldr	r3, [pc, #68]	; (8002720 <HAL_ADC_MspInit+0x88>)
 80026dc:	2180      	movs	r1, #128	; 0x80
 80026de:	0289      	lsls	r1, r1, #10
 80026e0:	430a      	orrs	r2, r1
 80026e2:	615a      	str	r2, [r3, #20]
 80026e4:	4b0e      	ldr	r3, [pc, #56]	; (8002720 <HAL_ADC_MspInit+0x88>)
 80026e6:	695a      	ldr	r2, [r3, #20]
 80026e8:	2380      	movs	r3, #128	; 0x80
 80026ea:	029b      	lsls	r3, r3, #10
 80026ec:	4013      	ands	r3, r2
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026f2:	193b      	adds	r3, r7, r4
 80026f4:	2201      	movs	r2, #1
 80026f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026f8:	193b      	adds	r3, r7, r4
 80026fa:	2203      	movs	r2, #3
 80026fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fe:	193b      	adds	r3, r7, r4
 8002700:	2200      	movs	r2, #0
 8002702:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002704:	193a      	adds	r2, r7, r4
 8002706:	2390      	movs	r3, #144	; 0x90
 8002708:	05db      	lsls	r3, r3, #23
 800270a:	0011      	movs	r1, r2
 800270c:	0018      	movs	r0, r3
 800270e:	f7fe fad7 	bl	8000cc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	46bd      	mov	sp, r7
 8002716:	b00b      	add	sp, #44	; 0x2c
 8002718:	bd90      	pop	{r4, r7, pc}
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	40012400 	.word	0x40012400
 8002720:	40021000 	.word	0x40021000

08002724 <game_startNewGame>:
//
//	FUNCTIONS
//
//*************************************************************
void game_startNewGame()
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
	update_delay = DEFAULT_UPDATE_DELAY;
 800272a:	4b2b      	ldr	r3, [pc, #172]	; (80027d8 <game_startNewGame+0xb4>)
 800272c:	22fa      	movs	r2, #250	; 0xfa
 800272e:	0052      	lsls	r2, r2, #1
 8002730:	801a      	strh	r2, [r3, #0]
	screen_clear();
 8002732:	f000 fef9 	bl	8003528 <screen_clear>

	uint8_t startRow = rand()%8;
 8002736:	f001 f9d5 	bl	8003ae4 <rand>
 800273a:	0003      	movs	r3, r0
 800273c:	4a27      	ldr	r2, [pc, #156]	; (80027dc <game_startNewGame+0xb8>)
 800273e:	4013      	ands	r3, r2
 8002740:	d504      	bpl.n	800274c <game_startNewGame+0x28>
 8002742:	3b01      	subs	r3, #1
 8002744:	2208      	movs	r2, #8
 8002746:	4252      	negs	r2, r2
 8002748:	4313      	orrs	r3, r2
 800274a:	3301      	adds	r3, #1
 800274c:	001a      	movs	r2, r3
 800274e:	1dfb      	adds	r3, r7, #7
 8002750:	701a      	strb	r2, [r3, #0]
	uint8_t startCol = rand()%4; //render the snake only on the left side of the screen (food will on the right)
 8002752:	f001 f9c7 	bl	8003ae4 <rand>
 8002756:	0003      	movs	r3, r0
 8002758:	4a21      	ldr	r2, [pc, #132]	; (80027e0 <game_startNewGame+0xbc>)
 800275a:	4013      	ands	r3, r2
 800275c:	d504      	bpl.n	8002768 <game_startNewGame+0x44>
 800275e:	3b01      	subs	r3, #1
 8002760:	2204      	movs	r2, #4
 8002762:	4252      	negs	r2, r2
 8002764:	4313      	orrs	r3, r2
 8002766:	3301      	adds	r3, #1
 8002768:	001a      	movs	r2, r3
 800276a:	1dbb      	adds	r3, r7, #6
 800276c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 800276e:	2064      	movs	r0, #100	; 0x64
 8002770:	f7fd fdf2 	bl	8000358 <HAL_Delay>
	screen_set_bit(startRow, startCol, 102);
 8002774:	1dbb      	adds	r3, r7, #6
 8002776:	7819      	ldrb	r1, [r3, #0]
 8002778:	1dfb      	adds	r3, r7, #7
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2266      	movs	r2, #102	; 0x66
 800277e:	0018      	movs	r0, r3
 8002780:	f000 fe8e 	bl	80034a0 <screen_set_bit>
	HAL_Delay(100);
 8002784:	2064      	movs	r0, #100	; 0x64
 8002786:	f7fd fde7 	bl	8000358 <HAL_Delay>
	screen_set_bit(startRow, startCol+1, 101);
 800278a:	1dbb      	adds	r3, r7, #6
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	3301      	adds	r3, #1
 8002790:	b2d9      	uxtb	r1, r3
 8002792:	1dfb      	adds	r3, r7, #7
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2265      	movs	r2, #101	; 0x65
 8002798:	0018      	movs	r0, r3
 800279a:	f000 fe81 	bl	80034a0 <screen_set_bit>
	HAL_Delay(100);
 800279e:	2064      	movs	r0, #100	; 0x64
 80027a0:	f7fd fdda 	bl	8000358 <HAL_Delay>
	screen_set_bit(startRow, startCol+2, 100);
 80027a4:	1dbb      	adds	r3, r7, #6
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	3302      	adds	r3, #2
 80027aa:	b2d9      	uxtb	r1, r3
 80027ac:	1dfb      	adds	r3, r7, #7
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2264      	movs	r2, #100	; 0x64
 80027b2:	0018      	movs	r0, r3
 80027b4:	f000 fe74 	bl	80034a0 <screen_set_bit>
	HAL_Delay(100);
 80027b8:	2064      	movs	r0, #100	; 0x64
 80027ba:	f7fd fdcd 	bl	8000358 <HAL_Delay>

	snake_lenght = 3;
 80027be:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <game_startNewGame+0xc0>)
 80027c0:	2203      	movs	r2, #3
 80027c2:	701a      	strb	r2, [r3, #0]
	curr_snake_direction = GOING_RIGHT;
 80027c4:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <game_startNewGame+0xc4>)
 80027c6:	2202      	movs	r2, #2
 80027c8:	701a      	strb	r2, [r3, #0]

	generate_food();
 80027ca:	f000 f80f 	bl	80027ec <generate_food>
}
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	46bd      	mov	sp, r7
 80027d2:	b002      	add	sp, #8
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	20000008 	.word	0x20000008
 80027dc:	80000007 	.word	0x80000007
 80027e0:	80000003 	.word	0x80000003
 80027e4:	20000007 	.word	0x20000007
 80027e8:	20000005 	.word	0x20000005

080027ec <generate_food>:

void generate_food()
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
	uint8_t empty_slot_found = 0;
 80027f2:	1dfb      	adds	r3, r7, #7
 80027f4:	2200      	movs	r2, #0
 80027f6:	701a      	strb	r2, [r3, #0]
	while(empty_slot_found == 0)
 80027f8:	e030      	b.n	800285c <generate_food+0x70>
	{
		food_row = rand()%8;
 80027fa:	f001 f973 	bl	8003ae4 <rand>
 80027fe:	0003      	movs	r3, r0
 8002800:	4a1e      	ldr	r2, [pc, #120]	; (800287c <generate_food+0x90>)
 8002802:	4013      	ands	r3, r2
 8002804:	d504      	bpl.n	8002810 <generate_food+0x24>
 8002806:	3b01      	subs	r3, #1
 8002808:	2208      	movs	r2, #8
 800280a:	4252      	negs	r2, r2
 800280c:	4313      	orrs	r3, r2
 800280e:	3301      	adds	r3, #1
 8002810:	b2da      	uxtb	r2, r3
 8002812:	4b1b      	ldr	r3, [pc, #108]	; (8002880 <generate_food+0x94>)
 8002814:	701a      	strb	r2, [r3, #0]
		food_column = rand()%4 + 3; //render initial food only on the right side of the screen (snake is on the left)
 8002816:	f001 f965 	bl	8003ae4 <rand>
 800281a:	0003      	movs	r3, r0
 800281c:	4a19      	ldr	r2, [pc, #100]	; (8002884 <generate_food+0x98>)
 800281e:	4013      	ands	r3, r2
 8002820:	d504      	bpl.n	800282c <generate_food+0x40>
 8002822:	3b01      	subs	r3, #1
 8002824:	2204      	movs	r2, #4
 8002826:	4252      	negs	r2, r2
 8002828:	4313      	orrs	r3, r2
 800282a:	3301      	adds	r3, #1
 800282c:	b2db      	uxtb	r3, r3
 800282e:	3303      	adds	r3, #3
 8002830:	b2da      	uxtb	r2, r3
 8002832:	4b15      	ldr	r3, [pc, #84]	; (8002888 <generate_food+0x9c>)
 8002834:	701a      	strb	r2, [r3, #0]
		if(screen_get_bit(food_row, food_column) == 0)
 8002836:	4b12      	ldr	r3, [pc, #72]	; (8002880 <generate_food+0x94>)
 8002838:	781a      	ldrb	r2, [r3, #0]
 800283a:	4b13      	ldr	r3, [pc, #76]	; (8002888 <generate_food+0x9c>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	0019      	movs	r1, r3
 8002840:	0010      	movs	r0, r2
 8002842:	f000 fe15 	bl	8003470 <screen_get_bit>
 8002846:	0003      	movs	r3, r0
 8002848:	0019      	movs	r1, r3
 800284a:	1dfb      	adds	r3, r7, #7
 800284c:	1dfa      	adds	r2, r7, #7
 800284e:	7812      	ldrb	r2, [r2, #0]
 8002850:	701a      	strb	r2, [r3, #0]
 8002852:	2900      	cmp	r1, #0
 8002854:	d102      	bne.n	800285c <generate_food+0x70>
		{
			empty_slot_found = 1;
 8002856:	1dfb      	adds	r3, r7, #7
 8002858:	2201      	movs	r2, #1
 800285a:	701a      	strb	r2, [r3, #0]
	while(empty_slot_found == 0)
 800285c:	1dfb      	adds	r3, r7, #7
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0ca      	beq.n	80027fa <generate_food+0xe>
		}
	}
	screen_set_bit(food_row, food_column, FOOD_ID);
 8002864:	4b06      	ldr	r3, [pc, #24]	; (8002880 <generate_food+0x94>)
 8002866:	7818      	ldrb	r0, [r3, #0]
 8002868:	4b07      	ldr	r3, [pc, #28]	; (8002888 <generate_food+0x9c>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	22c8      	movs	r2, #200	; 0xc8
 800286e:	0019      	movs	r1, r3
 8002870:	f000 fe16 	bl	80034a0 <screen_set_bit>
}
 8002874:	46c0      	nop			; (mov r8, r8)
 8002876:	46bd      	mov	sp, r7
 8002878:	b002      	add	sp, #8
 800287a:	bd80      	pop	{r7, pc}
 800287c:	80000007 	.word	0x80000007
 8002880:	200000d4 	.word	0x200000d4
 8002884:	80000003 	.word	0x80000003
 8002888:	200000d5 	.word	0x200000d5

0800288c <snake_runGame>:

void snake_runGame()
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
	static uint32_t ts_gameScheduler = 0;
	static uint32_t ts_blinkScheduler = 0;
	static uint8_t food_blink_state = 0;

	if(HAL_GetTick() - ts_gameScheduler > update_delay)
 8002892:	f7fd fd57 	bl	8000344 <HAL_GetTick>
 8002896:	0002      	movs	r2, r0
 8002898:	4b60      	ldr	r3, [pc, #384]	; (8002a1c <snake_runGame+0x190>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	4a60      	ldr	r2, [pc, #384]	; (8002a20 <snake_runGame+0x194>)
 80028a0:	8812      	ldrh	r2, [r2, #0]
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d800      	bhi.n	80028a8 <snake_runGame+0x1c>
 80028a6:	e08b      	b.n	80029c0 <snake_runGame+0x134>
	{
		ts_gameScheduler = HAL_GetTick();
 80028a8:	f7fd fd4c 	bl	8000344 <HAL_GetTick>
 80028ac:	0002      	movs	r2, r0
 80028ae:	4b5b      	ldr	r3, [pc, #364]	; (8002a1c <snake_runGame+0x190>)
 80028b0:	601a      	str	r2, [r3, #0]

		//force the food to appear if it is blinking
		screen_set_bit(food_row, food_column, FOOD_ID);
 80028b2:	4b5c      	ldr	r3, [pc, #368]	; (8002a24 <snake_runGame+0x198>)
 80028b4:	7818      	ldrb	r0, [r3, #0]
 80028b6:	4b5c      	ldr	r3, [pc, #368]	; (8002a28 <snake_runGame+0x19c>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	22c8      	movs	r2, #200	; 0xc8
 80028bc:	0019      	movs	r1, r3
 80028be:	f000 fdef 	bl	80034a0 <screen_set_bit>

		//FIND SNAKE HEAD
		uint8_t snakeHead_found = 0;
 80028c2:	230f      	movs	r3, #15
 80028c4:	18fb      	adds	r3, r7, r3
 80028c6:	2200      	movs	r2, #0
 80028c8:	701a      	strb	r2, [r3, #0]

		for(int row=0; row<8; row++)
 80028ca:	2300      	movs	r3, #0
 80028cc:	60bb      	str	r3, [r7, #8]
 80028ce:	e073      	b.n	80029b8 <snake_runGame+0x12c>
		{
			for(int col=0; col<8; col++)
 80028d0:	2300      	movs	r3, #0
 80028d2:	607b      	str	r3, [r7, #4]
 80028d4:	e063      	b.n	800299e <snake_runGame+0x112>
			{
				if(screen_get_bit(row, col) == 100)
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	0011      	movs	r1, r2
 80028e0:	0018      	movs	r0, r3
 80028e2:	f000 fdc5 	bl	8003470 <screen_get_bit>
 80028e6:	0003      	movs	r3, r0
 80028e8:	2b64      	cmp	r3, #100	; 0x64
 80028ea:	d150      	bne.n	800298e <snake_runGame+0x102>
				{
					snakeHead_found = 1;
 80028ec:	230f      	movs	r3, #15
 80028ee:	18fb      	adds	r3, r7, r3
 80028f0:	2201      	movs	r2, #1
 80028f2:	701a      	strb	r2, [r3, #0]

					//process new direction change
					curr_snake_direction = validate_direction_change(process_new_direction_request(), row, col); //if this is a valid direction change (ei: user is not trying to go backward) then update snake-direction
 80028f4:	f000 fc2c 	bl	8003150 <process_new_direction_request>
 80028f8:	0003      	movs	r3, r0
 80028fa:	0018      	movs	r0, r3
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	0019      	movs	r1, r3
 8002906:	f000 f899 	bl	8002a3c <validate_direction_change>
 800290a:	0003      	movs	r3, r0
 800290c:	001a      	movs	r2, r3
 800290e:	4b47      	ldr	r3, [pc, #284]	; (8002a2c <snake_runGame+0x1a0>)
 8002910:	701a      	strb	r2, [r3, #0]

					//check if the next update leads to a collision
					if( collision_detection(row, col) == SNAKE_DEAD )
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	b2db      	uxtb	r3, r3
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	0011      	movs	r1, r2
 800291c:	0018      	movs	r0, r3
 800291e:	f000 fa4b 	bl	8002db8 <collision_detection>
 8002922:	0003      	movs	r3, r0
 8002924:	2b01      	cmp	r3, #1
 8002926:	d102      	bne.n	800292e <snake_runGame+0xa2>
					{
						game_over_animation();
 8002928:	f000 fb22 	bl	8002f70 <game_over_animation>
 800292c:	e02f      	b.n	800298e <snake_runGame+0x102>
					}
					else
					{
						//has the snake found food?
						if( food_detection(row, col) == SNAKE_EATING )
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	b2db      	uxtb	r3, r3
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	0011      	movs	r1, r2
 8002938:	0018      	movs	r0, r3
 800293a:	f000 f973 	bl	8002c24 <food_detection>
 800293e:	0003      	movs	r3, r0
 8002940:	2b02      	cmp	r3, #2
 8002942:	d118      	bne.n	8002976 <snake_runGame+0xea>
						{
							snake_lenght++;		//increase the length of the snake
 8002944:	4b3a      	ldr	r3, [pc, #232]	; (8002a30 <snake_runGame+0x1a4>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	3301      	adds	r3, #1
 800294a:	b2da      	uxtb	r2, r3
 800294c:	4b38      	ldr	r3, [pc, #224]	; (8002a30 <snake_runGame+0x1a4>)
 800294e:	701a      	strb	r2, [r3, #0]
							generate_food(); //pick a new location for food
 8002950:	f7ff ff4c 	bl	80027ec <generate_food>
							//increase speed every 2 points
							if( snake_lenght%2 == 0 && update_delay > 100)
 8002954:	4b36      	ldr	r3, [pc, #216]	; (8002a30 <snake_runGame+0x1a4>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2201      	movs	r2, #1
 800295a:	4013      	ands	r3, r2
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d109      	bne.n	8002976 <snake_runGame+0xea>
 8002962:	4b2f      	ldr	r3, [pc, #188]	; (8002a20 <snake_runGame+0x194>)
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	2b64      	cmp	r3, #100	; 0x64
 8002968:	d905      	bls.n	8002976 <snake_runGame+0xea>
							{
								update_delay = update_delay - 25;
 800296a:	4b2d      	ldr	r3, [pc, #180]	; (8002a20 <snake_runGame+0x194>)
 800296c:	881b      	ldrh	r3, [r3, #0]
 800296e:	3b19      	subs	r3, #25
 8002970:	b29a      	uxth	r2, r3
 8002972:	4b2b      	ldr	r3, [pc, #172]	; (8002a20 <snake_runGame+0x194>)
 8002974:	801a      	strh	r2, [r3, #0]
							}
						}

						//increment the IDs for all the snake body parts
						increment_snake_body();
 8002976:	f000 fb6b 	bl	8003050 <increment_snake_body>

						//add the head into the next position based on the direction
						update_snake_head(row, col);
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	b2db      	uxtb	r3, r3
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	0011      	movs	r1, r2
 8002984:	0018      	movs	r0, r3
 8002986:	f000 f8d5 	bl	8002b34 <update_snake_head>

						//remove the tail
						remove_snake_tail();
 800298a:	f000 fb9d 	bl	80030c8 <remove_snake_tail>
					}
				}
				if(snakeHead_found == 1)
 800298e:	230f      	movs	r3, #15
 8002990:	18fb      	adds	r3, r7, r3
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d006      	beq.n	80029a6 <snake_runGame+0x11a>
			for(int col=0; col<8; col++)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3301      	adds	r3, #1
 800299c:	607b      	str	r3, [r7, #4]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b07      	cmp	r3, #7
 80029a2:	dd98      	ble.n	80028d6 <snake_runGame+0x4a>
 80029a4:	e000      	b.n	80029a8 <snake_runGame+0x11c>
					break;
 80029a6:	46c0      	nop			; (mov r8, r8)
			}
			if(snakeHead_found == 1)
 80029a8:	230f      	movs	r3, #15
 80029aa:	18fb      	adds	r3, r7, r3
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d02f      	beq.n	8002a12 <snake_runGame+0x186>
		for(int row=0; row<8; row++)
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	3301      	adds	r3, #1
 80029b6:	60bb      	str	r3, [r7, #8]
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	2b07      	cmp	r3, #7
 80029bc:	dd88      	ble.n	80028d0 <snake_runGame+0x44>
		{
			screen_set_bit(food_row, food_column, FOOD_ID);
			food_blink_state = 0;
		}
	}
}
 80029be:	e029      	b.n	8002a14 <snake_runGame+0x188>
	else if(HAL_GetTick() - ts_blinkScheduler > 100)
 80029c0:	f7fd fcc0 	bl	8000344 <HAL_GetTick>
 80029c4:	0002      	movs	r2, r0
 80029c6:	4b1b      	ldr	r3, [pc, #108]	; (8002a34 <snake_runGame+0x1a8>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b64      	cmp	r3, #100	; 0x64
 80029ce:	d921      	bls.n	8002a14 <snake_runGame+0x188>
		ts_blinkScheduler = HAL_GetTick();
 80029d0:	f7fd fcb8 	bl	8000344 <HAL_GetTick>
 80029d4:	0002      	movs	r2, r0
 80029d6:	4b17      	ldr	r3, [pc, #92]	; (8002a34 <snake_runGame+0x1a8>)
 80029d8:	601a      	str	r2, [r3, #0]
		if(food_blink_state == 0)
 80029da:	4b17      	ldr	r3, [pc, #92]	; (8002a38 <snake_runGame+0x1ac>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10b      	bne.n	80029fa <snake_runGame+0x16e>
			screen_set_bit(food_row, food_column, 0);
 80029e2:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <snake_runGame+0x198>)
 80029e4:	7818      	ldrb	r0, [r3, #0]
 80029e6:	4b10      	ldr	r3, [pc, #64]	; (8002a28 <snake_runGame+0x19c>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2200      	movs	r2, #0
 80029ec:	0019      	movs	r1, r3
 80029ee:	f000 fd57 	bl	80034a0 <screen_set_bit>
			food_blink_state = 1;
 80029f2:	4b11      	ldr	r3, [pc, #68]	; (8002a38 <snake_runGame+0x1ac>)
 80029f4:	2201      	movs	r2, #1
 80029f6:	701a      	strb	r2, [r3, #0]
}
 80029f8:	e00c      	b.n	8002a14 <snake_runGame+0x188>
			screen_set_bit(food_row, food_column, FOOD_ID);
 80029fa:	4b0a      	ldr	r3, [pc, #40]	; (8002a24 <snake_runGame+0x198>)
 80029fc:	7818      	ldrb	r0, [r3, #0]
 80029fe:	4b0a      	ldr	r3, [pc, #40]	; (8002a28 <snake_runGame+0x19c>)
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	22c8      	movs	r2, #200	; 0xc8
 8002a04:	0019      	movs	r1, r3
 8002a06:	f000 fd4b 	bl	80034a0 <screen_set_bit>
			food_blink_state = 0;
 8002a0a:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <snake_runGame+0x1ac>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	701a      	strb	r2, [r3, #0]
}
 8002a10:	e000      	b.n	8002a14 <snake_runGame+0x188>
				break;
 8002a12:	46c0      	nop			; (mov r8, r8)
}
 8002a14:	46c0      	nop			; (mov r8, r8)
 8002a16:	46bd      	mov	sp, r7
 8002a18:	b004      	add	sp, #16
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	200000d8 	.word	0x200000d8
 8002a20:	20000008 	.word	0x20000008
 8002a24:	200000d4 	.word	0x200000d4
 8002a28:	200000d5 	.word	0x200000d5
 8002a2c:	20000005 	.word	0x20000005
 8002a30:	20000007 	.word	0x20000007
 8002a34:	200000dc 	.word	0x200000dc
 8002a38:	200000e0 	.word	0x200000e0

08002a3c <validate_direction_change>:

uint8_t validate_direction_change(uint8_t new_direction, uint8_t curr_head_row, uint8_t curr_head_col)
{
 8002a3c:	b590      	push	{r4, r7, lr}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	0004      	movs	r4, r0
 8002a44:	0008      	movs	r0, r1
 8002a46:	0011      	movs	r1, r2
 8002a48:	1dfb      	adds	r3, r7, #7
 8002a4a:	1c22      	adds	r2, r4, #0
 8002a4c:	701a      	strb	r2, [r3, #0]
 8002a4e:	1dbb      	adds	r3, r7, #6
 8002a50:	1c02      	adds	r2, r0, #0
 8002a52:	701a      	strb	r2, [r3, #0]
 8002a54:	1d7b      	adds	r3, r7, #5
 8002a56:	1c0a      	adds	r2, r1, #0
 8002a58:	701a      	strb	r2, [r3, #0]
	uint8_t direction = curr_snake_direction;
 8002a5a:	240f      	movs	r4, #15
 8002a5c:	193b      	adds	r3, r7, r4
 8002a5e:	4a34      	ldr	r2, [pc, #208]	; (8002b30 <validate_direction_change+0xf4>)
 8002a60:	7812      	ldrb	r2, [r2, #0]
 8002a62:	701a      	strb	r2, [r3, #0]

	switch(new_direction)
 8002a64:	1dfb      	adds	r3, r7, #7
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	d02c      	beq.n	8002ac6 <validate_direction_change+0x8a>
 8002a6c:	dc58      	bgt.n	8002b20 <validate_direction_change+0xe4>
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d03c      	beq.n	8002aec <validate_direction_change+0xb0>
 8002a72:	dc55      	bgt.n	8002b20 <validate_direction_change+0xe4>
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d013      	beq.n	8002aa0 <validate_direction_change+0x64>
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d151      	bne.n	8002b20 <validate_direction_change+0xe4>
	{
		case GOING_LEFT:
				if(screen_get_bit(curr_head_row, curr_head_col-1) == 101) //if there is the neck of the snake (body_id=101), it means the user is trying back-track (to go reverse), not allowed
 8002a7c:	1d7b      	adds	r3, r7, #5
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b2da      	uxtb	r2, r3
 8002a84:	1dbb      	adds	r3, r7, #6
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	0011      	movs	r1, r2
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	f000 fcf0 	bl	8003470 <screen_get_bit>
 8002a90:	0003      	movs	r3, r0
 8002a92:	2b65      	cmp	r3, #101	; 0x65
 8002a94:	d03d      	beq.n	8002b12 <validate_direction_change+0xd6>
					UNUSED(0); //do not change direction, (return the current direction)
				else
					direction = new_direction;			//accept the update, return the proposed new direction
 8002a96:	193b      	adds	r3, r7, r4
 8002a98:	1dfa      	adds	r2, r7, #7
 8002a9a:	7812      	ldrb	r2, [r2, #0]
 8002a9c:	701a      	strb	r2, [r3, #0]
			break;
 8002a9e:	e038      	b.n	8002b12 <validate_direction_change+0xd6>

		case GOING_UP:
				if(screen_get_bit(curr_head_row-1, curr_head_col) == 101) //if there is the neck of the snake (body_id=101), it means the user is trying back-track (to go reverse), not allowed
 8002aa0:	1dbb      	adds	r3, r7, #6
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	1d7b      	adds	r3, r7, #5
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	0019      	movs	r1, r3
 8002aae:	0010      	movs	r0, r2
 8002ab0:	f000 fcde 	bl	8003470 <screen_get_bit>
 8002ab4:	0003      	movs	r3, r0
 8002ab6:	2b65      	cmp	r3, #101	; 0x65
 8002ab8:	d02d      	beq.n	8002b16 <validate_direction_change+0xda>
					UNUSED(0); //do not change direction, (return the current direction)
				else
					direction = new_direction;			//accept the update, return the proposed new direction
 8002aba:	230f      	movs	r3, #15
 8002abc:	18fb      	adds	r3, r7, r3
 8002abe:	1dfa      	adds	r2, r7, #7
 8002ac0:	7812      	ldrb	r2, [r2, #0]
 8002ac2:	701a      	strb	r2, [r3, #0]
			break;
 8002ac4:	e027      	b.n	8002b16 <validate_direction_change+0xda>

		case GOING_DOWN:
				if(screen_get_bit(curr_head_row+1, curr_head_col) == 101) //if there is the neck of the snake (body_id=101), it means the user is trying back-track (to go reverse), not allowed
 8002ac6:	1dbb      	adds	r3, r7, #6
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	3301      	adds	r3, #1
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	1d7b      	adds	r3, r7, #5
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	0019      	movs	r1, r3
 8002ad4:	0010      	movs	r0, r2
 8002ad6:	f000 fccb 	bl	8003470 <screen_get_bit>
 8002ada:	0003      	movs	r3, r0
 8002adc:	2b65      	cmp	r3, #101	; 0x65
 8002ade:	d01c      	beq.n	8002b1a <validate_direction_change+0xde>
					UNUSED(0); //do not change direction, (return the current direction)
				else
					direction = new_direction;			//accept the update, return the proposed new direction
 8002ae0:	230f      	movs	r3, #15
 8002ae2:	18fb      	adds	r3, r7, r3
 8002ae4:	1dfa      	adds	r2, r7, #7
 8002ae6:	7812      	ldrb	r2, [r2, #0]
 8002ae8:	701a      	strb	r2, [r3, #0]
			break;
 8002aea:	e016      	b.n	8002b1a <validate_direction_change+0xde>

		case GOING_RIGHT:
				if(screen_get_bit(curr_head_row, curr_head_col+1) == 101) //if there is the neck of the snake (body_id=101), it means the user is trying back-track (to go reverse), not allowed
 8002aec:	1d7b      	adds	r3, r7, #5
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	3301      	adds	r3, #1
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	1dbb      	adds	r3, r7, #6
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	0011      	movs	r1, r2
 8002afa:	0018      	movs	r0, r3
 8002afc:	f000 fcb8 	bl	8003470 <screen_get_bit>
 8002b00:	0003      	movs	r3, r0
 8002b02:	2b65      	cmp	r3, #101	; 0x65
 8002b04:	d00b      	beq.n	8002b1e <validate_direction_change+0xe2>
					UNUSED(0); //do not change direction, (return the current direction)
				else
					direction = new_direction;			//accept the update, return the proposed new direction
 8002b06:	230f      	movs	r3, #15
 8002b08:	18fb      	adds	r3, r7, r3
 8002b0a:	1dfa      	adds	r2, r7, #7
 8002b0c:	7812      	ldrb	r2, [r2, #0]
 8002b0e:	701a      	strb	r2, [r3, #0]
			break;
 8002b10:	e005      	b.n	8002b1e <validate_direction_change+0xe2>
			break;
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	e004      	b.n	8002b20 <validate_direction_change+0xe4>
			break;
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	e002      	b.n	8002b20 <validate_direction_change+0xe4>
			break;
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	e000      	b.n	8002b20 <validate_direction_change+0xe4>
			break;
 8002b1e:	46c0      	nop			; (mov r8, r8)
	}

	//if switch case fail, return currect direction
	return direction;
 8002b20:	230f      	movs	r3, #15
 8002b22:	18fb      	adds	r3, r7, r3
 8002b24:	781b      	ldrb	r3, [r3, #0]
}
 8002b26:	0018      	movs	r0, r3
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	b005      	add	sp, #20
 8002b2c:	bd90      	pop	{r4, r7, pc}
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	20000005 	.word	0x20000005

08002b34 <update_snake_head>:

void update_snake_head(uint8_t curr_head_row, uint8_t curr_head_col)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	0002      	movs	r2, r0
 8002b3c:	1dfb      	adds	r3, r7, #7
 8002b3e:	701a      	strb	r2, [r3, #0]
 8002b40:	1dbb      	adds	r3, r7, #6
 8002b42:	1c0a      	adds	r2, r1, #0
 8002b44:	701a      	strb	r2, [r3, #0]
	switch(curr_snake_direction)
 8002b46:	4b36      	ldr	r3, [pc, #216]	; (8002c20 <update_snake_head+0xec>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b03      	cmp	r3, #3
 8002b4c:	d04d      	beq.n	8002bea <update_snake_head+0xb6>
 8002b4e:	dc63      	bgt.n	8002c18 <update_snake_head+0xe4>
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d005      	beq.n	8002b60 <update_snake_head+0x2c>
 8002b54:	dc60      	bgt.n	8002c18 <update_snake_head+0xe4>
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d019      	beq.n	8002b8e <update_snake_head+0x5a>
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d02e      	beq.n	8002bbc <update_snake_head+0x88>
				screen_set_bit(0, curr_head_col, 100);
			else
				screen_set_bit(curr_head_row+1, curr_head_col, 100);
		break;
	}
}
 8002b5e:	e05b      	b.n	8002c18 <update_snake_head+0xe4>
			if(curr_head_col == 7)	//if the head is at the right edge of the screen, wrap around to the left edge
 8002b60:	1dbb      	adds	r3, r7, #6
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b07      	cmp	r3, #7
 8002b66:	d107      	bne.n	8002b78 <update_snake_head+0x44>
				screen_set_bit(curr_head_row, 0, 100);
 8002b68:	1dfb      	adds	r3, r7, #7
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2264      	movs	r2, #100	; 0x64
 8002b6e:	2100      	movs	r1, #0
 8002b70:	0018      	movs	r0, r3
 8002b72:	f000 fc95 	bl	80034a0 <screen_set_bit>
		break;
 8002b76:	e04f      	b.n	8002c18 <update_snake_head+0xe4>
				screen_set_bit(curr_head_row, curr_head_col+1, 100);
 8002b78:	1dbb      	adds	r3, r7, #6
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	b2d9      	uxtb	r1, r3
 8002b80:	1dfb      	adds	r3, r7, #7
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2264      	movs	r2, #100	; 0x64
 8002b86:	0018      	movs	r0, r3
 8002b88:	f000 fc8a 	bl	80034a0 <screen_set_bit>
		break;
 8002b8c:	e044      	b.n	8002c18 <update_snake_head+0xe4>
			if(curr_head_row == 0 )	//if the head is at the top edge of the screen, wrap around to the bottom edge
 8002b8e:	1dfb      	adds	r3, r7, #7
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d107      	bne.n	8002ba6 <update_snake_head+0x72>
				screen_set_bit(7, curr_head_col, 100);
 8002b96:	1dbb      	adds	r3, r7, #6
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	2264      	movs	r2, #100	; 0x64
 8002b9c:	0019      	movs	r1, r3
 8002b9e:	2007      	movs	r0, #7
 8002ba0:	f000 fc7e 	bl	80034a0 <screen_set_bit>
		break;
 8002ba4:	e038      	b.n	8002c18 <update_snake_head+0xe4>
				screen_set_bit(curr_head_row-1, curr_head_col, 100);
 8002ba6:	1dfb      	adds	r3, r7, #7
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	b2d8      	uxtb	r0, r3
 8002bae:	1dbb      	adds	r3, r7, #6
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2264      	movs	r2, #100	; 0x64
 8002bb4:	0019      	movs	r1, r3
 8002bb6:	f000 fc73 	bl	80034a0 <screen_set_bit>
		break;
 8002bba:	e02d      	b.n	8002c18 <update_snake_head+0xe4>
			if(curr_head_col == 0 )	//if the head is at the left edge of the screen, wrap around to the right edge
 8002bbc:	1dbb      	adds	r3, r7, #6
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d107      	bne.n	8002bd4 <update_snake_head+0xa0>
				screen_set_bit(curr_head_row, 7, 100);
 8002bc4:	1dfb      	adds	r3, r7, #7
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2264      	movs	r2, #100	; 0x64
 8002bca:	2107      	movs	r1, #7
 8002bcc:	0018      	movs	r0, r3
 8002bce:	f000 fc67 	bl	80034a0 <screen_set_bit>
		break;
 8002bd2:	e021      	b.n	8002c18 <update_snake_head+0xe4>
				screen_set_bit(curr_head_row, curr_head_col-1, 100);
 8002bd4:	1dbb      	adds	r3, r7, #6
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	b2d9      	uxtb	r1, r3
 8002bdc:	1dfb      	adds	r3, r7, #7
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2264      	movs	r2, #100	; 0x64
 8002be2:	0018      	movs	r0, r3
 8002be4:	f000 fc5c 	bl	80034a0 <screen_set_bit>
		break;
 8002be8:	e016      	b.n	8002c18 <update_snake_head+0xe4>
			if(curr_head_row == 7 )	//if the head is at the bottom edge of the screen, wrap around to the top edge
 8002bea:	1dfb      	adds	r3, r7, #7
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	2b07      	cmp	r3, #7
 8002bf0:	d107      	bne.n	8002c02 <update_snake_head+0xce>
				screen_set_bit(0, curr_head_col, 100);
 8002bf2:	1dbb      	adds	r3, r7, #6
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2264      	movs	r2, #100	; 0x64
 8002bf8:	0019      	movs	r1, r3
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	f000 fc50 	bl	80034a0 <screen_set_bit>
		break;
 8002c00:	e009      	b.n	8002c16 <update_snake_head+0xe2>
				screen_set_bit(curr_head_row+1, curr_head_col, 100);
 8002c02:	1dfb      	adds	r3, r7, #7
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	3301      	adds	r3, #1
 8002c08:	b2d8      	uxtb	r0, r3
 8002c0a:	1dbb      	adds	r3, r7, #6
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2264      	movs	r2, #100	; 0x64
 8002c10:	0019      	movs	r1, r3
 8002c12:	f000 fc45 	bl	80034a0 <screen_set_bit>
		break;
 8002c16:	46c0      	nop			; (mov r8, r8)
}
 8002c18:	46c0      	nop			; (mov r8, r8)
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	b002      	add	sp, #8
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	20000005 	.word	0x20000005

08002c24 <food_detection>:

uint8_t food_detection(uint8_t curr_head_row, uint8_t curr_head_col)
{
 8002c24:	b590      	push	{r4, r7, lr}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	0002      	movs	r2, r0
 8002c2c:	1dfb      	adds	r3, r7, #7
 8002c2e:	701a      	strb	r2, [r3, #0]
 8002c30:	1dbb      	adds	r3, r7, #6
 8002c32:	1c0a      	adds	r2, r1, #0
 8002c34:	701a      	strb	r2, [r3, #0]
	uint8_t snake_health = SNAKE_OK;
 8002c36:	230f      	movs	r3, #15
 8002c38:	18fb      	adds	r3, r7, r3
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	701a      	strb	r2, [r3, #0]
	uint8_t next_tile_dataBit;
	switch(curr_snake_direction)
 8002c3e:	4b5d      	ldr	r3, [pc, #372]	; (8002db4 <food_detection+0x190>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b03      	cmp	r3, #3
 8002c44:	d05a      	beq.n	8002cfc <food_detection+0xd8>
 8002c46:	dd00      	ble.n	8002c4a <food_detection+0x26>
 8002c48:	e0ad      	b.n	8002da6 <food_detection+0x182>
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d100      	bne.n	8002c50 <food_detection+0x2c>
 8002c4e:	e07c      	b.n	8002d4a <food_detection+0x126>
 8002c50:	dd00      	ble.n	8002c54 <food_detection+0x30>
 8002c52:	e0a8      	b.n	8002da6 <food_detection+0x182>
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d02a      	beq.n	8002cae <food_detection+0x8a>
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d000      	beq.n	8002c5e <food_detection+0x3a>
 8002c5c:	e0a3      	b.n	8002da6 <food_detection+0x182>
	{
		case GOING_LEFT:
				if(curr_head_col != 0)
 8002c5e:	1dbb      	adds	r3, r7, #6
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00e      	beq.n	8002c84 <food_detection+0x60>
					next_tile_dataBit = screen_get_bit(curr_head_row, curr_head_col-1);
 8002c66:	1dbb      	adds	r3, r7, #6
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	230e      	movs	r3, #14
 8002c70:	18fc      	adds	r4, r7, r3
 8002c72:	1dfb      	adds	r3, r7, #7
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	0011      	movs	r1, r2
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f000 fbf9 	bl	8003470 <screen_get_bit>
 8002c7e:	0003      	movs	r3, r0
 8002c80:	7023      	strb	r3, [r4, #0]
 8002c82:	e009      	b.n	8002c98 <food_detection+0x74>
				else
					next_tile_dataBit = screen_get_bit(curr_head_row, 7);	//edge case handling: if the snake head at the left-edge, wrap-around to the right side
 8002c84:	230e      	movs	r3, #14
 8002c86:	18fc      	adds	r4, r7, r3
 8002c88:	1dfb      	adds	r3, r7, #7
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2107      	movs	r1, #7
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f000 fbee 	bl	8003470 <screen_get_bit>
 8002c94:	0003      	movs	r3, r0
 8002c96:	7023      	strb	r3, [r4, #0]

				if( next_tile_dataBit == FOOD_ID ) //if there is a snake body (body_id=102 to 164), then you just ate yourself, game over
 8002c98:	230e      	movs	r3, #14
 8002c9a:	18fb      	adds	r3, r7, r3
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	2bc8      	cmp	r3, #200	; 0xc8
 8002ca0:	d000      	beq.n	8002ca4 <food_detection+0x80>
 8002ca2:	e079      	b.n	8002d98 <food_detection+0x174>
					snake_health = SNAKE_EATING;
 8002ca4:	230f      	movs	r3, #15
 8002ca6:	18fb      	adds	r3, r7, r3
 8002ca8:	2202      	movs	r2, #2
 8002caa:	701a      	strb	r2, [r3, #0]
			break;
 8002cac:	e074      	b.n	8002d98 <food_detection+0x174>

		case GOING_UP:
				if(curr_head_row != 0)
 8002cae:	1dfb      	adds	r3, r7, #7
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00e      	beq.n	8002cd4 <food_detection+0xb0>
					next_tile_dataBit = screen_get_bit(curr_head_row-1, curr_head_col);
 8002cb6:	1dfb      	adds	r3, r7, #7
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	230e      	movs	r3, #14
 8002cc0:	18fc      	adds	r4, r7, r3
 8002cc2:	1dbb      	adds	r3, r7, #6
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	0019      	movs	r1, r3
 8002cc8:	0010      	movs	r0, r2
 8002cca:	f000 fbd1 	bl	8003470 <screen_get_bit>
 8002cce:	0003      	movs	r3, r0
 8002cd0:	7023      	strb	r3, [r4, #0]
 8002cd2:	e009      	b.n	8002ce8 <food_detection+0xc4>
				else
					next_tile_dataBit = screen_get_bit(7, curr_head_col); //edge case handling: if the snake head at the top-edge, wrap-around to the bottom side
 8002cd4:	230e      	movs	r3, #14
 8002cd6:	18fc      	adds	r4, r7, r3
 8002cd8:	1dbb      	adds	r3, r7, #6
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	0019      	movs	r1, r3
 8002cde:	2007      	movs	r0, #7
 8002ce0:	f000 fbc6 	bl	8003470 <screen_get_bit>
 8002ce4:	0003      	movs	r3, r0
 8002ce6:	7023      	strb	r3, [r4, #0]

				if( next_tile_dataBit == FOOD_ID ) //if there is a snake body (body_id=102 to 164), then you just ate yourself, game over
 8002ce8:	230e      	movs	r3, #14
 8002cea:	18fb      	adds	r3, r7, r3
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2bc8      	cmp	r3, #200	; 0xc8
 8002cf0:	d154      	bne.n	8002d9c <food_detection+0x178>
					snake_health = SNAKE_EATING;
 8002cf2:	230f      	movs	r3, #15
 8002cf4:	18fb      	adds	r3, r7, r3
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	701a      	strb	r2, [r3, #0]
			break;
 8002cfa:	e04f      	b.n	8002d9c <food_detection+0x178>

		case GOING_DOWN:
				if(curr_head_row != 7)
 8002cfc:	1dfb      	adds	r3, r7, #7
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b07      	cmp	r3, #7
 8002d02:	d00e      	beq.n	8002d22 <food_detection+0xfe>
					next_tile_dataBit = screen_get_bit(curr_head_row+1, curr_head_col);
 8002d04:	1dfb      	adds	r3, r7, #7
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	230e      	movs	r3, #14
 8002d0e:	18fc      	adds	r4, r7, r3
 8002d10:	1dbb      	adds	r3, r7, #6
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	0019      	movs	r1, r3
 8002d16:	0010      	movs	r0, r2
 8002d18:	f000 fbaa 	bl	8003470 <screen_get_bit>
 8002d1c:	0003      	movs	r3, r0
 8002d1e:	7023      	strb	r3, [r4, #0]
 8002d20:	e009      	b.n	8002d36 <food_detection+0x112>
				else
					next_tile_dataBit = screen_get_bit(0, curr_head_col); //edge case handling: if the snake head at the bottom-edge, wrap-around to the top side
 8002d22:	230e      	movs	r3, #14
 8002d24:	18fc      	adds	r4, r7, r3
 8002d26:	1dbb      	adds	r3, r7, #6
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	0019      	movs	r1, r3
 8002d2c:	2000      	movs	r0, #0
 8002d2e:	f000 fb9f 	bl	8003470 <screen_get_bit>
 8002d32:	0003      	movs	r3, r0
 8002d34:	7023      	strb	r3, [r4, #0]

				if( next_tile_dataBit == FOOD_ID ) //if there is a snake body (body_id=102 to 164), then you just ate yourself, game over
 8002d36:	230e      	movs	r3, #14
 8002d38:	18fb      	adds	r3, r7, r3
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2bc8      	cmp	r3, #200	; 0xc8
 8002d3e:	d12f      	bne.n	8002da0 <food_detection+0x17c>
					snake_health = SNAKE_EATING;
 8002d40:	230f      	movs	r3, #15
 8002d42:	18fb      	adds	r3, r7, r3
 8002d44:	2202      	movs	r2, #2
 8002d46:	701a      	strb	r2, [r3, #0]
			break;
 8002d48:	e02a      	b.n	8002da0 <food_detection+0x17c>

		case GOING_RIGHT:
				if(curr_head_col != 7)
 8002d4a:	1dbb      	adds	r3, r7, #6
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2b07      	cmp	r3, #7
 8002d50:	d00e      	beq.n	8002d70 <food_detection+0x14c>
					next_tile_dataBit = screen_get_bit(curr_head_row, curr_head_col+1);
 8002d52:	1dbb      	adds	r3, r7, #6
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	3301      	adds	r3, #1
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	230e      	movs	r3, #14
 8002d5c:	18fc      	adds	r4, r7, r3
 8002d5e:	1dfb      	adds	r3, r7, #7
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	0011      	movs	r1, r2
 8002d64:	0018      	movs	r0, r3
 8002d66:	f000 fb83 	bl	8003470 <screen_get_bit>
 8002d6a:	0003      	movs	r3, r0
 8002d6c:	7023      	strb	r3, [r4, #0]
 8002d6e:	e009      	b.n	8002d84 <food_detection+0x160>
				else
					next_tile_dataBit = screen_get_bit(curr_head_row, 0);	//edge case handling: if the snake head at the right-edge, wrap-around to the left side
 8002d70:	230e      	movs	r3, #14
 8002d72:	18fc      	adds	r4, r7, r3
 8002d74:	1dfb      	adds	r3, r7, #7
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2100      	movs	r1, #0
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f000 fb78 	bl	8003470 <screen_get_bit>
 8002d80:	0003      	movs	r3, r0
 8002d82:	7023      	strb	r3, [r4, #0]

				if( next_tile_dataBit == FOOD_ID ) //if there is a snake body (body_id=102 to 164), then you just ate yourself, game over
 8002d84:	230e      	movs	r3, #14
 8002d86:	18fb      	adds	r3, r7, r3
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2bc8      	cmp	r3, #200	; 0xc8
 8002d8c:	d10a      	bne.n	8002da4 <food_detection+0x180>
					snake_health = SNAKE_EATING;
 8002d8e:	230f      	movs	r3, #15
 8002d90:	18fb      	adds	r3, r7, r3
 8002d92:	2202      	movs	r2, #2
 8002d94:	701a      	strb	r2, [r3, #0]
			break;
 8002d96:	e005      	b.n	8002da4 <food_detection+0x180>
			break;
 8002d98:	46c0      	nop			; (mov r8, r8)
 8002d9a:	e004      	b.n	8002da6 <food_detection+0x182>
			break;
 8002d9c:	46c0      	nop			; (mov r8, r8)
 8002d9e:	e002      	b.n	8002da6 <food_detection+0x182>
			break;
 8002da0:	46c0      	nop			; (mov r8, r8)
 8002da2:	e000      	b.n	8002da6 <food_detection+0x182>
			break;
 8002da4:	46c0      	nop			; (mov r8, r8)
	}

	return snake_health;
 8002da6:	230f      	movs	r3, #15
 8002da8:	18fb      	adds	r3, r7, r3
 8002daa:	781b      	ldrb	r3, [r3, #0]
}
 8002dac:	0018      	movs	r0, r3
 8002dae:	46bd      	mov	sp, r7
 8002db0:	b005      	add	sp, #20
 8002db2:	bd90      	pop	{r4, r7, pc}
 8002db4:	20000005 	.word	0x20000005

08002db8 <collision_detection>:

uint8_t collision_detection(uint8_t curr_head_row, uint8_t curr_head_col)
{
 8002db8:	b590      	push	{r4, r7, lr}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	0002      	movs	r2, r0
 8002dc0:	1dfb      	adds	r3, r7, #7
 8002dc2:	701a      	strb	r2, [r3, #0]
 8002dc4:	1dbb      	adds	r3, r7, #6
 8002dc6:	1c0a      	adds	r2, r1, #0
 8002dc8:	701a      	strb	r2, [r3, #0]
	uint8_t snake_health = SNAKE_OK;
 8002dca:	230f      	movs	r3, #15
 8002dcc:	18fb      	adds	r3, r7, r3
 8002dce:	2200      	movs	r2, #0
 8002dd0:	701a      	strb	r2, [r3, #0]
	uint8_t next_tile_dataBit;
	switch(curr_snake_direction)
 8002dd2:	4b66      	ldr	r3, [pc, #408]	; (8002f6c <collision_detection+0x1b4>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b03      	cmp	r3, #3
 8002dd8:	d063      	beq.n	8002ea2 <collision_detection+0xea>
 8002dda:	dd00      	ble.n	8002dde <collision_detection+0x26>
 8002ddc:	e0be      	b.n	8002f5c <collision_detection+0x1a4>
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d100      	bne.n	8002de4 <collision_detection+0x2c>
 8002de2:	e089      	b.n	8002ef8 <collision_detection+0x140>
 8002de4:	dd00      	ble.n	8002de8 <collision_detection+0x30>
 8002de6:	e0b9      	b.n	8002f5c <collision_detection+0x1a4>
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d02f      	beq.n	8002e4c <collision_detection+0x94>
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d000      	beq.n	8002df2 <collision_detection+0x3a>
 8002df0:	e0b4      	b.n	8002f5c <collision_detection+0x1a4>
	{
		case GOING_LEFT:
				if(curr_head_col != 0)
 8002df2:	1dbb      	adds	r3, r7, #6
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00e      	beq.n	8002e18 <collision_detection+0x60>
					next_tile_dataBit = screen_get_bit(curr_head_row, curr_head_col-1);
 8002dfa:	1dbb      	adds	r3, r7, #6
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	230e      	movs	r3, #14
 8002e04:	18fc      	adds	r4, r7, r3
 8002e06:	1dfb      	adds	r3, r7, #7
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	0011      	movs	r1, r2
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f000 fb2f 	bl	8003470 <screen_get_bit>
 8002e12:	0003      	movs	r3, r0
 8002e14:	7023      	strb	r3, [r4, #0]
 8002e16:	e009      	b.n	8002e2c <collision_detection+0x74>
				else
					next_tile_dataBit = screen_get_bit(curr_head_row, 7);	//edge case handling: if the snake head at the left-edge, wrap-around to the right side
 8002e18:	230e      	movs	r3, #14
 8002e1a:	18fc      	adds	r4, r7, r3
 8002e1c:	1dfb      	adds	r3, r7, #7
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2107      	movs	r1, #7
 8002e22:	0018      	movs	r0, r3
 8002e24:	f000 fb24 	bl	8003470 <screen_get_bit>
 8002e28:	0003      	movs	r3, r0
 8002e2a:	7023      	strb	r3, [r4, #0]

				if( next_tile_dataBit >= 102 && next_tile_dataBit <= 164 ) //if there is a snake body (body_id=102 to 164), then you just ate yourself, game over
 8002e2c:	220e      	movs	r2, #14
 8002e2e:	18bb      	adds	r3, r7, r2
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b65      	cmp	r3, #101	; 0x65
 8002e34:	d800      	bhi.n	8002e38 <collision_detection+0x80>
 8002e36:	e08a      	b.n	8002f4e <collision_detection+0x196>
 8002e38:	18bb      	adds	r3, r7, r2
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2ba4      	cmp	r3, #164	; 0xa4
 8002e3e:	d900      	bls.n	8002e42 <collision_detection+0x8a>
 8002e40:	e085      	b.n	8002f4e <collision_detection+0x196>
					snake_health = SNAKE_DEAD;
 8002e42:	230f      	movs	r3, #15
 8002e44:	18fb      	adds	r3, r7, r3
 8002e46:	2201      	movs	r2, #1
 8002e48:	701a      	strb	r2, [r3, #0]
			break;
 8002e4a:	e080      	b.n	8002f4e <collision_detection+0x196>

		case GOING_UP:
				if(curr_head_row != 0)
 8002e4c:	1dfb      	adds	r3, r7, #7
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00e      	beq.n	8002e72 <collision_detection+0xba>
					next_tile_dataBit = screen_get_bit(curr_head_row-1, curr_head_col);
 8002e54:	1dfb      	adds	r3, r7, #7
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	230e      	movs	r3, #14
 8002e5e:	18fc      	adds	r4, r7, r3
 8002e60:	1dbb      	adds	r3, r7, #6
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	0019      	movs	r1, r3
 8002e66:	0010      	movs	r0, r2
 8002e68:	f000 fb02 	bl	8003470 <screen_get_bit>
 8002e6c:	0003      	movs	r3, r0
 8002e6e:	7023      	strb	r3, [r4, #0]
 8002e70:	e009      	b.n	8002e86 <collision_detection+0xce>
				else
					next_tile_dataBit = screen_get_bit(7, curr_head_col); //edge case handling: if the snake head at the top-edge, wrap-around to the bottom side
 8002e72:	230e      	movs	r3, #14
 8002e74:	18fc      	adds	r4, r7, r3
 8002e76:	1dbb      	adds	r3, r7, #6
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	0019      	movs	r1, r3
 8002e7c:	2007      	movs	r0, #7
 8002e7e:	f000 faf7 	bl	8003470 <screen_get_bit>
 8002e82:	0003      	movs	r3, r0
 8002e84:	7023      	strb	r3, [r4, #0]

				if( next_tile_dataBit >= 102 && next_tile_dataBit <= 164 ) //if there is a snake body (body_id=102 to 164), then you just ate yourself, game over
 8002e86:	220e      	movs	r2, #14
 8002e88:	18bb      	adds	r3, r7, r2
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b65      	cmp	r3, #101	; 0x65
 8002e8e:	d960      	bls.n	8002f52 <collision_detection+0x19a>
 8002e90:	18bb      	adds	r3, r7, r2
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	2ba4      	cmp	r3, #164	; 0xa4
 8002e96:	d85c      	bhi.n	8002f52 <collision_detection+0x19a>
					snake_health = SNAKE_DEAD;
 8002e98:	230f      	movs	r3, #15
 8002e9a:	18fb      	adds	r3, r7, r3
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	701a      	strb	r2, [r3, #0]
			break;
 8002ea0:	e057      	b.n	8002f52 <collision_detection+0x19a>

		case GOING_DOWN:
				if(curr_head_row != 7)
 8002ea2:	1dfb      	adds	r3, r7, #7
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	2b07      	cmp	r3, #7
 8002ea8:	d00e      	beq.n	8002ec8 <collision_detection+0x110>
					next_tile_dataBit = screen_get_bit(curr_head_row+1, curr_head_col);
 8002eaa:	1dfb      	adds	r3, r7, #7
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	230e      	movs	r3, #14
 8002eb4:	18fc      	adds	r4, r7, r3
 8002eb6:	1dbb      	adds	r3, r7, #6
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	0019      	movs	r1, r3
 8002ebc:	0010      	movs	r0, r2
 8002ebe:	f000 fad7 	bl	8003470 <screen_get_bit>
 8002ec2:	0003      	movs	r3, r0
 8002ec4:	7023      	strb	r3, [r4, #0]
 8002ec6:	e009      	b.n	8002edc <collision_detection+0x124>
				else
					next_tile_dataBit = screen_get_bit(0, curr_head_col); //edge case handling: if the snake head at the bottom-edge, wrap-around to the top side
 8002ec8:	230e      	movs	r3, #14
 8002eca:	18fc      	adds	r4, r7, r3
 8002ecc:	1dbb      	adds	r3, r7, #6
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	0019      	movs	r1, r3
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	f000 facc 	bl	8003470 <screen_get_bit>
 8002ed8:	0003      	movs	r3, r0
 8002eda:	7023      	strb	r3, [r4, #0]

				if( next_tile_dataBit >= 102 && next_tile_dataBit <= 164 ) //if there is a snake body (body_id=102 to 164), then you just ate yourself, game over
 8002edc:	220e      	movs	r2, #14
 8002ede:	18bb      	adds	r3, r7, r2
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	2b65      	cmp	r3, #101	; 0x65
 8002ee4:	d937      	bls.n	8002f56 <collision_detection+0x19e>
 8002ee6:	18bb      	adds	r3, r7, r2
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	2ba4      	cmp	r3, #164	; 0xa4
 8002eec:	d833      	bhi.n	8002f56 <collision_detection+0x19e>
					snake_health = SNAKE_DEAD;
 8002eee:	230f      	movs	r3, #15
 8002ef0:	18fb      	adds	r3, r7, r3
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	701a      	strb	r2, [r3, #0]
			break;
 8002ef6:	e02e      	b.n	8002f56 <collision_detection+0x19e>

		case GOING_RIGHT:
				if(curr_head_col != 7)
 8002ef8:	1dbb      	adds	r3, r7, #6
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b07      	cmp	r3, #7
 8002efe:	d00e      	beq.n	8002f1e <collision_detection+0x166>
					next_tile_dataBit = screen_get_bit(curr_head_row, curr_head_col+1);
 8002f00:	1dbb      	adds	r3, r7, #6
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	3301      	adds	r3, #1
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	230e      	movs	r3, #14
 8002f0a:	18fc      	adds	r4, r7, r3
 8002f0c:	1dfb      	adds	r3, r7, #7
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	0011      	movs	r1, r2
 8002f12:	0018      	movs	r0, r3
 8002f14:	f000 faac 	bl	8003470 <screen_get_bit>
 8002f18:	0003      	movs	r3, r0
 8002f1a:	7023      	strb	r3, [r4, #0]
 8002f1c:	e009      	b.n	8002f32 <collision_detection+0x17a>
				else
					next_tile_dataBit = screen_get_bit(curr_head_row, 0);	//edge case handling: if the snake head at the right-edge, wrap-around to the left side
 8002f1e:	230e      	movs	r3, #14
 8002f20:	18fc      	adds	r4, r7, r3
 8002f22:	1dfb      	adds	r3, r7, #7
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2100      	movs	r1, #0
 8002f28:	0018      	movs	r0, r3
 8002f2a:	f000 faa1 	bl	8003470 <screen_get_bit>
 8002f2e:	0003      	movs	r3, r0
 8002f30:	7023      	strb	r3, [r4, #0]

				if( next_tile_dataBit >= 102 && next_tile_dataBit <= 164 ) //if there is a snake body (body_id=102 to 164), then you just ate yourself, game over
 8002f32:	220e      	movs	r2, #14
 8002f34:	18bb      	adds	r3, r7, r2
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2b65      	cmp	r3, #101	; 0x65
 8002f3a:	d90e      	bls.n	8002f5a <collision_detection+0x1a2>
 8002f3c:	18bb      	adds	r3, r7, r2
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2ba4      	cmp	r3, #164	; 0xa4
 8002f42:	d80a      	bhi.n	8002f5a <collision_detection+0x1a2>
					snake_health = SNAKE_DEAD;
 8002f44:	230f      	movs	r3, #15
 8002f46:	18fb      	adds	r3, r7, r3
 8002f48:	2201      	movs	r2, #1
 8002f4a:	701a      	strb	r2, [r3, #0]
			break;
 8002f4c:	e005      	b.n	8002f5a <collision_detection+0x1a2>
			break;
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	e004      	b.n	8002f5c <collision_detection+0x1a4>
			break;
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	e002      	b.n	8002f5c <collision_detection+0x1a4>
			break;
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	e000      	b.n	8002f5c <collision_detection+0x1a4>
			break;
 8002f5a:	46c0      	nop			; (mov r8, r8)
	}

	return snake_health;
 8002f5c:	230f      	movs	r3, #15
 8002f5e:	18fb      	adds	r3, r7, r3
 8002f60:	781b      	ldrb	r3, [r3, #0]
}
 8002f62:	0018      	movs	r0, r3
 8002f64:	46bd      	mov	sp, r7
 8002f66:	b005      	add	sp, #20
 8002f68:	bd90      	pop	{r4, r7, pc}
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	20000005 	.word	0x20000005

08002f70 <game_over_animation>:

void game_over_animation()
{
 8002f70:	b5b0      	push	{r4, r5, r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
	uint8_t head_row, head_col;

	//hide food
	screen_set_bit(food_row, food_column, 0);
 8002f76:	4b34      	ldr	r3, [pc, #208]	; (8003048 <game_over_animation+0xd8>)
 8002f78:	7818      	ldrb	r0, [r3, #0]
 8002f7a:	4b34      	ldr	r3, [pc, #208]	; (800304c <game_over_animation+0xdc>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	0019      	movs	r1, r3
 8002f82:	f000 fa8d 	bl	80034a0 <screen_set_bit>

	//find the head
	for(int row=0; row<8; row++)
 8002f86:	2300      	movs	r3, #0
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	e01e      	b.n	8002fca <game_over_animation+0x5a>
	{
		for(int col=0; col<8; col++)
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	e015      	b.n	8002fbe <game_over_animation+0x4e>
		{
			if(screen_get_bit(row, col) == 100)
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	b2d2      	uxtb	r2, r2
 8002f9a:	0011      	movs	r1, r2
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	f000 fa67 	bl	8003470 <screen_get_bit>
 8002fa2:	0003      	movs	r3, r0
 8002fa4:	2b64      	cmp	r3, #100	; 0x64
 8002fa6:	d107      	bne.n	8002fb8 <game_over_animation+0x48>
			{
				head_row = row;
 8002fa8:	2317      	movs	r3, #23
 8002faa:	18fb      	adds	r3, r7, r3
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	701a      	strb	r2, [r3, #0]
				head_col = col;
 8002fb0:	2316      	movs	r3, #22
 8002fb2:	18fb      	adds	r3, r7, r3
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	701a      	strb	r2, [r3, #0]
		for(int col=0; col<8; col++)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2b07      	cmp	r3, #7
 8002fc2:	dde6      	ble.n	8002f92 <game_over_animation+0x22>
	for(int row=0; row<8; row++)
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	2b07      	cmp	r3, #7
 8002fce:	dddd      	ble.n	8002f8c <game_over_animation+0x1c>
			}
		}
	}

	//blink the head
	for(int i=0; i<30; i++)
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60bb      	str	r3, [r7, #8]
 8002fd4:	e01a      	b.n	800300c <game_over_animation+0x9c>
	{
		screen_set_bit(head_row, head_col, 0);
 8002fd6:	2416      	movs	r4, #22
 8002fd8:	193b      	adds	r3, r7, r4
 8002fda:	7819      	ldrb	r1, [r3, #0]
 8002fdc:	2517      	movs	r5, #23
 8002fde:	197b      	adds	r3, r7, r5
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f000 fa5b 	bl	80034a0 <screen_set_bit>
		HAL_Delay(50);
 8002fea:	2032      	movs	r0, #50	; 0x32
 8002fec:	f7fd f9b4 	bl	8000358 <HAL_Delay>
		screen_set_bit(head_row, head_col, 100);
 8002ff0:	193b      	adds	r3, r7, r4
 8002ff2:	7819      	ldrb	r1, [r3, #0]
 8002ff4:	197b      	adds	r3, r7, r5
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2264      	movs	r2, #100	; 0x64
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f000 fa50 	bl	80034a0 <screen_set_bit>
		HAL_Delay(50);
 8003000:	2032      	movs	r0, #50	; 0x32
 8003002:	f7fd f9a9 	bl	8000358 <HAL_Delay>
	for(int i=0; i<30; i++)
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	3301      	adds	r3, #1
 800300a:	60bb      	str	r3, [r7, #8]
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	2b1d      	cmp	r3, #29
 8003010:	dde1      	ble.n	8002fd6 <game_over_animation+0x66>
	}


	//flash the screen 10 times
	for(int i=0; i<3; i++)
 8003012:	2300      	movs	r3, #0
 8003014:	607b      	str	r3, [r7, #4]
 8003016:	e00c      	b.n	8003032 <game_over_animation+0xc2>
	{
		screen_clear();
 8003018:	f000 fa86 	bl	8003528 <screen_clear>
		HAL_Delay(100);
 800301c:	2064      	movs	r0, #100	; 0x64
 800301e:	f7fd f99b 	bl	8000358 <HAL_Delay>
		screen_fill();
 8003022:	f000 fa5d 	bl	80034e0 <screen_fill>
		HAL_Delay(100);
 8003026:	2064      	movs	r0, #100	; 0x64
 8003028:	f7fd f996 	bl	8000358 <HAL_Delay>
	for(int i=0; i<3; i++)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3301      	adds	r3, #1
 8003030:	607b      	str	r3, [r7, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b02      	cmp	r3, #2
 8003036:	ddef      	ble.n	8003018 <game_over_animation+0xa8>
	}
	screen_clear();
 8003038:	f000 fa76 	bl	8003528 <screen_clear>

	//regenerate new snake
	game_startNewGame();
 800303c:	f7ff fb72 	bl	8002724 <game_startNewGame>
}
 8003040:	46c0      	nop			; (mov r8, r8)
 8003042:	46bd      	mov	sp, r7
 8003044:	b006      	add	sp, #24
 8003046:	bdb0      	pop	{r4, r5, r7, pc}
 8003048:	200000d4 	.word	0x200000d4
 800304c:	200000d5 	.word	0x200000d5

08003050 <increment_snake_body>:

void increment_snake_body()
{
 8003050:	b590      	push	{r4, r7, lr}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
	for(int row=0; row<8; row++)
 8003056:	2300      	movs	r3, #0
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	e02c      	b.n	80030b6 <increment_snake_body+0x66>
	{
		for(int col=0; col<8; col++)
 800305c:	2300      	movs	r3, #0
 800305e:	60bb      	str	r3, [r7, #8]
 8003060:	e023      	b.n	80030aa <increment_snake_body+0x5a>
		{
			uint8_t current_dataBit = screen_get_bit(row, col);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	b2db      	uxtb	r3, r3
 8003066:	68ba      	ldr	r2, [r7, #8]
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	1dfc      	adds	r4, r7, #7
 800306c:	0011      	movs	r1, r2
 800306e:	0018      	movs	r0, r3
 8003070:	f000 f9fe 	bl	8003470 <screen_get_bit>
 8003074:	0003      	movs	r3, r0
 8003076:	7023      	strb	r3, [r4, #0]
			if(current_dataBit >= 100 && current_dataBit <= 164)
 8003078:	1dfb      	adds	r3, r7, #7
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b63      	cmp	r3, #99	; 0x63
 800307e:	d911      	bls.n	80030a4 <increment_snake_body+0x54>
 8003080:	1dfb      	adds	r3, r7, #7
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2ba4      	cmp	r3, #164	; 0xa4
 8003086:	d80d      	bhi.n	80030a4 <increment_snake_body+0x54>
			{
				uint8_t new_dataBit = current_dataBit + 1;
 8003088:	1dbb      	adds	r3, r7, #6
 800308a:	1dfa      	adds	r2, r7, #7
 800308c:	7812      	ldrb	r2, [r2, #0]
 800308e:	3201      	adds	r2, #1
 8003090:	701a      	strb	r2, [r3, #0]
				screen_set_bit(row, col, new_dataBit);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	b2d8      	uxtb	r0, r3
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	b2d9      	uxtb	r1, r3
 800309a:	1dbb      	adds	r3, r7, #6
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	001a      	movs	r2, r3
 80030a0:	f000 f9fe 	bl	80034a0 <screen_set_bit>
		for(int col=0; col<8; col++)
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	3301      	adds	r3, #1
 80030a8:	60bb      	str	r3, [r7, #8]
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	2b07      	cmp	r3, #7
 80030ae:	ddd8      	ble.n	8003062 <increment_snake_body+0x12>
	for(int row=0; row<8; row++)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	3301      	adds	r3, #1
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2b07      	cmp	r3, #7
 80030ba:	ddcf      	ble.n	800305c <increment_snake_body+0xc>
			}
		}
	}
}
 80030bc:	46c0      	nop			; (mov r8, r8)
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	46bd      	mov	sp, r7
 80030c2:	b005      	add	sp, #20
 80030c4:	bd90      	pop	{r4, r7, pc}
	...

080030c8 <remove_snake_tail>:

void remove_snake_tail()
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
	for(int row=0; row<8; row++)
 80030ce:	2300      	movs	r3, #0
 80030d0:	607b      	str	r3, [r7, #4]
 80030d2:	e022      	b.n	800311a <remove_snake_tail+0x52>
	{
		for(int col=0; col<8; col++)
 80030d4:	2300      	movs	r3, #0
 80030d6:	603b      	str	r3, [r7, #0]
 80030d8:	e019      	b.n	800310e <remove_snake_tail+0x46>
		{
			if(screen_get_bit(row, col) == 100 + snake_lenght)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	0011      	movs	r1, r2
 80030e4:	0018      	movs	r0, r3
 80030e6:	f000 f9c3 	bl	8003470 <screen_get_bit>
 80030ea:	0003      	movs	r3, r0
 80030ec:	001a      	movs	r2, r3
 80030ee:	4b0f      	ldr	r3, [pc, #60]	; (800312c <remove_snake_tail+0x64>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	3364      	adds	r3, #100	; 0x64
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d107      	bne.n	8003108 <remove_snake_tail+0x40>
			{
				screen_set_bit(row, col, 0);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	b2d1      	uxtb	r1, r2
 8003100:	2200      	movs	r2, #0
 8003102:	0018      	movs	r0, r3
 8003104:	f000 f9cc 	bl	80034a0 <screen_set_bit>
		for(int col=0; col<8; col++)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	3301      	adds	r3, #1
 800310c:	603b      	str	r3, [r7, #0]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2b07      	cmp	r3, #7
 8003112:	dde2      	ble.n	80030da <remove_snake_tail+0x12>
	for(int row=0; row<8; row++)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3301      	adds	r3, #1
 8003118:	607b      	str	r3, [r7, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b07      	cmp	r3, #7
 800311e:	ddd9      	ble.n	80030d4 <remove_snake_tail+0xc>
			}
		}
	}
}
 8003120:	46c0      	nop			; (mov r8, r8)
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	46bd      	mov	sp, r7
 8003126:	b002      	add	sp, #8
 8003128:	bd80      	pop	{r7, pc}
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	20000007 	.word	0x20000007

08003130 <snake_set_new_direction>:

void snake_set_new_direction(uint8_t new_direction)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	0002      	movs	r2, r0
 8003138:	1dfb      	adds	r3, r7, #7
 800313a:	701a      	strb	r2, [r3, #0]
	pending_new_direction = new_direction;
 800313c:	4b03      	ldr	r3, [pc, #12]	; (800314c <snake_set_new_direction+0x1c>)
 800313e:	1dfa      	adds	r2, r7, #7
 8003140:	7812      	ldrb	r2, [r2, #0]
 8003142:	701a      	strb	r2, [r3, #0]
}
 8003144:	46c0      	nop			; (mov r8, r8)
 8003146:	46bd      	mov	sp, r7
 8003148:	b002      	add	sp, #8
 800314a:	bd80      	pop	{r7, pc}
 800314c:	20000006 	.word	0x20000006

08003150 <process_new_direction_request>:

uint8_t process_new_direction_request()
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
	uint8_t temp = pending_new_direction;
 8003156:	1dfb      	adds	r3, r7, #7
 8003158:	4a05      	ldr	r2, [pc, #20]	; (8003170 <process_new_direction_request+0x20>)
 800315a:	7812      	ldrb	r2, [r2, #0]
 800315c:	701a      	strb	r2, [r3, #0]
	pending_new_direction = NO_DIRECTION_CHANGE;
 800315e:	4b04      	ldr	r3, [pc, #16]	; (8003170 <process_new_direction_request+0x20>)
 8003160:	22ff      	movs	r2, #255	; 0xff
 8003162:	701a      	strb	r2, [r3, #0]
	return temp;
 8003164:	1dfb      	adds	r3, r7, #7
 8003166:	781b      	ldrb	r3, [r3, #0]
}
 8003168:	0018      	movs	r0, r3
 800316a:	46bd      	mov	sp, r7
 800316c:	b002      	add	sp, #8
 800316e:	bd80      	pop	{r7, pc}
 8003170:	20000006 	.word	0x20000006

08003174 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003174:	b590      	push	{r4, r7, lr}
 8003176:	b089      	sub	sp, #36	; 0x24
 8003178:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800317a:	240c      	movs	r4, #12
 800317c:	193b      	adds	r3, r7, r4
 800317e:	0018      	movs	r0, r3
 8003180:	2314      	movs	r3, #20
 8003182:	001a      	movs	r2, r3
 8003184:	2100      	movs	r1, #0
 8003186:	f000 fc75 	bl	8003a74 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800318a:	4b2e      	ldr	r3, [pc, #184]	; (8003244 <MX_GPIO_Init+0xd0>)
 800318c:	695a      	ldr	r2, [r3, #20]
 800318e:	4b2d      	ldr	r3, [pc, #180]	; (8003244 <MX_GPIO_Init+0xd0>)
 8003190:	2180      	movs	r1, #128	; 0x80
 8003192:	0289      	lsls	r1, r1, #10
 8003194:	430a      	orrs	r2, r1
 8003196:	615a      	str	r2, [r3, #20]
 8003198:	4b2a      	ldr	r3, [pc, #168]	; (8003244 <MX_GPIO_Init+0xd0>)
 800319a:	695a      	ldr	r2, [r3, #20]
 800319c:	2380      	movs	r3, #128	; 0x80
 800319e:	029b      	lsls	r3, r3, #10
 80031a0:	4013      	ands	r3, r2
 80031a2:	60bb      	str	r3, [r7, #8]
 80031a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031a6:	4b27      	ldr	r3, [pc, #156]	; (8003244 <MX_GPIO_Init+0xd0>)
 80031a8:	695a      	ldr	r2, [r3, #20]
 80031aa:	4b26      	ldr	r3, [pc, #152]	; (8003244 <MX_GPIO_Init+0xd0>)
 80031ac:	2180      	movs	r1, #128	; 0x80
 80031ae:	02c9      	lsls	r1, r1, #11
 80031b0:	430a      	orrs	r2, r1
 80031b2:	615a      	str	r2, [r3, #20]
 80031b4:	4b23      	ldr	r3, [pc, #140]	; (8003244 <MX_GPIO_Init+0xd0>)
 80031b6:	695a      	ldr	r2, [r3, #20]
 80031b8:	2380      	movs	r3, #128	; 0x80
 80031ba:	02db      	lsls	r3, r3, #11
 80031bc:	4013      	ands	r3, r2
 80031be:	607b      	str	r3, [r7, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_P_0_Pin|LED_P_1_Pin|LED_P_2_Pin|LED_N_2_Pin
 80031c2:	4921      	ldr	r1, [pc, #132]	; (8003248 <MX_GPIO_Init+0xd4>)
 80031c4:	4b21      	ldr	r3, [pc, #132]	; (800324c <MX_GPIO_Init+0xd8>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	0018      	movs	r0, r3
 80031ca:	f7fd ff06 	bl	8000fda <HAL_GPIO_WritePin>
                          |LED_N_7_Pin|LED_P_3_Pin|LED_P_4_Pin|LED_P_5_Pin
                          |LED_P_6_Pin|LED_P_7_Pin|LED_N_0_Pin|LED_N_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = BTN2_Pin|BTN3_Pin|BTN4_Pin|BTN1_Pin
 80031ce:	193b      	adds	r3, r7, r4
 80031d0:	22ee      	movs	r2, #238	; 0xee
 80031d2:	601a      	str	r2, [r3, #0]
                          |BTB_Pin|BTA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031d4:	193b      	adds	r3, r7, r4
 80031d6:	2200      	movs	r2, #0
 80031d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031da:	193b      	adds	r3, r7, r4
 80031dc:	2201      	movs	r2, #1
 80031de:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031e0:	193a      	adds	r2, r7, r4
 80031e2:	2390      	movs	r3, #144	; 0x90
 80031e4:	05db      	lsls	r3, r3, #23
 80031e6:	0011      	movs	r1, r2
 80031e8:	0018      	movs	r0, r3
 80031ea:	f7fd fd69 	bl	8000cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_P_0_Pin|LED_P_1_Pin|LED_P_2_Pin|LED_P_3_Pin
 80031ee:	193b      	adds	r3, r7, r4
 80031f0:	22ff      	movs	r2, #255	; 0xff
 80031f2:	601a      	str	r2, [r3, #0]
                          |LED_P_4_Pin|LED_P_5_Pin|LED_P_6_Pin|LED_P_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031f4:	193b      	adds	r3, r7, r4
 80031f6:	2201      	movs	r2, #1
 80031f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fa:	193b      	adds	r3, r7, r4
 80031fc:	2200      	movs	r2, #0
 80031fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003200:	193b      	adds	r3, r7, r4
 8003202:	2203      	movs	r2, #3
 8003204:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003206:	193b      	adds	r3, r7, r4
 8003208:	4a10      	ldr	r2, [pc, #64]	; (800324c <MX_GPIO_Init+0xd8>)
 800320a:	0019      	movs	r1, r3
 800320c:	0010      	movs	r0, r2
 800320e:	f7fd fd57 	bl	8000cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_N_2_Pin|LED_N_3_Pin|LED_N_4_Pin|LED_N_5_Pin
 8003212:	0021      	movs	r1, r4
 8003214:	187b      	adds	r3, r7, r1
 8003216:	22ff      	movs	r2, #255	; 0xff
 8003218:	0212      	lsls	r2, r2, #8
 800321a:	601a      	str	r2, [r3, #0]
                          |LED_N_6_Pin|LED_N_7_Pin|LED_N_0_Pin|LED_N_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800321c:	187b      	adds	r3, r7, r1
 800321e:	2211      	movs	r2, #17
 8003220:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003222:	187b      	adds	r3, r7, r1
 8003224:	2200      	movs	r2, #0
 8003226:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003228:	187b      	adds	r3, r7, r1
 800322a:	2203      	movs	r2, #3
 800322c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800322e:	187b      	adds	r3, r7, r1
 8003230:	4a06      	ldr	r2, [pc, #24]	; (800324c <MX_GPIO_Init+0xd8>)
 8003232:	0019      	movs	r1, r3
 8003234:	0010      	movs	r0, r2
 8003236:	f7fd fd43 	bl	8000cc0 <HAL_GPIO_Init>

}
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	46bd      	mov	sp, r7
 800323e:	b009      	add	sp, #36	; 0x24
 8003240:	bd90      	pop	{r4, r7, pc}
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	40021000 	.word	0x40021000
 8003248:	0000ffff 	.word	0x0000ffff
 800324c:	48000400 	.word	0x48000400

08003250 <matrix_setLed_on>:
#include "ledHandler.h"

void matrix_setLed_on(uint8_t row, uint8_t col)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	0002      	movs	r2, r0
 8003258:	1dfb      	adds	r3, r7, #7
 800325a:	701a      	strb	r2, [r3, #0]
 800325c:	1dbb      	adds	r3, r7, #6
 800325e:	1c0a      	adds	r2, r1, #0
 8003260:	701a      	strb	r2, [r3, #0]
	//turn on all leds
	matrix_setLed_allOff();
 8003262:	f000 f81d 	bl	80032a0 <matrix_setLed_allOff>
	
	HAL_GPIO_WritePin(GPIOB, 0x01<<row, GPIO_PIN_SET);
 8003266:	1dfb      	adds	r3, r7, #7
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2201      	movs	r2, #1
 800326c:	409a      	lsls	r2, r3
 800326e:	0013      	movs	r3, r2
 8003270:	b29b      	uxth	r3, r3
 8003272:	480a      	ldr	r0, [pc, #40]	; (800329c <matrix_setLed_on+0x4c>)
 8003274:	2201      	movs	r2, #1
 8003276:	0019      	movs	r1, r3
 8003278:	f7fd feaf 	bl	8000fda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, 0x01<<(col+8), GPIO_PIN_RESET);
 800327c:	1dbb      	adds	r3, r7, #6
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	3308      	adds	r3, #8
 8003282:	2201      	movs	r2, #1
 8003284:	409a      	lsls	r2, r3
 8003286:	0013      	movs	r3, r2
 8003288:	b29b      	uxth	r3, r3
 800328a:	4804      	ldr	r0, [pc, #16]	; (800329c <matrix_setLed_on+0x4c>)
 800328c:	2200      	movs	r2, #0
 800328e:	0019      	movs	r1, r3
 8003290:	f7fd fea3 	bl	8000fda <HAL_GPIO_WritePin>
}
 8003294:	46c0      	nop			; (mov r8, r8)
 8003296:	46bd      	mov	sp, r7
 8003298:	b002      	add	sp, #8
 800329a:	bd80      	pop	{r7, pc}
 800329c:	48000400 	.word	0x48000400

080032a0 <matrix_setLed_allOff>:

void matrix_setLed_allOff()
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, 0x00FFU, GPIO_PIN_RESET);
 80032a4:	4b07      	ldr	r3, [pc, #28]	; (80032c4 <matrix_setLed_allOff+0x24>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	21ff      	movs	r1, #255	; 0xff
 80032aa:	0018      	movs	r0, r3
 80032ac:	f7fd fe95 	bl	8000fda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, 0xFF00U, GPIO_PIN_SET);
 80032b0:	23ff      	movs	r3, #255	; 0xff
 80032b2:	021b      	lsls	r3, r3, #8
 80032b4:	4803      	ldr	r0, [pc, #12]	; (80032c4 <matrix_setLed_allOff+0x24>)
 80032b6:	2201      	movs	r2, #1
 80032b8:	0019      	movs	r1, r3
 80032ba:	f7fd fe8e 	bl	8000fda <HAL_GPIO_WritePin>
}
 80032be:	46c0      	nop			; (mov r8, r8)
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	48000400 	.word	0x48000400

080032c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80032ce:	f7fc ffdf 	bl	8000290 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80032d2:	f000 f86b 	bl	80033ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80032d6:	f7ff ff4d 	bl	8003174 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80032da:	f000 faf9 	bl	80038d0 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 80032de:	f000 faa7 	bl	8003830 <MX_TIM16_Init>
  MX_ADC_Init();
 80032e2:	f7ff f97d 	bl	80025e0 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */



  //Generate seed from floating ADC pin
  HAL_ADC_Start(&hadc);
 80032e6:	4b2f      	ldr	r3, [pc, #188]	; (80033a4 <main+0xdc>)
 80032e8:	0018      	movs	r0, r3
 80032ea:	f7fd f999 	bl	8000620 <HAL_ADC_Start>
  uint32_t seed = 0;
 80032ee:	2300      	movs	r3, #0
 80032f0:	60fb      	str	r3, [r7, #12]
  uint32_t currentVal = 0;
 80032f2:	2300      	movs	r3, #0
 80032f4:	607b      	str	r3, [r7, #4]
  for(int i=0; i<10; i++)
 80032f6:	2300      	movs	r3, #0
 80032f8:	60bb      	str	r3, [r7, #8]
 80032fa:	e014      	b.n	8003326 <main+0x5e>
  {
	  HAL_ADC_PollForConversion(&hadc, 0xFF);
 80032fc:	4b29      	ldr	r3, [pc, #164]	; (80033a4 <main+0xdc>)
 80032fe:	21ff      	movs	r1, #255	; 0xff
 8003300:	0018      	movs	r0, r3
 8003302:	f7fd f9e1 	bl	80006c8 <HAL_ADC_PollForConversion>
	  currentVal = HAL_ADC_GetValue(&hadc);
 8003306:	4b27      	ldr	r3, [pc, #156]	; (80033a4 <main+0xdc>)
 8003308:	0018      	movs	r0, r3
 800330a:	f7fd fa75 	bl	80007f8 <HAL_ADC_GetValue>
 800330e:	0003      	movs	r3, r0
 8003310:	607b      	str	r3, [r7, #4]
	  seed = seed + currentVal;
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	18d3      	adds	r3, r2, r3
 8003318:	60fb      	str	r3, [r7, #12]
	  HAL_Delay(2);
 800331a:	2002      	movs	r0, #2
 800331c:	f7fd f81c 	bl	8000358 <HAL_Delay>
  for(int i=0; i<10; i++)
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	3301      	adds	r3, #1
 8003324:	60bb      	str	r3, [r7, #8]
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	2b09      	cmp	r3, #9
 800332a:	dde7      	ble.n	80032fc <main+0x34>
  }
  srand(seed);	//input seed into sRand
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	0018      	movs	r0, r3
 8003330:	f000 fba8 	bl	8003a84 <srand>

  //start timer for screen refresh
  HAL_TIM_Base_Start_IT(&htim16);
 8003334:	4b1c      	ldr	r3, [pc, #112]	; (80033a8 <main+0xe0>)
 8003336:	0018      	movs	r0, r3
 8003338:	f7fe fbf6 	bl	8001b28 <HAL_TIM_Base_Start_IT>
  game_startNewGame();
 800333c:	f7ff f9f2 	bl	8002724 <game_startNewGame>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  snake_runGame();
 8003340:	f7ff faa4 	bl	800288c <snake_runGame>

	  if(HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin) == GPIO_PIN_RESET)
 8003344:	2390      	movs	r3, #144	; 0x90
 8003346:	05db      	lsls	r3, r3, #23
 8003348:	2102      	movs	r1, #2
 800334a:	0018      	movs	r0, r3
 800334c:	f7fd fe28 	bl	8000fa0 <HAL_GPIO_ReadPin>
 8003350:	1e03      	subs	r3, r0, #0
 8003352:	d103      	bne.n	800335c <main+0x94>
		  snake_set_new_direction(GOING_UP);
 8003354:	2000      	movs	r0, #0
 8003356:	f7ff feeb 	bl	8003130 <snake_set_new_direction>
 800335a:	e7f1      	b.n	8003340 <main+0x78>

	  else if(HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin) == GPIO_PIN_RESET)
 800335c:	2390      	movs	r3, #144	; 0x90
 800335e:	05db      	lsls	r3, r3, #23
 8003360:	2120      	movs	r1, #32
 8003362:	0018      	movs	r0, r3
 8003364:	f7fd fe1c 	bl	8000fa0 <HAL_GPIO_ReadPin>
 8003368:	1e03      	subs	r3, r0, #0
 800336a:	d103      	bne.n	8003374 <main+0xac>
		  snake_set_new_direction(GOING_DOWN);
 800336c:	2003      	movs	r0, #3
 800336e:	f7ff fedf 	bl	8003130 <snake_set_new_direction>
 8003372:	e7e5      	b.n	8003340 <main+0x78>

	  else if(HAL_GPIO_ReadPin(BTN3_GPIO_Port, BTN3_Pin) == GPIO_PIN_RESET)
 8003374:	2390      	movs	r3, #144	; 0x90
 8003376:	05db      	lsls	r3, r3, #23
 8003378:	2104      	movs	r1, #4
 800337a:	0018      	movs	r0, r3
 800337c:	f7fd fe10 	bl	8000fa0 <HAL_GPIO_ReadPin>
 8003380:	1e03      	subs	r3, r0, #0
 8003382:	d103      	bne.n	800338c <main+0xc4>
		  snake_set_new_direction(GOING_LEFT);
 8003384:	2001      	movs	r0, #1
 8003386:	f7ff fed3 	bl	8003130 <snake_set_new_direction>
 800338a:	e7d9      	b.n	8003340 <main+0x78>

	  else if(HAL_GPIO_ReadPin(BTN4_GPIO_Port, BTN4_Pin) == GPIO_PIN_RESET)
 800338c:	2390      	movs	r3, #144	; 0x90
 800338e:	05db      	lsls	r3, r3, #23
 8003390:	2108      	movs	r1, #8
 8003392:	0018      	movs	r0, r3
 8003394:	f7fd fe04 	bl	8000fa0 <HAL_GPIO_ReadPin>
 8003398:	1e03      	subs	r3, r0, #0
 800339a:	d1d1      	bne.n	8003340 <main+0x78>
		  snake_set_new_direction(GOING_RIGHT);
 800339c:	2002      	movs	r0, #2
 800339e:	f7ff fec7 	bl	8003130 <snake_set_new_direction>
	  snake_runGame();
 80033a2:	e7cd      	b.n	8003340 <main+0x78>
 80033a4:	20000094 	.word	0x20000094
 80033a8:	2000012c 	.word	0x2000012c

080033ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033ac:	b590      	push	{r4, r7, lr}
 80033ae:	b095      	sub	sp, #84	; 0x54
 80033b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033b2:	2420      	movs	r4, #32
 80033b4:	193b      	adds	r3, r7, r4
 80033b6:	0018      	movs	r0, r3
 80033b8:	2330      	movs	r3, #48	; 0x30
 80033ba:	001a      	movs	r2, r3
 80033bc:	2100      	movs	r1, #0
 80033be:	f000 fb59 	bl	8003a74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033c2:	2310      	movs	r3, #16
 80033c4:	18fb      	adds	r3, r7, r3
 80033c6:	0018      	movs	r0, r3
 80033c8:	2310      	movs	r3, #16
 80033ca:	001a      	movs	r2, r3
 80033cc:	2100      	movs	r1, #0
 80033ce:	f000 fb51 	bl	8003a74 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033d2:	003b      	movs	r3, r7
 80033d4:	0018      	movs	r0, r3
 80033d6:	2310      	movs	r3, #16
 80033d8:	001a      	movs	r2, r3
 80033da:	2100      	movs	r1, #0
 80033dc:	f000 fb4a 	bl	8003a74 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80033e0:	0021      	movs	r1, r4
 80033e2:	187b      	adds	r3, r7, r1
 80033e4:	2212      	movs	r2, #18
 80033e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80033e8:	187b      	adds	r3, r7, r1
 80033ea:	2201      	movs	r2, #1
 80033ec:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80033ee:	187b      	adds	r3, r7, r1
 80033f0:	2201      	movs	r2, #1
 80033f2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80033f4:	187b      	adds	r3, r7, r1
 80033f6:	2210      	movs	r2, #16
 80033f8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80033fa:	187b      	adds	r3, r7, r1
 80033fc:	2210      	movs	r2, #16
 80033fe:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003400:	187b      	adds	r3, r7, r1
 8003402:	2200      	movs	r2, #0
 8003404:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003406:	187b      	adds	r3, r7, r1
 8003408:	0018      	movs	r0, r3
 800340a:	f7fd fe03 	bl	8001014 <HAL_RCC_OscConfig>
 800340e:	1e03      	subs	r3, r0, #0
 8003410:	d001      	beq.n	8003416 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8003412:	f000 f828 	bl	8003466 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003416:	2110      	movs	r1, #16
 8003418:	187b      	adds	r3, r7, r1
 800341a:	2207      	movs	r2, #7
 800341c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800341e:	187b      	adds	r3, r7, r1
 8003420:	2200      	movs	r2, #0
 8003422:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003424:	187b      	adds	r3, r7, r1
 8003426:	2200      	movs	r2, #0
 8003428:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800342a:	187b      	adds	r3, r7, r1
 800342c:	2200      	movs	r2, #0
 800342e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003430:	187b      	adds	r3, r7, r1
 8003432:	2100      	movs	r1, #0
 8003434:	0018      	movs	r0, r3
 8003436:	f7fe f907 	bl	8001648 <HAL_RCC_ClockConfig>
 800343a:	1e03      	subs	r3, r0, #0
 800343c:	d001      	beq.n	8003442 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800343e:	f000 f812 	bl	8003466 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003442:	003b      	movs	r3, r7
 8003444:	2201      	movs	r2, #1
 8003446:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003448:	003b      	movs	r3, r7
 800344a:	2200      	movs	r2, #0
 800344c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800344e:	003b      	movs	r3, r7
 8003450:	0018      	movs	r0, r3
 8003452:	f7fe fa4b 	bl	80018ec <HAL_RCCEx_PeriphCLKConfig>
 8003456:	1e03      	subs	r3, r0, #0
 8003458:	d001      	beq.n	800345e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800345a:	f000 f804 	bl	8003466 <Error_Handler>
  }
}
 800345e:	46c0      	nop			; (mov r8, r8)
 8003460:	46bd      	mov	sp, r7
 8003462:	b015      	add	sp, #84	; 0x54
 8003464:	bd90      	pop	{r4, r7, pc}

08003466 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800346a:	b672      	cpsid	i
}
 800346c:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800346e:	e7fe      	b.n	800346e <Error_Handler+0x8>

08003470 <screen_get_bit>:
	 {0, 0, 0, 0, 	0, 0, 0, 0}
 };

 
uint8_t screen_get_bit(uint8_t row, uint8_t col)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	0002      	movs	r2, r0
 8003478:	1dfb      	adds	r3, r7, #7
 800347a:	701a      	strb	r2, [r3, #0]
 800347c:	1dbb      	adds	r3, r7, #6
 800347e:	1c0a      	adds	r2, r1, #0
 8003480:	701a      	strb	r2, [r3, #0]
	return screenBuffer[col][row];
 8003482:	1dbb      	adds	r3, r7, #6
 8003484:	781a      	ldrb	r2, [r3, #0]
 8003486:	1dfb      	adds	r3, r7, #7
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	4904      	ldr	r1, [pc, #16]	; (800349c <screen_get_bit+0x2c>)
 800348c:	00d2      	lsls	r2, r2, #3
 800348e:	188a      	adds	r2, r1, r2
 8003490:	5cd3      	ldrb	r3, [r2, r3]
}
 8003492:	0018      	movs	r0, r3
 8003494:	46bd      	mov	sp, r7
 8003496:	b002      	add	sp, #8
 8003498:	bd80      	pop	{r7, pc}
 800349a:	46c0      	nop			; (mov r8, r8)
 800349c:	200000e4 	.word	0x200000e4

080034a0 <screen_set_bit>:

void screen_set_bit(uint8_t row, uint8_t col, uint8_t dataBit)
{
 80034a0:	b590      	push	{r4, r7, lr}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	0004      	movs	r4, r0
 80034a8:	0008      	movs	r0, r1
 80034aa:	0011      	movs	r1, r2
 80034ac:	1dfb      	adds	r3, r7, #7
 80034ae:	1c22      	adds	r2, r4, #0
 80034b0:	701a      	strb	r2, [r3, #0]
 80034b2:	1dbb      	adds	r3, r7, #6
 80034b4:	1c02      	adds	r2, r0, #0
 80034b6:	701a      	strb	r2, [r3, #0]
 80034b8:	1d7b      	adds	r3, r7, #5
 80034ba:	1c0a      	adds	r2, r1, #0
 80034bc:	701a      	strb	r2, [r3, #0]
	screenBuffer[col][row] = dataBit;
 80034be:	1dbb      	adds	r3, r7, #6
 80034c0:	781a      	ldrb	r2, [r3, #0]
 80034c2:	1dfb      	adds	r3, r7, #7
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	4905      	ldr	r1, [pc, #20]	; (80034dc <screen_set_bit+0x3c>)
 80034c8:	00d2      	lsls	r2, r2, #3
 80034ca:	188a      	adds	r2, r1, r2
 80034cc:	1d79      	adds	r1, r7, #5
 80034ce:	7809      	ldrb	r1, [r1, #0]
 80034d0:	54d1      	strb	r1, [r2, r3]
}
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	46bd      	mov	sp, r7
 80034d6:	b003      	add	sp, #12
 80034d8:	bd90      	pop	{r4, r7, pc}
 80034da:	46c0      	nop			; (mov r8, r8)
 80034dc:	200000e4 	.word	0x200000e4

080034e0 <screen_fill>:
		}	
	}
}
 
void screen_fill()
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
	for(int row=0; row<8; row++)
 80034e6:	2300      	movs	r3, #0
 80034e8:	607b      	str	r3, [r7, #4]
 80034ea:	e013      	b.n	8003514 <screen_fill+0x34>
	{
		for(int col=0; col<8; col++)
 80034ec:	2300      	movs	r3, #0
 80034ee:	603b      	str	r3, [r7, #0]
 80034f0:	e00a      	b.n	8003508 <screen_fill+0x28>
		{
				screenBuffer[row][col] = 1;
 80034f2:	4a0c      	ldr	r2, [pc, #48]	; (8003524 <screen_fill+0x44>)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	18d2      	adds	r2, r2, r3
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	18d3      	adds	r3, r2, r3
 80034fe:	2201      	movs	r2, #1
 8003500:	701a      	strb	r2, [r3, #0]
		for(int col=0; col<8; col++)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	3301      	adds	r3, #1
 8003506:	603b      	str	r3, [r7, #0]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	2b07      	cmp	r3, #7
 800350c:	ddf1      	ble.n	80034f2 <screen_fill+0x12>
	for(int row=0; row<8; row++)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	3301      	adds	r3, #1
 8003512:	607b      	str	r3, [r7, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b07      	cmp	r3, #7
 8003518:	dde8      	ble.n	80034ec <screen_fill+0xc>
		}	
	}
}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	46c0      	nop			; (mov r8, r8)
 800351e:	46bd      	mov	sp, r7
 8003520:	b002      	add	sp, #8
 8003522:	bd80      	pop	{r7, pc}
 8003524:	200000e4 	.word	0x200000e4

08003528 <screen_clear>:

void screen_clear()
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
	for(int row=0; row<8; row++)
 800352e:	2300      	movs	r3, #0
 8003530:	607b      	str	r3, [r7, #4]
 8003532:	e013      	b.n	800355c <screen_clear+0x34>
	{
		for(int col=0; col<8; col++)
 8003534:	2300      	movs	r3, #0
 8003536:	603b      	str	r3, [r7, #0]
 8003538:	e00a      	b.n	8003550 <screen_clear+0x28>
		{
				screenBuffer[row][col] = 0;
 800353a:	4a0c      	ldr	r2, [pc, #48]	; (800356c <screen_clear+0x44>)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	18d2      	adds	r2, r2, r3
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	18d3      	adds	r3, r2, r3
 8003546:	2200      	movs	r2, #0
 8003548:	701a      	strb	r2, [r3, #0]
		for(int col=0; col<8; col++)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	3301      	adds	r3, #1
 800354e:	603b      	str	r3, [r7, #0]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	2b07      	cmp	r3, #7
 8003554:	ddf1      	ble.n	800353a <screen_clear+0x12>
	for(int row=0; row<8; row++)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	3301      	adds	r3, #1
 800355a:	607b      	str	r3, [r7, #4]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b07      	cmp	r3, #7
 8003560:	dde8      	ble.n	8003534 <screen_clear+0xc>
		}	
	}
}
 8003562:	46c0      	nop			; (mov r8, r8)
 8003564:	46c0      	nop			; (mov r8, r8)
 8003566:	46bd      	mov	sp, r7
 8003568:	b002      	add	sp, #8
 800356a:	bd80      	pop	{r7, pc}
 800356c:	200000e4 	.word	0x200000e4

08003570 <screen_interruptUpdate>:

void screen_interruptUpdate()
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
	static uint8_t col = 0;
	static uint8_t row = 0;
	
	uint8_t dataBit = screenBuffer[row][col];
 8003576:	4b1c      	ldr	r3, [pc, #112]	; (80035e8 <screen_interruptUpdate+0x78>)
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	001a      	movs	r2, r3
 800357c:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <screen_interruptUpdate+0x7c>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	0018      	movs	r0, r3
 8003582:	1dfb      	adds	r3, r7, #7
 8003584:	491a      	ldr	r1, [pc, #104]	; (80035f0 <screen_interruptUpdate+0x80>)
 8003586:	00d2      	lsls	r2, r2, #3
 8003588:	188a      	adds	r2, r1, r2
 800358a:	5c12      	ldrb	r2, [r2, r0]
 800358c:	701a      	strb	r2, [r3, #0]
	if( dataBit != 0)
 800358e:	1dfb      	adds	r3, r7, #7
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d008      	beq.n	80035a8 <screen_interruptUpdate+0x38>
	{
		matrix_setLed_on(row, col);
 8003596:	4b14      	ldr	r3, [pc, #80]	; (80035e8 <screen_interruptUpdate+0x78>)
 8003598:	781a      	ldrb	r2, [r3, #0]
 800359a:	4b14      	ldr	r3, [pc, #80]	; (80035ec <screen_interruptUpdate+0x7c>)
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	0019      	movs	r1, r3
 80035a0:	0010      	movs	r0, r2
 80035a2:	f7ff fe55 	bl	8003250 <matrix_setLed_on>
 80035a6:	e001      	b.n	80035ac <screen_interruptUpdate+0x3c>
	}
	else
	{
		matrix_setLed_allOff();
 80035a8:	f7ff fe7a 	bl	80032a0 <matrix_setLed_allOff>
	}	
		
	col++;
 80035ac:	4b0f      	ldr	r3, [pc, #60]	; (80035ec <screen_interruptUpdate+0x7c>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	3301      	adds	r3, #1
 80035b2:	b2da      	uxtb	r2, r3
 80035b4:	4b0d      	ldr	r3, [pc, #52]	; (80035ec <screen_interruptUpdate+0x7c>)
 80035b6:	701a      	strb	r2, [r3, #0]
	if(col==8)
 80035b8:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <screen_interruptUpdate+0x7c>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d108      	bne.n	80035d2 <screen_interruptUpdate+0x62>
	{
		col=0;
 80035c0:	4b0a      	ldr	r3, [pc, #40]	; (80035ec <screen_interruptUpdate+0x7c>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	701a      	strb	r2, [r3, #0]
		row++;
 80035c6:	4b08      	ldr	r3, [pc, #32]	; (80035e8 <screen_interruptUpdate+0x78>)
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	3301      	adds	r3, #1
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <screen_interruptUpdate+0x78>)
 80035d0:	701a      	strb	r2, [r3, #0]
	}
	if(row==8)
 80035d2:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <screen_interruptUpdate+0x78>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	2b08      	cmp	r3, #8
 80035d8:	d102      	bne.n	80035e0 <screen_interruptUpdate+0x70>
		row=0;
 80035da:	4b03      	ldr	r3, [pc, #12]	; (80035e8 <screen_interruptUpdate+0x78>)
 80035dc:	2200      	movs	r2, #0
 80035de:	701a      	strb	r2, [r3, #0]
}
 80035e0:	46c0      	nop			; (mov r8, r8)
 80035e2:	46bd      	mov	sp, r7
 80035e4:	b002      	add	sp, #8
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	20000124 	.word	0x20000124
 80035ec:	20000125 	.word	0x20000125
 80035f0:	200000e4 	.word	0x200000e4

080035f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035fa:	4b0f      	ldr	r3, [pc, #60]	; (8003638 <HAL_MspInit+0x44>)
 80035fc:	699a      	ldr	r2, [r3, #24]
 80035fe:	4b0e      	ldr	r3, [pc, #56]	; (8003638 <HAL_MspInit+0x44>)
 8003600:	2101      	movs	r1, #1
 8003602:	430a      	orrs	r2, r1
 8003604:	619a      	str	r2, [r3, #24]
 8003606:	4b0c      	ldr	r3, [pc, #48]	; (8003638 <HAL_MspInit+0x44>)
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	2201      	movs	r2, #1
 800360c:	4013      	ands	r3, r2
 800360e:	607b      	str	r3, [r7, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003612:	4b09      	ldr	r3, [pc, #36]	; (8003638 <HAL_MspInit+0x44>)
 8003614:	69da      	ldr	r2, [r3, #28]
 8003616:	4b08      	ldr	r3, [pc, #32]	; (8003638 <HAL_MspInit+0x44>)
 8003618:	2180      	movs	r1, #128	; 0x80
 800361a:	0549      	lsls	r1, r1, #21
 800361c:	430a      	orrs	r2, r1
 800361e:	61da      	str	r2, [r3, #28]
 8003620:	4b05      	ldr	r3, [pc, #20]	; (8003638 <HAL_MspInit+0x44>)
 8003622:	69da      	ldr	r2, [r3, #28]
 8003624:	2380      	movs	r3, #128	; 0x80
 8003626:	055b      	lsls	r3, r3, #21
 8003628:	4013      	ands	r3, r2
 800362a:	603b      	str	r3, [r7, #0]
 800362c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800362e:	46c0      	nop			; (mov r8, r8)
 8003630:	46bd      	mov	sp, r7
 8003632:	b002      	add	sp, #8
 8003634:	bd80      	pop	{r7, pc}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	40021000 	.word	0x40021000

0800363c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003640:	e7fe      	b.n	8003640 <NMI_Handler+0x4>

08003642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003646:	e7fe      	b.n	8003646 <HardFault_Handler+0x4>

08003648 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800364c:	46c0      	nop			; (mov r8, r8)
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003660:	f7fc fe5e 	bl	8000320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003664:	46c0      	nop			; (mov r8, r8)
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
	...

0800366c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003670:	4b03      	ldr	r3, [pc, #12]	; (8003680 <TIM16_IRQHandler+0x14>)
 8003672:	0018      	movs	r0, r3
 8003674:	f7fe faa4 	bl	8001bc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8003678:	46c0      	nop			; (mov r8, r8)
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	46c0      	nop			; (mov r8, r8)
 8003680:	2000012c 	.word	0x2000012c

08003684 <HAL_TIM_PeriodElapsedCallback>:



#include "screenBuffer.h"
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM16)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a04      	ldr	r2, [pc, #16]	; (80036a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d101      	bne.n	800369a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		screen_interruptUpdate();
 8003696:	f7ff ff6b 	bl	8003570 <screen_interruptUpdate>
	}
}
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	46bd      	mov	sp, r7
 800369e:	b002      	add	sp, #8
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	46c0      	nop			; (mov r8, r8)
 80036a4:	40014400 	.word	0x40014400

080036a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
	return 1;
 80036ac:	2301      	movs	r3, #1
}
 80036ae:	0018      	movs	r0, r3
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <_kill>:

int _kill(int pid, int sig)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80036be:	f000 f9af 	bl	8003a20 <__errno>
 80036c2:	0003      	movs	r3, r0
 80036c4:	2216      	movs	r2, #22
 80036c6:	601a      	str	r2, [r3, #0]
	return -1;
 80036c8:	2301      	movs	r3, #1
 80036ca:	425b      	negs	r3, r3
}
 80036cc:	0018      	movs	r0, r3
 80036ce:	46bd      	mov	sp, r7
 80036d0:	b002      	add	sp, #8
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <_exit>:

void _exit (int status)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80036dc:	2301      	movs	r3, #1
 80036de:	425a      	negs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	0011      	movs	r1, r2
 80036e4:	0018      	movs	r0, r3
 80036e6:	f7ff ffe5 	bl	80036b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80036ea:	e7fe      	b.n	80036ea <_exit+0x16>

080036ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036f8:	2300      	movs	r3, #0
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	e00a      	b.n	8003714 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80036fe:	e000      	b.n	8003702 <_read+0x16>
 8003700:	bf00      	nop
 8003702:	0001      	movs	r1, r0
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	1c5a      	adds	r2, r3, #1
 8003708:	60ba      	str	r2, [r7, #8]
 800370a:	b2ca      	uxtb	r2, r1
 800370c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	3301      	adds	r3, #1
 8003712:	617b      	str	r3, [r7, #20]
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	429a      	cmp	r2, r3
 800371a:	dbf0      	blt.n	80036fe <_read+0x12>
	}

return len;
 800371c:	687b      	ldr	r3, [r7, #4]
}
 800371e:	0018      	movs	r0, r3
 8003720:	46bd      	mov	sp, r7
 8003722:	b006      	add	sp, #24
 8003724:	bd80      	pop	{r7, pc}

08003726 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b086      	sub	sp, #24
 800372a:	af00      	add	r7, sp, #0
 800372c:	60f8      	str	r0, [r7, #12]
 800372e:	60b9      	str	r1, [r7, #8]
 8003730:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003732:	2300      	movs	r3, #0
 8003734:	617b      	str	r3, [r7, #20]
 8003736:	e009      	b.n	800374c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	60ba      	str	r2, [r7, #8]
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	0018      	movs	r0, r3
 8003742:	e000      	b.n	8003746 <_write+0x20>
 8003744:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	3301      	adds	r3, #1
 800374a:	617b      	str	r3, [r7, #20]
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	429a      	cmp	r2, r3
 8003752:	dbf1      	blt.n	8003738 <_write+0x12>
	}
	return len;
 8003754:	687b      	ldr	r3, [r7, #4]
}
 8003756:	0018      	movs	r0, r3
 8003758:	46bd      	mov	sp, r7
 800375a:	b006      	add	sp, #24
 800375c:	bd80      	pop	{r7, pc}

0800375e <_close>:

int _close(int file)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b082      	sub	sp, #8
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
	return -1;
 8003766:	2301      	movs	r3, #1
 8003768:	425b      	negs	r3, r3
}
 800376a:	0018      	movs	r0, r3
 800376c:	46bd      	mov	sp, r7
 800376e:	b002      	add	sp, #8
 8003770:	bd80      	pop	{r7, pc}

08003772 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b082      	sub	sp, #8
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
 800377a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	2280      	movs	r2, #128	; 0x80
 8003780:	0192      	lsls	r2, r2, #6
 8003782:	605a      	str	r2, [r3, #4]
	return 0;
 8003784:	2300      	movs	r3, #0
}
 8003786:	0018      	movs	r0, r3
 8003788:	46bd      	mov	sp, r7
 800378a:	b002      	add	sp, #8
 800378c:	bd80      	pop	{r7, pc}

0800378e <_isatty>:

int _isatty(int file)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b082      	sub	sp, #8
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
	return 1;
 8003796:	2301      	movs	r3, #1
}
 8003798:	0018      	movs	r0, r3
 800379a:	46bd      	mov	sp, r7
 800379c:	b002      	add	sp, #8
 800379e:	bd80      	pop	{r7, pc}

080037a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
	return 0;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	0018      	movs	r0, r3
 80037b0:	46bd      	mov	sp, r7
 80037b2:	b004      	add	sp, #16
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037c0:	4a14      	ldr	r2, [pc, #80]	; (8003814 <_sbrk+0x5c>)
 80037c2:	4b15      	ldr	r3, [pc, #84]	; (8003818 <_sbrk+0x60>)
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037cc:	4b13      	ldr	r3, [pc, #76]	; (800381c <_sbrk+0x64>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d102      	bne.n	80037da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037d4:	4b11      	ldr	r3, [pc, #68]	; (800381c <_sbrk+0x64>)
 80037d6:	4a12      	ldr	r2, [pc, #72]	; (8003820 <_sbrk+0x68>)
 80037d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037da:	4b10      	ldr	r3, [pc, #64]	; (800381c <_sbrk+0x64>)
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	18d3      	adds	r3, r2, r3
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d207      	bcs.n	80037f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037e8:	f000 f91a 	bl	8003a20 <__errno>
 80037ec:	0003      	movs	r3, r0
 80037ee:	220c      	movs	r2, #12
 80037f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037f2:	2301      	movs	r3, #1
 80037f4:	425b      	negs	r3, r3
 80037f6:	e009      	b.n	800380c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037f8:	4b08      	ldr	r3, [pc, #32]	; (800381c <_sbrk+0x64>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037fe:	4b07      	ldr	r3, [pc, #28]	; (800381c <_sbrk+0x64>)
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	18d2      	adds	r2, r2, r3
 8003806:	4b05      	ldr	r3, [pc, #20]	; (800381c <_sbrk+0x64>)
 8003808:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800380a:	68fb      	ldr	r3, [r7, #12]
}
 800380c:	0018      	movs	r0, r3
 800380e:	46bd      	mov	sp, r7
 8003810:	b006      	add	sp, #24
 8003812:	bd80      	pop	{r7, pc}
 8003814:	20002000 	.word	0x20002000
 8003818:	00000400 	.word	0x00000400
 800381c:	20000128 	.word	0x20000128
 8003820:	20000208 	.word	0x20000208

08003824 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003828:	46c0      	nop			; (mov r8, r8)
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003834:	4b10      	ldr	r3, [pc, #64]	; (8003878 <MX_TIM16_Init+0x48>)
 8003836:	4a11      	ldr	r2, [pc, #68]	; (800387c <MX_TIM16_Init+0x4c>)
 8003838:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800383a:	4b0f      	ldr	r3, [pc, #60]	; (8003878 <MX_TIM16_Init+0x48>)
 800383c:	2200      	movs	r2, #0
 800383e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003840:	4b0d      	ldr	r3, [pc, #52]	; (8003878 <MX_TIM16_Init+0x48>)
 8003842:	2200      	movs	r2, #0
 8003844:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 8003846:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <MX_TIM16_Init+0x48>)
 8003848:	22fa      	movs	r2, #250	; 0xfa
 800384a:	0092      	lsls	r2, r2, #2
 800384c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800384e:	4b0a      	ldr	r3, [pc, #40]	; (8003878 <MX_TIM16_Init+0x48>)
 8003850:	2200      	movs	r2, #0
 8003852:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003854:	4b08      	ldr	r3, [pc, #32]	; (8003878 <MX_TIM16_Init+0x48>)
 8003856:	2200      	movs	r2, #0
 8003858:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800385a:	4b07      	ldr	r3, [pc, #28]	; (8003878 <MX_TIM16_Init+0x48>)
 800385c:	2200      	movs	r2, #0
 800385e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003860:	4b05      	ldr	r3, [pc, #20]	; (8003878 <MX_TIM16_Init+0x48>)
 8003862:	0018      	movs	r0, r3
 8003864:	f7fe f910 	bl	8001a88 <HAL_TIM_Base_Init>
 8003868:	1e03      	subs	r3, r0, #0
 800386a:	d001      	beq.n	8003870 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800386c:	f7ff fdfb 	bl	8003466 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003870:	46c0      	nop			; (mov r8, r8)
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	46c0      	nop			; (mov r8, r8)
 8003878:	2000012c 	.word	0x2000012c
 800387c:	40014400 	.word	0x40014400

08003880 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a0e      	ldr	r2, [pc, #56]	; (80038c8 <HAL_TIM_Base_MspInit+0x48>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d115      	bne.n	80038be <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003892:	4b0e      	ldr	r3, [pc, #56]	; (80038cc <HAL_TIM_Base_MspInit+0x4c>)
 8003894:	699a      	ldr	r2, [r3, #24]
 8003896:	4b0d      	ldr	r3, [pc, #52]	; (80038cc <HAL_TIM_Base_MspInit+0x4c>)
 8003898:	2180      	movs	r1, #128	; 0x80
 800389a:	0289      	lsls	r1, r1, #10
 800389c:	430a      	orrs	r2, r1
 800389e:	619a      	str	r2, [r3, #24]
 80038a0:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <HAL_TIM_Base_MspInit+0x4c>)
 80038a2:	699a      	ldr	r2, [r3, #24]
 80038a4:	2380      	movs	r3, #128	; 0x80
 80038a6:	029b      	lsls	r3, r3, #10
 80038a8:	4013      	ands	r3, r2
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80038ae:	2200      	movs	r2, #0
 80038b0:	2100      	movs	r1, #0
 80038b2:	2015      	movs	r0, #21
 80038b4:	f7fd f9d2 	bl	8000c5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80038b8:	2015      	movs	r0, #21
 80038ba:	f7fd f9e4 	bl	8000c86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	46bd      	mov	sp, r7
 80038c2:	b004      	add	sp, #16
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	46c0      	nop			; (mov r8, r8)
 80038c8:	40014400 	.word	0x40014400
 80038cc:	40021000 	.word	0x40021000

080038d0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80038d4:	4b14      	ldr	r3, [pc, #80]	; (8003928 <MX_USART1_UART_Init+0x58>)
 80038d6:	4a15      	ldr	r2, [pc, #84]	; (800392c <MX_USART1_UART_Init+0x5c>)
 80038d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80038da:	4b13      	ldr	r3, [pc, #76]	; (8003928 <MX_USART1_UART_Init+0x58>)
 80038dc:	2296      	movs	r2, #150	; 0x96
 80038de:	0212      	lsls	r2, r2, #8
 80038e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80038e2:	4b11      	ldr	r3, [pc, #68]	; (8003928 <MX_USART1_UART_Init+0x58>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80038e8:	4b0f      	ldr	r3, [pc, #60]	; (8003928 <MX_USART1_UART_Init+0x58>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80038ee:	4b0e      	ldr	r3, [pc, #56]	; (8003928 <MX_USART1_UART_Init+0x58>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80038f4:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <MX_USART1_UART_Init+0x58>)
 80038f6:	220c      	movs	r2, #12
 80038f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038fa:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <MX_USART1_UART_Init+0x58>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003900:	4b09      	ldr	r3, [pc, #36]	; (8003928 <MX_USART1_UART_Init+0x58>)
 8003902:	2200      	movs	r2, #0
 8003904:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003906:	4b08      	ldr	r3, [pc, #32]	; (8003928 <MX_USART1_UART_Init+0x58>)
 8003908:	2200      	movs	r2, #0
 800390a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800390c:	4b06      	ldr	r3, [pc, #24]	; (8003928 <MX_USART1_UART_Init+0x58>)
 800390e:	2200      	movs	r2, #0
 8003910:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003912:	4b05      	ldr	r3, [pc, #20]	; (8003928 <MX_USART1_UART_Init+0x58>)
 8003914:	0018      	movs	r0, r3
 8003916:	f7fe fb0f 	bl	8001f38 <HAL_UART_Init>
 800391a:	1e03      	subs	r3, r0, #0
 800391c:	d001      	beq.n	8003922 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800391e:	f7ff fda2 	bl	8003466 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	20000174 	.word	0x20000174
 800392c:	40013800 	.word	0x40013800

08003930 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003930:	b590      	push	{r4, r7, lr}
 8003932:	b08b      	sub	sp, #44	; 0x2c
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003938:	2414      	movs	r4, #20
 800393a:	193b      	adds	r3, r7, r4
 800393c:	0018      	movs	r0, r3
 800393e:	2314      	movs	r3, #20
 8003940:	001a      	movs	r2, r3
 8003942:	2100      	movs	r1, #0
 8003944:	f000 f896 	bl	8003a74 <memset>
  if(uartHandle->Instance==USART1)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a1d      	ldr	r2, [pc, #116]	; (80039c4 <HAL_UART_MspInit+0x94>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d133      	bne.n	80039ba <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003952:	4b1d      	ldr	r3, [pc, #116]	; (80039c8 <HAL_UART_MspInit+0x98>)
 8003954:	699a      	ldr	r2, [r3, #24]
 8003956:	4b1c      	ldr	r3, [pc, #112]	; (80039c8 <HAL_UART_MspInit+0x98>)
 8003958:	2180      	movs	r1, #128	; 0x80
 800395a:	01c9      	lsls	r1, r1, #7
 800395c:	430a      	orrs	r2, r1
 800395e:	619a      	str	r2, [r3, #24]
 8003960:	4b19      	ldr	r3, [pc, #100]	; (80039c8 <HAL_UART_MspInit+0x98>)
 8003962:	699a      	ldr	r2, [r3, #24]
 8003964:	2380      	movs	r3, #128	; 0x80
 8003966:	01db      	lsls	r3, r3, #7
 8003968:	4013      	ands	r3, r2
 800396a:	613b      	str	r3, [r7, #16]
 800396c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800396e:	4b16      	ldr	r3, [pc, #88]	; (80039c8 <HAL_UART_MspInit+0x98>)
 8003970:	695a      	ldr	r2, [r3, #20]
 8003972:	4b15      	ldr	r3, [pc, #84]	; (80039c8 <HAL_UART_MspInit+0x98>)
 8003974:	2180      	movs	r1, #128	; 0x80
 8003976:	0289      	lsls	r1, r1, #10
 8003978:	430a      	orrs	r2, r1
 800397a:	615a      	str	r2, [r3, #20]
 800397c:	4b12      	ldr	r3, [pc, #72]	; (80039c8 <HAL_UART_MspInit+0x98>)
 800397e:	695a      	ldr	r2, [r3, #20]
 8003980:	2380      	movs	r3, #128	; 0x80
 8003982:	029b      	lsls	r3, r3, #10
 8003984:	4013      	ands	r3, r2
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800398a:	193b      	adds	r3, r7, r4
 800398c:	22c0      	movs	r2, #192	; 0xc0
 800398e:	00d2      	lsls	r2, r2, #3
 8003990:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003992:	0021      	movs	r1, r4
 8003994:	187b      	adds	r3, r7, r1
 8003996:	2202      	movs	r2, #2
 8003998:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800399a:	187b      	adds	r3, r7, r1
 800399c:	2200      	movs	r2, #0
 800399e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039a0:	187b      	adds	r3, r7, r1
 80039a2:	2203      	movs	r2, #3
 80039a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80039a6:	187b      	adds	r3, r7, r1
 80039a8:	2201      	movs	r2, #1
 80039aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ac:	187a      	adds	r2, r7, r1
 80039ae:	2390      	movs	r3, #144	; 0x90
 80039b0:	05db      	lsls	r3, r3, #23
 80039b2:	0011      	movs	r1, r2
 80039b4:	0018      	movs	r0, r3
 80039b6:	f7fd f983 	bl	8000cc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80039ba:	46c0      	nop			; (mov r8, r8)
 80039bc:	46bd      	mov	sp, r7
 80039be:	b00b      	add	sp, #44	; 0x2c
 80039c0:	bd90      	pop	{r4, r7, pc}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	40013800 	.word	0x40013800
 80039c8:	40021000 	.word	0x40021000

080039cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80039cc:	480d      	ldr	r0, [pc, #52]	; (8003a04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80039ce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80039d0:	480d      	ldr	r0, [pc, #52]	; (8003a08 <LoopForever+0x6>)
  ldr r1, =_edata
 80039d2:	490e      	ldr	r1, [pc, #56]	; (8003a0c <LoopForever+0xa>)
  ldr r2, =_sidata
 80039d4:	4a0e      	ldr	r2, [pc, #56]	; (8003a10 <LoopForever+0xe>)
  movs r3, #0
 80039d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039d8:	e002      	b.n	80039e0 <LoopCopyDataInit>

080039da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039de:	3304      	adds	r3, #4

080039e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039e4:	d3f9      	bcc.n	80039da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039e6:	4a0b      	ldr	r2, [pc, #44]	; (8003a14 <LoopForever+0x12>)
  ldr r4, =_ebss
 80039e8:	4c0b      	ldr	r4, [pc, #44]	; (8003a18 <LoopForever+0x16>)
  movs r3, #0
 80039ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039ec:	e001      	b.n	80039f2 <LoopFillZerobss>

080039ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039f0:	3204      	adds	r2, #4

080039f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039f4:	d3fb      	bcc.n	80039ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80039f6:	f7ff ff15 	bl	8003824 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80039fa:	f000 f817 	bl	8003a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80039fe:	f7ff fc63 	bl	80032c8 <main>

08003a02 <LoopForever>:

LoopForever:
    b LoopForever
 8003a02:	e7fe      	b.n	8003a02 <LoopForever>
  ldr   r0, =_estack
 8003a04:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a0c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003a10:	08004d90 	.word	0x08004d90
  ldr r2, =_sbss
 8003a14:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8003a18:	20000208 	.word	0x20000208

08003a1c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003a1c:	e7fe      	b.n	8003a1c <ADC1_IRQHandler>
	...

08003a20 <__errno>:
 8003a20:	4b01      	ldr	r3, [pc, #4]	; (8003a28 <__errno+0x8>)
 8003a22:	6818      	ldr	r0, [r3, #0]
 8003a24:	4770      	bx	lr
 8003a26:	46c0      	nop			; (mov r8, r8)
 8003a28:	20000010 	.word	0x20000010

08003a2c <__libc_init_array>:
 8003a2c:	b570      	push	{r4, r5, r6, lr}
 8003a2e:	2600      	movs	r6, #0
 8003a30:	4d0c      	ldr	r5, [pc, #48]	; (8003a64 <__libc_init_array+0x38>)
 8003a32:	4c0d      	ldr	r4, [pc, #52]	; (8003a68 <__libc_init_array+0x3c>)
 8003a34:	1b64      	subs	r4, r4, r5
 8003a36:	10a4      	asrs	r4, r4, #2
 8003a38:	42a6      	cmp	r6, r4
 8003a3a:	d109      	bne.n	8003a50 <__libc_init_array+0x24>
 8003a3c:	2600      	movs	r6, #0
 8003a3e:	f001 f8d7 	bl	8004bf0 <_init>
 8003a42:	4d0a      	ldr	r5, [pc, #40]	; (8003a6c <__libc_init_array+0x40>)
 8003a44:	4c0a      	ldr	r4, [pc, #40]	; (8003a70 <__libc_init_array+0x44>)
 8003a46:	1b64      	subs	r4, r4, r5
 8003a48:	10a4      	asrs	r4, r4, #2
 8003a4a:	42a6      	cmp	r6, r4
 8003a4c:	d105      	bne.n	8003a5a <__libc_init_array+0x2e>
 8003a4e:	bd70      	pop	{r4, r5, r6, pc}
 8003a50:	00b3      	lsls	r3, r6, #2
 8003a52:	58eb      	ldr	r3, [r5, r3]
 8003a54:	4798      	blx	r3
 8003a56:	3601      	adds	r6, #1
 8003a58:	e7ee      	b.n	8003a38 <__libc_init_array+0xc>
 8003a5a:	00b3      	lsls	r3, r6, #2
 8003a5c:	58eb      	ldr	r3, [r5, r3]
 8003a5e:	4798      	blx	r3
 8003a60:	3601      	adds	r6, #1
 8003a62:	e7f2      	b.n	8003a4a <__libc_init_array+0x1e>
 8003a64:	08004d88 	.word	0x08004d88
 8003a68:	08004d88 	.word	0x08004d88
 8003a6c:	08004d88 	.word	0x08004d88
 8003a70:	08004d8c 	.word	0x08004d8c

08003a74 <memset>:
 8003a74:	0003      	movs	r3, r0
 8003a76:	1882      	adds	r2, r0, r2
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d100      	bne.n	8003a7e <memset+0xa>
 8003a7c:	4770      	bx	lr
 8003a7e:	7019      	strb	r1, [r3, #0]
 8003a80:	3301      	adds	r3, #1
 8003a82:	e7f9      	b.n	8003a78 <memset+0x4>

08003a84 <srand>:
 8003a84:	4b11      	ldr	r3, [pc, #68]	; (8003acc <srand+0x48>)
 8003a86:	b570      	push	{r4, r5, r6, lr}
 8003a88:	681d      	ldr	r5, [r3, #0]
 8003a8a:	0004      	movs	r4, r0
 8003a8c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d116      	bne.n	8003ac0 <srand+0x3c>
 8003a92:	2018      	movs	r0, #24
 8003a94:	f000 f892 	bl	8003bbc <malloc>
 8003a98:	1e02      	subs	r2, r0, #0
 8003a9a:	63a8      	str	r0, [r5, #56]	; 0x38
 8003a9c:	d104      	bne.n	8003aa8 <srand+0x24>
 8003a9e:	2142      	movs	r1, #66	; 0x42
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <srand+0x4c>)
 8003aa2:	480c      	ldr	r0, [pc, #48]	; (8003ad4 <srand+0x50>)
 8003aa4:	f000 f85c 	bl	8003b60 <__assert_func>
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	; (8003ad8 <srand+0x54>)
 8003aaa:	2100      	movs	r1, #0
 8003aac:	6003      	str	r3, [r0, #0]
 8003aae:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <srand+0x58>)
 8003ab0:	6043      	str	r3, [r0, #4]
 8003ab2:	4b0b      	ldr	r3, [pc, #44]	; (8003ae0 <srand+0x5c>)
 8003ab4:	6083      	str	r3, [r0, #8]
 8003ab6:	230b      	movs	r3, #11
 8003ab8:	8183      	strh	r3, [r0, #12]
 8003aba:	2001      	movs	r0, #1
 8003abc:	6110      	str	r0, [r2, #16]
 8003abe:	6151      	str	r1, [r2, #20]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003ac4:	611c      	str	r4, [r3, #16]
 8003ac6:	615a      	str	r2, [r3, #20]
 8003ac8:	bd70      	pop	{r4, r5, r6, pc}
 8003aca:	46c0      	nop			; (mov r8, r8)
 8003acc:	20000010 	.word	0x20000010
 8003ad0:	08004c44 	.word	0x08004c44
 8003ad4:	08004c5b 	.word	0x08004c5b
 8003ad8:	abcd330e 	.word	0xabcd330e
 8003adc:	e66d1234 	.word	0xe66d1234
 8003ae0:	0005deec 	.word	0x0005deec

08003ae4 <rand>:
 8003ae4:	4b16      	ldr	r3, [pc, #88]	; (8003b40 <rand+0x5c>)
 8003ae6:	b510      	push	{r4, lr}
 8003ae8:	681c      	ldr	r4, [r3, #0]
 8003aea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d116      	bne.n	8003b1e <rand+0x3a>
 8003af0:	2018      	movs	r0, #24
 8003af2:	f000 f863 	bl	8003bbc <malloc>
 8003af6:	1e02      	subs	r2, r0, #0
 8003af8:	63a0      	str	r0, [r4, #56]	; 0x38
 8003afa:	d104      	bne.n	8003b06 <rand+0x22>
 8003afc:	214e      	movs	r1, #78	; 0x4e
 8003afe:	4b11      	ldr	r3, [pc, #68]	; (8003b44 <rand+0x60>)
 8003b00:	4811      	ldr	r0, [pc, #68]	; (8003b48 <rand+0x64>)
 8003b02:	f000 f82d 	bl	8003b60 <__assert_func>
 8003b06:	4b11      	ldr	r3, [pc, #68]	; (8003b4c <rand+0x68>)
 8003b08:	2100      	movs	r1, #0
 8003b0a:	6003      	str	r3, [r0, #0]
 8003b0c:	4b10      	ldr	r3, [pc, #64]	; (8003b50 <rand+0x6c>)
 8003b0e:	6043      	str	r3, [r0, #4]
 8003b10:	4b10      	ldr	r3, [pc, #64]	; (8003b54 <rand+0x70>)
 8003b12:	6083      	str	r3, [r0, #8]
 8003b14:	230b      	movs	r3, #11
 8003b16:	8183      	strh	r3, [r0, #12]
 8003b18:	2001      	movs	r0, #1
 8003b1a:	6110      	str	r0, [r2, #16]
 8003b1c:	6151      	str	r1, [r2, #20]
 8003b1e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8003b20:	4a0d      	ldr	r2, [pc, #52]	; (8003b58 <rand+0x74>)
 8003b22:	6920      	ldr	r0, [r4, #16]
 8003b24:	6961      	ldr	r1, [r4, #20]
 8003b26:	4b0d      	ldr	r3, [pc, #52]	; (8003b5c <rand+0x78>)
 8003b28:	f7fc fb84 	bl	8000234 <__aeabi_lmul>
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	2300      	movs	r3, #0
 8003b30:	1880      	adds	r0, r0, r2
 8003b32:	4159      	adcs	r1, r3
 8003b34:	6120      	str	r0, [r4, #16]
 8003b36:	6161      	str	r1, [r4, #20]
 8003b38:	0048      	lsls	r0, r1, #1
 8003b3a:	0840      	lsrs	r0, r0, #1
 8003b3c:	bd10      	pop	{r4, pc}
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	20000010 	.word	0x20000010
 8003b44:	08004c44 	.word	0x08004c44
 8003b48:	08004c5b 	.word	0x08004c5b
 8003b4c:	abcd330e 	.word	0xabcd330e
 8003b50:	e66d1234 	.word	0xe66d1234
 8003b54:	0005deec 	.word	0x0005deec
 8003b58:	4c957f2d 	.word	0x4c957f2d
 8003b5c:	5851f42d 	.word	0x5851f42d

08003b60 <__assert_func>:
 8003b60:	b530      	push	{r4, r5, lr}
 8003b62:	0014      	movs	r4, r2
 8003b64:	001a      	movs	r2, r3
 8003b66:	4b09      	ldr	r3, [pc, #36]	; (8003b8c <__assert_func+0x2c>)
 8003b68:	0005      	movs	r5, r0
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	b085      	sub	sp, #20
 8003b6e:	68d8      	ldr	r0, [r3, #12]
 8003b70:	4b07      	ldr	r3, [pc, #28]	; (8003b90 <__assert_func+0x30>)
 8003b72:	2c00      	cmp	r4, #0
 8003b74:	d101      	bne.n	8003b7a <__assert_func+0x1a>
 8003b76:	4b07      	ldr	r3, [pc, #28]	; (8003b94 <__assert_func+0x34>)
 8003b78:	001c      	movs	r4, r3
 8003b7a:	9301      	str	r3, [sp, #4]
 8003b7c:	9100      	str	r1, [sp, #0]
 8003b7e:	002b      	movs	r3, r5
 8003b80:	4905      	ldr	r1, [pc, #20]	; (8003b98 <__assert_func+0x38>)
 8003b82:	9402      	str	r4, [sp, #8]
 8003b84:	f000 f80a 	bl	8003b9c <fiprintf>
 8003b88:	f000 fcc8 	bl	800451c <abort>
 8003b8c:	20000010 	.word	0x20000010
 8003b90:	08004cb6 	.word	0x08004cb6
 8003b94:	08004cf1 	.word	0x08004cf1
 8003b98:	08004cc3 	.word	0x08004cc3

08003b9c <fiprintf>:
 8003b9c:	b40e      	push	{r1, r2, r3}
 8003b9e:	b503      	push	{r0, r1, lr}
 8003ba0:	0001      	movs	r1, r0
 8003ba2:	ab03      	add	r3, sp, #12
 8003ba4:	4804      	ldr	r0, [pc, #16]	; (8003bb8 <fiprintf+0x1c>)
 8003ba6:	cb04      	ldmia	r3!, {r2}
 8003ba8:	6800      	ldr	r0, [r0, #0]
 8003baa:	9301      	str	r3, [sp, #4]
 8003bac:	f000 f91a 	bl	8003de4 <_vfiprintf_r>
 8003bb0:	b002      	add	sp, #8
 8003bb2:	bc08      	pop	{r3}
 8003bb4:	b003      	add	sp, #12
 8003bb6:	4718      	bx	r3
 8003bb8:	20000010 	.word	0x20000010

08003bbc <malloc>:
 8003bbc:	b510      	push	{r4, lr}
 8003bbe:	4b03      	ldr	r3, [pc, #12]	; (8003bcc <malloc+0x10>)
 8003bc0:	0001      	movs	r1, r0
 8003bc2:	6818      	ldr	r0, [r3, #0]
 8003bc4:	f000 f870 	bl	8003ca8 <_malloc_r>
 8003bc8:	bd10      	pop	{r4, pc}
 8003bca:	46c0      	nop			; (mov r8, r8)
 8003bcc:	20000010 	.word	0x20000010

08003bd0 <_free_r>:
 8003bd0:	b570      	push	{r4, r5, r6, lr}
 8003bd2:	0005      	movs	r5, r0
 8003bd4:	2900      	cmp	r1, #0
 8003bd6:	d010      	beq.n	8003bfa <_free_r+0x2a>
 8003bd8:	1f0c      	subs	r4, r1, #4
 8003bda:	6823      	ldr	r3, [r4, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	da00      	bge.n	8003be2 <_free_r+0x12>
 8003be0:	18e4      	adds	r4, r4, r3
 8003be2:	0028      	movs	r0, r5
 8003be4:	f000 feec 	bl	80049c0 <__malloc_lock>
 8003be8:	4a1d      	ldr	r2, [pc, #116]	; (8003c60 <_free_r+0x90>)
 8003bea:	6813      	ldr	r3, [r2, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d105      	bne.n	8003bfc <_free_r+0x2c>
 8003bf0:	6063      	str	r3, [r4, #4]
 8003bf2:	6014      	str	r4, [r2, #0]
 8003bf4:	0028      	movs	r0, r5
 8003bf6:	f000 feeb 	bl	80049d0 <__malloc_unlock>
 8003bfa:	bd70      	pop	{r4, r5, r6, pc}
 8003bfc:	42a3      	cmp	r3, r4
 8003bfe:	d908      	bls.n	8003c12 <_free_r+0x42>
 8003c00:	6821      	ldr	r1, [r4, #0]
 8003c02:	1860      	adds	r0, r4, r1
 8003c04:	4283      	cmp	r3, r0
 8003c06:	d1f3      	bne.n	8003bf0 <_free_r+0x20>
 8003c08:	6818      	ldr	r0, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	1841      	adds	r1, r0, r1
 8003c0e:	6021      	str	r1, [r4, #0]
 8003c10:	e7ee      	b.n	8003bf0 <_free_r+0x20>
 8003c12:	001a      	movs	r2, r3
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <_free_r+0x4e>
 8003c1a:	42a3      	cmp	r3, r4
 8003c1c:	d9f9      	bls.n	8003c12 <_free_r+0x42>
 8003c1e:	6811      	ldr	r1, [r2, #0]
 8003c20:	1850      	adds	r0, r2, r1
 8003c22:	42a0      	cmp	r0, r4
 8003c24:	d10b      	bne.n	8003c3e <_free_r+0x6e>
 8003c26:	6820      	ldr	r0, [r4, #0]
 8003c28:	1809      	adds	r1, r1, r0
 8003c2a:	1850      	adds	r0, r2, r1
 8003c2c:	6011      	str	r1, [r2, #0]
 8003c2e:	4283      	cmp	r3, r0
 8003c30:	d1e0      	bne.n	8003bf4 <_free_r+0x24>
 8003c32:	6818      	ldr	r0, [r3, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	1841      	adds	r1, r0, r1
 8003c38:	6011      	str	r1, [r2, #0]
 8003c3a:	6053      	str	r3, [r2, #4]
 8003c3c:	e7da      	b.n	8003bf4 <_free_r+0x24>
 8003c3e:	42a0      	cmp	r0, r4
 8003c40:	d902      	bls.n	8003c48 <_free_r+0x78>
 8003c42:	230c      	movs	r3, #12
 8003c44:	602b      	str	r3, [r5, #0]
 8003c46:	e7d5      	b.n	8003bf4 <_free_r+0x24>
 8003c48:	6821      	ldr	r1, [r4, #0]
 8003c4a:	1860      	adds	r0, r4, r1
 8003c4c:	4283      	cmp	r3, r0
 8003c4e:	d103      	bne.n	8003c58 <_free_r+0x88>
 8003c50:	6818      	ldr	r0, [r3, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	1841      	adds	r1, r0, r1
 8003c56:	6021      	str	r1, [r4, #0]
 8003c58:	6063      	str	r3, [r4, #4]
 8003c5a:	6054      	str	r4, [r2, #4]
 8003c5c:	e7ca      	b.n	8003bf4 <_free_r+0x24>
 8003c5e:	46c0      	nop			; (mov r8, r8)
 8003c60:	200001f8 	.word	0x200001f8

08003c64 <sbrk_aligned>:
 8003c64:	b570      	push	{r4, r5, r6, lr}
 8003c66:	4e0f      	ldr	r6, [pc, #60]	; (8003ca4 <sbrk_aligned+0x40>)
 8003c68:	000d      	movs	r5, r1
 8003c6a:	6831      	ldr	r1, [r6, #0]
 8003c6c:	0004      	movs	r4, r0
 8003c6e:	2900      	cmp	r1, #0
 8003c70:	d102      	bne.n	8003c78 <sbrk_aligned+0x14>
 8003c72:	f000 fb73 	bl	800435c <_sbrk_r>
 8003c76:	6030      	str	r0, [r6, #0]
 8003c78:	0029      	movs	r1, r5
 8003c7a:	0020      	movs	r0, r4
 8003c7c:	f000 fb6e 	bl	800435c <_sbrk_r>
 8003c80:	1c43      	adds	r3, r0, #1
 8003c82:	d00a      	beq.n	8003c9a <sbrk_aligned+0x36>
 8003c84:	2303      	movs	r3, #3
 8003c86:	1cc5      	adds	r5, r0, #3
 8003c88:	439d      	bics	r5, r3
 8003c8a:	42a8      	cmp	r0, r5
 8003c8c:	d007      	beq.n	8003c9e <sbrk_aligned+0x3a>
 8003c8e:	1a29      	subs	r1, r5, r0
 8003c90:	0020      	movs	r0, r4
 8003c92:	f000 fb63 	bl	800435c <_sbrk_r>
 8003c96:	1c43      	adds	r3, r0, #1
 8003c98:	d101      	bne.n	8003c9e <sbrk_aligned+0x3a>
 8003c9a:	2501      	movs	r5, #1
 8003c9c:	426d      	negs	r5, r5
 8003c9e:	0028      	movs	r0, r5
 8003ca0:	bd70      	pop	{r4, r5, r6, pc}
 8003ca2:	46c0      	nop			; (mov r8, r8)
 8003ca4:	200001fc 	.word	0x200001fc

08003ca8 <_malloc_r>:
 8003ca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003caa:	2203      	movs	r2, #3
 8003cac:	1ccb      	adds	r3, r1, #3
 8003cae:	4393      	bics	r3, r2
 8003cb0:	3308      	adds	r3, #8
 8003cb2:	0006      	movs	r6, r0
 8003cb4:	001f      	movs	r7, r3
 8003cb6:	2b0c      	cmp	r3, #12
 8003cb8:	d232      	bcs.n	8003d20 <_malloc_r+0x78>
 8003cba:	270c      	movs	r7, #12
 8003cbc:	42b9      	cmp	r1, r7
 8003cbe:	d831      	bhi.n	8003d24 <_malloc_r+0x7c>
 8003cc0:	0030      	movs	r0, r6
 8003cc2:	f000 fe7d 	bl	80049c0 <__malloc_lock>
 8003cc6:	4d32      	ldr	r5, [pc, #200]	; (8003d90 <_malloc_r+0xe8>)
 8003cc8:	682b      	ldr	r3, [r5, #0]
 8003cca:	001c      	movs	r4, r3
 8003ccc:	2c00      	cmp	r4, #0
 8003cce:	d12e      	bne.n	8003d2e <_malloc_r+0x86>
 8003cd0:	0039      	movs	r1, r7
 8003cd2:	0030      	movs	r0, r6
 8003cd4:	f7ff ffc6 	bl	8003c64 <sbrk_aligned>
 8003cd8:	0004      	movs	r4, r0
 8003cda:	1c43      	adds	r3, r0, #1
 8003cdc:	d11e      	bne.n	8003d1c <_malloc_r+0x74>
 8003cde:	682c      	ldr	r4, [r5, #0]
 8003ce0:	0025      	movs	r5, r4
 8003ce2:	2d00      	cmp	r5, #0
 8003ce4:	d14a      	bne.n	8003d7c <_malloc_r+0xd4>
 8003ce6:	6823      	ldr	r3, [r4, #0]
 8003ce8:	0029      	movs	r1, r5
 8003cea:	18e3      	adds	r3, r4, r3
 8003cec:	0030      	movs	r0, r6
 8003cee:	9301      	str	r3, [sp, #4]
 8003cf0:	f000 fb34 	bl	800435c <_sbrk_r>
 8003cf4:	9b01      	ldr	r3, [sp, #4]
 8003cf6:	4283      	cmp	r3, r0
 8003cf8:	d143      	bne.n	8003d82 <_malloc_r+0xda>
 8003cfa:	6823      	ldr	r3, [r4, #0]
 8003cfc:	3703      	adds	r7, #3
 8003cfe:	1aff      	subs	r7, r7, r3
 8003d00:	2303      	movs	r3, #3
 8003d02:	439f      	bics	r7, r3
 8003d04:	3708      	adds	r7, #8
 8003d06:	2f0c      	cmp	r7, #12
 8003d08:	d200      	bcs.n	8003d0c <_malloc_r+0x64>
 8003d0a:	270c      	movs	r7, #12
 8003d0c:	0039      	movs	r1, r7
 8003d0e:	0030      	movs	r0, r6
 8003d10:	f7ff ffa8 	bl	8003c64 <sbrk_aligned>
 8003d14:	1c43      	adds	r3, r0, #1
 8003d16:	d034      	beq.n	8003d82 <_malloc_r+0xda>
 8003d18:	6823      	ldr	r3, [r4, #0]
 8003d1a:	19df      	adds	r7, r3, r7
 8003d1c:	6027      	str	r7, [r4, #0]
 8003d1e:	e013      	b.n	8003d48 <_malloc_r+0xa0>
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	dacb      	bge.n	8003cbc <_malloc_r+0x14>
 8003d24:	230c      	movs	r3, #12
 8003d26:	2500      	movs	r5, #0
 8003d28:	6033      	str	r3, [r6, #0]
 8003d2a:	0028      	movs	r0, r5
 8003d2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003d2e:	6822      	ldr	r2, [r4, #0]
 8003d30:	1bd1      	subs	r1, r2, r7
 8003d32:	d420      	bmi.n	8003d76 <_malloc_r+0xce>
 8003d34:	290b      	cmp	r1, #11
 8003d36:	d917      	bls.n	8003d68 <_malloc_r+0xc0>
 8003d38:	19e2      	adds	r2, r4, r7
 8003d3a:	6027      	str	r7, [r4, #0]
 8003d3c:	42a3      	cmp	r3, r4
 8003d3e:	d111      	bne.n	8003d64 <_malloc_r+0xbc>
 8003d40:	602a      	str	r2, [r5, #0]
 8003d42:	6863      	ldr	r3, [r4, #4]
 8003d44:	6011      	str	r1, [r2, #0]
 8003d46:	6053      	str	r3, [r2, #4]
 8003d48:	0030      	movs	r0, r6
 8003d4a:	0025      	movs	r5, r4
 8003d4c:	f000 fe40 	bl	80049d0 <__malloc_unlock>
 8003d50:	2207      	movs	r2, #7
 8003d52:	350b      	adds	r5, #11
 8003d54:	1d23      	adds	r3, r4, #4
 8003d56:	4395      	bics	r5, r2
 8003d58:	1aea      	subs	r2, r5, r3
 8003d5a:	429d      	cmp	r5, r3
 8003d5c:	d0e5      	beq.n	8003d2a <_malloc_r+0x82>
 8003d5e:	1b5b      	subs	r3, r3, r5
 8003d60:	50a3      	str	r3, [r4, r2]
 8003d62:	e7e2      	b.n	8003d2a <_malloc_r+0x82>
 8003d64:	605a      	str	r2, [r3, #4]
 8003d66:	e7ec      	b.n	8003d42 <_malloc_r+0x9a>
 8003d68:	6862      	ldr	r2, [r4, #4]
 8003d6a:	42a3      	cmp	r3, r4
 8003d6c:	d101      	bne.n	8003d72 <_malloc_r+0xca>
 8003d6e:	602a      	str	r2, [r5, #0]
 8003d70:	e7ea      	b.n	8003d48 <_malloc_r+0xa0>
 8003d72:	605a      	str	r2, [r3, #4]
 8003d74:	e7e8      	b.n	8003d48 <_malloc_r+0xa0>
 8003d76:	0023      	movs	r3, r4
 8003d78:	6864      	ldr	r4, [r4, #4]
 8003d7a:	e7a7      	b.n	8003ccc <_malloc_r+0x24>
 8003d7c:	002c      	movs	r4, r5
 8003d7e:	686d      	ldr	r5, [r5, #4]
 8003d80:	e7af      	b.n	8003ce2 <_malloc_r+0x3a>
 8003d82:	230c      	movs	r3, #12
 8003d84:	0030      	movs	r0, r6
 8003d86:	6033      	str	r3, [r6, #0]
 8003d88:	f000 fe22 	bl	80049d0 <__malloc_unlock>
 8003d8c:	e7cd      	b.n	8003d2a <_malloc_r+0x82>
 8003d8e:	46c0      	nop			; (mov r8, r8)
 8003d90:	200001f8 	.word	0x200001f8

08003d94 <__sfputc_r>:
 8003d94:	6893      	ldr	r3, [r2, #8]
 8003d96:	b510      	push	{r4, lr}
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	6093      	str	r3, [r2, #8]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	da04      	bge.n	8003daa <__sfputc_r+0x16>
 8003da0:	6994      	ldr	r4, [r2, #24]
 8003da2:	42a3      	cmp	r3, r4
 8003da4:	db07      	blt.n	8003db6 <__sfputc_r+0x22>
 8003da6:	290a      	cmp	r1, #10
 8003da8:	d005      	beq.n	8003db6 <__sfputc_r+0x22>
 8003daa:	6813      	ldr	r3, [r2, #0]
 8003dac:	1c58      	adds	r0, r3, #1
 8003dae:	6010      	str	r0, [r2, #0]
 8003db0:	7019      	strb	r1, [r3, #0]
 8003db2:	0008      	movs	r0, r1
 8003db4:	bd10      	pop	{r4, pc}
 8003db6:	f000 fae3 	bl	8004380 <__swbuf_r>
 8003dba:	0001      	movs	r1, r0
 8003dbc:	e7f9      	b.n	8003db2 <__sfputc_r+0x1e>

08003dbe <__sfputs_r>:
 8003dbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc0:	0006      	movs	r6, r0
 8003dc2:	000f      	movs	r7, r1
 8003dc4:	0014      	movs	r4, r2
 8003dc6:	18d5      	adds	r5, r2, r3
 8003dc8:	42ac      	cmp	r4, r5
 8003dca:	d101      	bne.n	8003dd0 <__sfputs_r+0x12>
 8003dcc:	2000      	movs	r0, #0
 8003dce:	e007      	b.n	8003de0 <__sfputs_r+0x22>
 8003dd0:	7821      	ldrb	r1, [r4, #0]
 8003dd2:	003a      	movs	r2, r7
 8003dd4:	0030      	movs	r0, r6
 8003dd6:	f7ff ffdd 	bl	8003d94 <__sfputc_r>
 8003dda:	3401      	adds	r4, #1
 8003ddc:	1c43      	adds	r3, r0, #1
 8003dde:	d1f3      	bne.n	8003dc8 <__sfputs_r+0xa>
 8003de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003de4 <_vfiprintf_r>:
 8003de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003de6:	b0a1      	sub	sp, #132	; 0x84
 8003de8:	0006      	movs	r6, r0
 8003dea:	000c      	movs	r4, r1
 8003dec:	001f      	movs	r7, r3
 8003dee:	9203      	str	r2, [sp, #12]
 8003df0:	2800      	cmp	r0, #0
 8003df2:	d004      	beq.n	8003dfe <_vfiprintf_r+0x1a>
 8003df4:	6983      	ldr	r3, [r0, #24]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <_vfiprintf_r+0x1a>
 8003dfa:	f000 fcc5 	bl	8004788 <__sinit>
 8003dfe:	4b8e      	ldr	r3, [pc, #568]	; (8004038 <_vfiprintf_r+0x254>)
 8003e00:	429c      	cmp	r4, r3
 8003e02:	d11c      	bne.n	8003e3e <_vfiprintf_r+0x5a>
 8003e04:	6874      	ldr	r4, [r6, #4]
 8003e06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e08:	07db      	lsls	r3, r3, #31
 8003e0a:	d405      	bmi.n	8003e18 <_vfiprintf_r+0x34>
 8003e0c:	89a3      	ldrh	r3, [r4, #12]
 8003e0e:	059b      	lsls	r3, r3, #22
 8003e10:	d402      	bmi.n	8003e18 <_vfiprintf_r+0x34>
 8003e12:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e14:	f000 fd59 	bl	80048ca <__retarget_lock_acquire_recursive>
 8003e18:	89a3      	ldrh	r3, [r4, #12]
 8003e1a:	071b      	lsls	r3, r3, #28
 8003e1c:	d502      	bpl.n	8003e24 <_vfiprintf_r+0x40>
 8003e1e:	6923      	ldr	r3, [r4, #16]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d11d      	bne.n	8003e60 <_vfiprintf_r+0x7c>
 8003e24:	0021      	movs	r1, r4
 8003e26:	0030      	movs	r0, r6
 8003e28:	f000 fb00 	bl	800442c <__swsetup_r>
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	d017      	beq.n	8003e60 <_vfiprintf_r+0x7c>
 8003e30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e32:	07db      	lsls	r3, r3, #31
 8003e34:	d50d      	bpl.n	8003e52 <_vfiprintf_r+0x6e>
 8003e36:	2001      	movs	r0, #1
 8003e38:	4240      	negs	r0, r0
 8003e3a:	b021      	add	sp, #132	; 0x84
 8003e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e3e:	4b7f      	ldr	r3, [pc, #508]	; (800403c <_vfiprintf_r+0x258>)
 8003e40:	429c      	cmp	r4, r3
 8003e42:	d101      	bne.n	8003e48 <_vfiprintf_r+0x64>
 8003e44:	68b4      	ldr	r4, [r6, #8]
 8003e46:	e7de      	b.n	8003e06 <_vfiprintf_r+0x22>
 8003e48:	4b7d      	ldr	r3, [pc, #500]	; (8004040 <_vfiprintf_r+0x25c>)
 8003e4a:	429c      	cmp	r4, r3
 8003e4c:	d1db      	bne.n	8003e06 <_vfiprintf_r+0x22>
 8003e4e:	68f4      	ldr	r4, [r6, #12]
 8003e50:	e7d9      	b.n	8003e06 <_vfiprintf_r+0x22>
 8003e52:	89a3      	ldrh	r3, [r4, #12]
 8003e54:	059b      	lsls	r3, r3, #22
 8003e56:	d4ee      	bmi.n	8003e36 <_vfiprintf_r+0x52>
 8003e58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e5a:	f000 fd37 	bl	80048cc <__retarget_lock_release_recursive>
 8003e5e:	e7ea      	b.n	8003e36 <_vfiprintf_r+0x52>
 8003e60:	2300      	movs	r3, #0
 8003e62:	ad08      	add	r5, sp, #32
 8003e64:	616b      	str	r3, [r5, #20]
 8003e66:	3320      	adds	r3, #32
 8003e68:	766b      	strb	r3, [r5, #25]
 8003e6a:	3310      	adds	r3, #16
 8003e6c:	76ab      	strb	r3, [r5, #26]
 8003e6e:	9707      	str	r7, [sp, #28]
 8003e70:	9f03      	ldr	r7, [sp, #12]
 8003e72:	783b      	ldrb	r3, [r7, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <_vfiprintf_r+0x98>
 8003e78:	2b25      	cmp	r3, #37	; 0x25
 8003e7a:	d14e      	bne.n	8003f1a <_vfiprintf_r+0x136>
 8003e7c:	9b03      	ldr	r3, [sp, #12]
 8003e7e:	1afb      	subs	r3, r7, r3
 8003e80:	9305      	str	r3, [sp, #20]
 8003e82:	9b03      	ldr	r3, [sp, #12]
 8003e84:	429f      	cmp	r7, r3
 8003e86:	d00d      	beq.n	8003ea4 <_vfiprintf_r+0xc0>
 8003e88:	9b05      	ldr	r3, [sp, #20]
 8003e8a:	0021      	movs	r1, r4
 8003e8c:	0030      	movs	r0, r6
 8003e8e:	9a03      	ldr	r2, [sp, #12]
 8003e90:	f7ff ff95 	bl	8003dbe <__sfputs_r>
 8003e94:	1c43      	adds	r3, r0, #1
 8003e96:	d100      	bne.n	8003e9a <_vfiprintf_r+0xb6>
 8003e98:	e0b5      	b.n	8004006 <_vfiprintf_r+0x222>
 8003e9a:	696a      	ldr	r2, [r5, #20]
 8003e9c:	9b05      	ldr	r3, [sp, #20]
 8003e9e:	4694      	mov	ip, r2
 8003ea0:	4463      	add	r3, ip
 8003ea2:	616b      	str	r3, [r5, #20]
 8003ea4:	783b      	ldrb	r3, [r7, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d100      	bne.n	8003eac <_vfiprintf_r+0xc8>
 8003eaa:	e0ac      	b.n	8004006 <_vfiprintf_r+0x222>
 8003eac:	2201      	movs	r2, #1
 8003eae:	1c7b      	adds	r3, r7, #1
 8003eb0:	9303      	str	r3, [sp, #12]
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	4252      	negs	r2, r2
 8003eb6:	606a      	str	r2, [r5, #4]
 8003eb8:	a904      	add	r1, sp, #16
 8003eba:	3254      	adds	r2, #84	; 0x54
 8003ebc:	1852      	adds	r2, r2, r1
 8003ebe:	602b      	str	r3, [r5, #0]
 8003ec0:	60eb      	str	r3, [r5, #12]
 8003ec2:	60ab      	str	r3, [r5, #8]
 8003ec4:	7013      	strb	r3, [r2, #0]
 8003ec6:	65ab      	str	r3, [r5, #88]	; 0x58
 8003ec8:	9b03      	ldr	r3, [sp, #12]
 8003eca:	2205      	movs	r2, #5
 8003ecc:	7819      	ldrb	r1, [r3, #0]
 8003ece:	485d      	ldr	r0, [pc, #372]	; (8004044 <_vfiprintf_r+0x260>)
 8003ed0:	f000 fd6a 	bl	80049a8 <memchr>
 8003ed4:	9b03      	ldr	r3, [sp, #12]
 8003ed6:	1c5f      	adds	r7, r3, #1
 8003ed8:	2800      	cmp	r0, #0
 8003eda:	d120      	bne.n	8003f1e <_vfiprintf_r+0x13a>
 8003edc:	682a      	ldr	r2, [r5, #0]
 8003ede:	06d3      	lsls	r3, r2, #27
 8003ee0:	d504      	bpl.n	8003eec <_vfiprintf_r+0x108>
 8003ee2:	2353      	movs	r3, #83	; 0x53
 8003ee4:	a904      	add	r1, sp, #16
 8003ee6:	185b      	adds	r3, r3, r1
 8003ee8:	2120      	movs	r1, #32
 8003eea:	7019      	strb	r1, [r3, #0]
 8003eec:	0713      	lsls	r3, r2, #28
 8003eee:	d504      	bpl.n	8003efa <_vfiprintf_r+0x116>
 8003ef0:	2353      	movs	r3, #83	; 0x53
 8003ef2:	a904      	add	r1, sp, #16
 8003ef4:	185b      	adds	r3, r3, r1
 8003ef6:	212b      	movs	r1, #43	; 0x2b
 8003ef8:	7019      	strb	r1, [r3, #0]
 8003efa:	9b03      	ldr	r3, [sp, #12]
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	2b2a      	cmp	r3, #42	; 0x2a
 8003f00:	d016      	beq.n	8003f30 <_vfiprintf_r+0x14c>
 8003f02:	2100      	movs	r1, #0
 8003f04:	68eb      	ldr	r3, [r5, #12]
 8003f06:	9f03      	ldr	r7, [sp, #12]
 8003f08:	783a      	ldrb	r2, [r7, #0]
 8003f0a:	1c78      	adds	r0, r7, #1
 8003f0c:	3a30      	subs	r2, #48	; 0x30
 8003f0e:	4684      	mov	ip, r0
 8003f10:	2a09      	cmp	r2, #9
 8003f12:	d94f      	bls.n	8003fb4 <_vfiprintf_r+0x1d0>
 8003f14:	2900      	cmp	r1, #0
 8003f16:	d111      	bne.n	8003f3c <_vfiprintf_r+0x158>
 8003f18:	e017      	b.n	8003f4a <_vfiprintf_r+0x166>
 8003f1a:	3701      	adds	r7, #1
 8003f1c:	e7a9      	b.n	8003e72 <_vfiprintf_r+0x8e>
 8003f1e:	4b49      	ldr	r3, [pc, #292]	; (8004044 <_vfiprintf_r+0x260>)
 8003f20:	682a      	ldr	r2, [r5, #0]
 8003f22:	1ac0      	subs	r0, r0, r3
 8003f24:	2301      	movs	r3, #1
 8003f26:	4083      	lsls	r3, r0
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	602b      	str	r3, [r5, #0]
 8003f2c:	9703      	str	r7, [sp, #12]
 8003f2e:	e7cb      	b.n	8003ec8 <_vfiprintf_r+0xe4>
 8003f30:	9b07      	ldr	r3, [sp, #28]
 8003f32:	1d19      	adds	r1, r3, #4
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	9107      	str	r1, [sp, #28]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	db01      	blt.n	8003f40 <_vfiprintf_r+0x15c>
 8003f3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f3e:	e004      	b.n	8003f4a <_vfiprintf_r+0x166>
 8003f40:	425b      	negs	r3, r3
 8003f42:	60eb      	str	r3, [r5, #12]
 8003f44:	2302      	movs	r3, #2
 8003f46:	4313      	orrs	r3, r2
 8003f48:	602b      	str	r3, [r5, #0]
 8003f4a:	783b      	ldrb	r3, [r7, #0]
 8003f4c:	2b2e      	cmp	r3, #46	; 0x2e
 8003f4e:	d10a      	bne.n	8003f66 <_vfiprintf_r+0x182>
 8003f50:	787b      	ldrb	r3, [r7, #1]
 8003f52:	2b2a      	cmp	r3, #42	; 0x2a
 8003f54:	d137      	bne.n	8003fc6 <_vfiprintf_r+0x1e2>
 8003f56:	9b07      	ldr	r3, [sp, #28]
 8003f58:	3702      	adds	r7, #2
 8003f5a:	1d1a      	adds	r2, r3, #4
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	9207      	str	r2, [sp, #28]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	db2d      	blt.n	8003fc0 <_vfiprintf_r+0x1dc>
 8003f64:	9309      	str	r3, [sp, #36]	; 0x24
 8003f66:	2203      	movs	r2, #3
 8003f68:	7839      	ldrb	r1, [r7, #0]
 8003f6a:	4837      	ldr	r0, [pc, #220]	; (8004048 <_vfiprintf_r+0x264>)
 8003f6c:	f000 fd1c 	bl	80049a8 <memchr>
 8003f70:	2800      	cmp	r0, #0
 8003f72:	d007      	beq.n	8003f84 <_vfiprintf_r+0x1a0>
 8003f74:	4b34      	ldr	r3, [pc, #208]	; (8004048 <_vfiprintf_r+0x264>)
 8003f76:	682a      	ldr	r2, [r5, #0]
 8003f78:	1ac0      	subs	r0, r0, r3
 8003f7a:	2340      	movs	r3, #64	; 0x40
 8003f7c:	4083      	lsls	r3, r0
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	3701      	adds	r7, #1
 8003f82:	602b      	str	r3, [r5, #0]
 8003f84:	7839      	ldrb	r1, [r7, #0]
 8003f86:	1c7b      	adds	r3, r7, #1
 8003f88:	2206      	movs	r2, #6
 8003f8a:	4830      	ldr	r0, [pc, #192]	; (800404c <_vfiprintf_r+0x268>)
 8003f8c:	9303      	str	r3, [sp, #12]
 8003f8e:	7629      	strb	r1, [r5, #24]
 8003f90:	f000 fd0a 	bl	80049a8 <memchr>
 8003f94:	2800      	cmp	r0, #0
 8003f96:	d045      	beq.n	8004024 <_vfiprintf_r+0x240>
 8003f98:	4b2d      	ldr	r3, [pc, #180]	; (8004050 <_vfiprintf_r+0x26c>)
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d127      	bne.n	8003fee <_vfiprintf_r+0x20a>
 8003f9e:	2207      	movs	r2, #7
 8003fa0:	9b07      	ldr	r3, [sp, #28]
 8003fa2:	3307      	adds	r3, #7
 8003fa4:	4393      	bics	r3, r2
 8003fa6:	3308      	adds	r3, #8
 8003fa8:	9307      	str	r3, [sp, #28]
 8003faa:	696b      	ldr	r3, [r5, #20]
 8003fac:	9a04      	ldr	r2, [sp, #16]
 8003fae:	189b      	adds	r3, r3, r2
 8003fb0:	616b      	str	r3, [r5, #20]
 8003fb2:	e75d      	b.n	8003e70 <_vfiprintf_r+0x8c>
 8003fb4:	210a      	movs	r1, #10
 8003fb6:	434b      	muls	r3, r1
 8003fb8:	4667      	mov	r7, ip
 8003fba:	189b      	adds	r3, r3, r2
 8003fbc:	3909      	subs	r1, #9
 8003fbe:	e7a3      	b.n	8003f08 <_vfiprintf_r+0x124>
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	425b      	negs	r3, r3
 8003fc4:	e7ce      	b.n	8003f64 <_vfiprintf_r+0x180>
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	001a      	movs	r2, r3
 8003fca:	3701      	adds	r7, #1
 8003fcc:	606b      	str	r3, [r5, #4]
 8003fce:	7839      	ldrb	r1, [r7, #0]
 8003fd0:	1c78      	adds	r0, r7, #1
 8003fd2:	3930      	subs	r1, #48	; 0x30
 8003fd4:	4684      	mov	ip, r0
 8003fd6:	2909      	cmp	r1, #9
 8003fd8:	d903      	bls.n	8003fe2 <_vfiprintf_r+0x1fe>
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0c3      	beq.n	8003f66 <_vfiprintf_r+0x182>
 8003fde:	9209      	str	r2, [sp, #36]	; 0x24
 8003fe0:	e7c1      	b.n	8003f66 <_vfiprintf_r+0x182>
 8003fe2:	230a      	movs	r3, #10
 8003fe4:	435a      	muls	r2, r3
 8003fe6:	4667      	mov	r7, ip
 8003fe8:	1852      	adds	r2, r2, r1
 8003fea:	3b09      	subs	r3, #9
 8003fec:	e7ef      	b.n	8003fce <_vfiprintf_r+0x1ea>
 8003fee:	ab07      	add	r3, sp, #28
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	0022      	movs	r2, r4
 8003ff4:	0029      	movs	r1, r5
 8003ff6:	0030      	movs	r0, r6
 8003ff8:	4b16      	ldr	r3, [pc, #88]	; (8004054 <_vfiprintf_r+0x270>)
 8003ffa:	e000      	b.n	8003ffe <_vfiprintf_r+0x21a>
 8003ffc:	bf00      	nop
 8003ffe:	9004      	str	r0, [sp, #16]
 8004000:	9b04      	ldr	r3, [sp, #16]
 8004002:	3301      	adds	r3, #1
 8004004:	d1d1      	bne.n	8003faa <_vfiprintf_r+0x1c6>
 8004006:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004008:	07db      	lsls	r3, r3, #31
 800400a:	d405      	bmi.n	8004018 <_vfiprintf_r+0x234>
 800400c:	89a3      	ldrh	r3, [r4, #12]
 800400e:	059b      	lsls	r3, r3, #22
 8004010:	d402      	bmi.n	8004018 <_vfiprintf_r+0x234>
 8004012:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004014:	f000 fc5a 	bl	80048cc <__retarget_lock_release_recursive>
 8004018:	89a3      	ldrh	r3, [r4, #12]
 800401a:	065b      	lsls	r3, r3, #25
 800401c:	d500      	bpl.n	8004020 <_vfiprintf_r+0x23c>
 800401e:	e70a      	b.n	8003e36 <_vfiprintf_r+0x52>
 8004020:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004022:	e70a      	b.n	8003e3a <_vfiprintf_r+0x56>
 8004024:	ab07      	add	r3, sp, #28
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	0022      	movs	r2, r4
 800402a:	0029      	movs	r1, r5
 800402c:	0030      	movs	r0, r6
 800402e:	4b09      	ldr	r3, [pc, #36]	; (8004054 <_vfiprintf_r+0x270>)
 8004030:	f000 f882 	bl	8004138 <_printf_i>
 8004034:	e7e3      	b.n	8003ffe <_vfiprintf_r+0x21a>
 8004036:	46c0      	nop			; (mov r8, r8)
 8004038:	08004d48 	.word	0x08004d48
 800403c:	08004d68 	.word	0x08004d68
 8004040:	08004d28 	.word	0x08004d28
 8004044:	08004cf2 	.word	0x08004cf2
 8004048:	08004cf8 	.word	0x08004cf8
 800404c:	08004cfc 	.word	0x08004cfc
 8004050:	00000000 	.word	0x00000000
 8004054:	08003dbf 	.word	0x08003dbf

08004058 <_printf_common>:
 8004058:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800405a:	0015      	movs	r5, r2
 800405c:	9301      	str	r3, [sp, #4]
 800405e:	688a      	ldr	r2, [r1, #8]
 8004060:	690b      	ldr	r3, [r1, #16]
 8004062:	000c      	movs	r4, r1
 8004064:	9000      	str	r0, [sp, #0]
 8004066:	4293      	cmp	r3, r2
 8004068:	da00      	bge.n	800406c <_printf_common+0x14>
 800406a:	0013      	movs	r3, r2
 800406c:	0022      	movs	r2, r4
 800406e:	602b      	str	r3, [r5, #0]
 8004070:	3243      	adds	r2, #67	; 0x43
 8004072:	7812      	ldrb	r2, [r2, #0]
 8004074:	2a00      	cmp	r2, #0
 8004076:	d001      	beq.n	800407c <_printf_common+0x24>
 8004078:	3301      	adds	r3, #1
 800407a:	602b      	str	r3, [r5, #0]
 800407c:	6823      	ldr	r3, [r4, #0]
 800407e:	069b      	lsls	r3, r3, #26
 8004080:	d502      	bpl.n	8004088 <_printf_common+0x30>
 8004082:	682b      	ldr	r3, [r5, #0]
 8004084:	3302      	adds	r3, #2
 8004086:	602b      	str	r3, [r5, #0]
 8004088:	6822      	ldr	r2, [r4, #0]
 800408a:	2306      	movs	r3, #6
 800408c:	0017      	movs	r7, r2
 800408e:	401f      	ands	r7, r3
 8004090:	421a      	tst	r2, r3
 8004092:	d027      	beq.n	80040e4 <_printf_common+0x8c>
 8004094:	0023      	movs	r3, r4
 8004096:	3343      	adds	r3, #67	; 0x43
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	1e5a      	subs	r2, r3, #1
 800409c:	4193      	sbcs	r3, r2
 800409e:	6822      	ldr	r2, [r4, #0]
 80040a0:	0692      	lsls	r2, r2, #26
 80040a2:	d430      	bmi.n	8004106 <_printf_common+0xae>
 80040a4:	0022      	movs	r2, r4
 80040a6:	9901      	ldr	r1, [sp, #4]
 80040a8:	9800      	ldr	r0, [sp, #0]
 80040aa:	9e08      	ldr	r6, [sp, #32]
 80040ac:	3243      	adds	r2, #67	; 0x43
 80040ae:	47b0      	blx	r6
 80040b0:	1c43      	adds	r3, r0, #1
 80040b2:	d025      	beq.n	8004100 <_printf_common+0xa8>
 80040b4:	2306      	movs	r3, #6
 80040b6:	6820      	ldr	r0, [r4, #0]
 80040b8:	682a      	ldr	r2, [r5, #0]
 80040ba:	68e1      	ldr	r1, [r4, #12]
 80040bc:	2500      	movs	r5, #0
 80040be:	4003      	ands	r3, r0
 80040c0:	2b04      	cmp	r3, #4
 80040c2:	d103      	bne.n	80040cc <_printf_common+0x74>
 80040c4:	1a8d      	subs	r5, r1, r2
 80040c6:	43eb      	mvns	r3, r5
 80040c8:	17db      	asrs	r3, r3, #31
 80040ca:	401d      	ands	r5, r3
 80040cc:	68a3      	ldr	r3, [r4, #8]
 80040ce:	6922      	ldr	r2, [r4, #16]
 80040d0:	4293      	cmp	r3, r2
 80040d2:	dd01      	ble.n	80040d8 <_printf_common+0x80>
 80040d4:	1a9b      	subs	r3, r3, r2
 80040d6:	18ed      	adds	r5, r5, r3
 80040d8:	2700      	movs	r7, #0
 80040da:	42bd      	cmp	r5, r7
 80040dc:	d120      	bne.n	8004120 <_printf_common+0xc8>
 80040de:	2000      	movs	r0, #0
 80040e0:	e010      	b.n	8004104 <_printf_common+0xac>
 80040e2:	3701      	adds	r7, #1
 80040e4:	68e3      	ldr	r3, [r4, #12]
 80040e6:	682a      	ldr	r2, [r5, #0]
 80040e8:	1a9b      	subs	r3, r3, r2
 80040ea:	42bb      	cmp	r3, r7
 80040ec:	ddd2      	ble.n	8004094 <_printf_common+0x3c>
 80040ee:	0022      	movs	r2, r4
 80040f0:	2301      	movs	r3, #1
 80040f2:	9901      	ldr	r1, [sp, #4]
 80040f4:	9800      	ldr	r0, [sp, #0]
 80040f6:	9e08      	ldr	r6, [sp, #32]
 80040f8:	3219      	adds	r2, #25
 80040fa:	47b0      	blx	r6
 80040fc:	1c43      	adds	r3, r0, #1
 80040fe:	d1f0      	bne.n	80040e2 <_printf_common+0x8a>
 8004100:	2001      	movs	r0, #1
 8004102:	4240      	negs	r0, r0
 8004104:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004106:	2030      	movs	r0, #48	; 0x30
 8004108:	18e1      	adds	r1, r4, r3
 800410a:	3143      	adds	r1, #67	; 0x43
 800410c:	7008      	strb	r0, [r1, #0]
 800410e:	0021      	movs	r1, r4
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	3145      	adds	r1, #69	; 0x45
 8004114:	7809      	ldrb	r1, [r1, #0]
 8004116:	18a2      	adds	r2, r4, r2
 8004118:	3243      	adds	r2, #67	; 0x43
 800411a:	3302      	adds	r3, #2
 800411c:	7011      	strb	r1, [r2, #0]
 800411e:	e7c1      	b.n	80040a4 <_printf_common+0x4c>
 8004120:	0022      	movs	r2, r4
 8004122:	2301      	movs	r3, #1
 8004124:	9901      	ldr	r1, [sp, #4]
 8004126:	9800      	ldr	r0, [sp, #0]
 8004128:	9e08      	ldr	r6, [sp, #32]
 800412a:	321a      	adds	r2, #26
 800412c:	47b0      	blx	r6
 800412e:	1c43      	adds	r3, r0, #1
 8004130:	d0e6      	beq.n	8004100 <_printf_common+0xa8>
 8004132:	3701      	adds	r7, #1
 8004134:	e7d1      	b.n	80040da <_printf_common+0x82>
	...

08004138 <_printf_i>:
 8004138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800413a:	b08b      	sub	sp, #44	; 0x2c
 800413c:	9206      	str	r2, [sp, #24]
 800413e:	000a      	movs	r2, r1
 8004140:	3243      	adds	r2, #67	; 0x43
 8004142:	9307      	str	r3, [sp, #28]
 8004144:	9005      	str	r0, [sp, #20]
 8004146:	9204      	str	r2, [sp, #16]
 8004148:	7e0a      	ldrb	r2, [r1, #24]
 800414a:	000c      	movs	r4, r1
 800414c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800414e:	2a78      	cmp	r2, #120	; 0x78
 8004150:	d807      	bhi.n	8004162 <_printf_i+0x2a>
 8004152:	2a62      	cmp	r2, #98	; 0x62
 8004154:	d809      	bhi.n	800416a <_printf_i+0x32>
 8004156:	2a00      	cmp	r2, #0
 8004158:	d100      	bne.n	800415c <_printf_i+0x24>
 800415a:	e0c1      	b.n	80042e0 <_printf_i+0x1a8>
 800415c:	2a58      	cmp	r2, #88	; 0x58
 800415e:	d100      	bne.n	8004162 <_printf_i+0x2a>
 8004160:	e08c      	b.n	800427c <_printf_i+0x144>
 8004162:	0026      	movs	r6, r4
 8004164:	3642      	adds	r6, #66	; 0x42
 8004166:	7032      	strb	r2, [r6, #0]
 8004168:	e022      	b.n	80041b0 <_printf_i+0x78>
 800416a:	0010      	movs	r0, r2
 800416c:	3863      	subs	r0, #99	; 0x63
 800416e:	2815      	cmp	r0, #21
 8004170:	d8f7      	bhi.n	8004162 <_printf_i+0x2a>
 8004172:	f7fb ffc9 	bl	8000108 <__gnu_thumb1_case_shi>
 8004176:	0016      	.short	0x0016
 8004178:	fff6001f 	.word	0xfff6001f
 800417c:	fff6fff6 	.word	0xfff6fff6
 8004180:	001ffff6 	.word	0x001ffff6
 8004184:	fff6fff6 	.word	0xfff6fff6
 8004188:	fff6fff6 	.word	0xfff6fff6
 800418c:	003600a8 	.word	0x003600a8
 8004190:	fff6009a 	.word	0xfff6009a
 8004194:	00b9fff6 	.word	0x00b9fff6
 8004198:	0036fff6 	.word	0x0036fff6
 800419c:	fff6fff6 	.word	0xfff6fff6
 80041a0:	009e      	.short	0x009e
 80041a2:	0026      	movs	r6, r4
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	3642      	adds	r6, #66	; 0x42
 80041a8:	1d11      	adds	r1, r2, #4
 80041aa:	6019      	str	r1, [r3, #0]
 80041ac:	6813      	ldr	r3, [r2, #0]
 80041ae:	7033      	strb	r3, [r6, #0]
 80041b0:	2301      	movs	r3, #1
 80041b2:	e0a7      	b.n	8004304 <_printf_i+0x1cc>
 80041b4:	6808      	ldr	r0, [r1, #0]
 80041b6:	6819      	ldr	r1, [r3, #0]
 80041b8:	1d0a      	adds	r2, r1, #4
 80041ba:	0605      	lsls	r5, r0, #24
 80041bc:	d50b      	bpl.n	80041d6 <_printf_i+0x9e>
 80041be:	680d      	ldr	r5, [r1, #0]
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	2d00      	cmp	r5, #0
 80041c4:	da03      	bge.n	80041ce <_printf_i+0x96>
 80041c6:	232d      	movs	r3, #45	; 0x2d
 80041c8:	9a04      	ldr	r2, [sp, #16]
 80041ca:	426d      	negs	r5, r5
 80041cc:	7013      	strb	r3, [r2, #0]
 80041ce:	4b61      	ldr	r3, [pc, #388]	; (8004354 <_printf_i+0x21c>)
 80041d0:	270a      	movs	r7, #10
 80041d2:	9303      	str	r3, [sp, #12]
 80041d4:	e01b      	b.n	800420e <_printf_i+0xd6>
 80041d6:	680d      	ldr	r5, [r1, #0]
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	0641      	lsls	r1, r0, #25
 80041dc:	d5f1      	bpl.n	80041c2 <_printf_i+0x8a>
 80041de:	b22d      	sxth	r5, r5
 80041e0:	e7ef      	b.n	80041c2 <_printf_i+0x8a>
 80041e2:	680d      	ldr	r5, [r1, #0]
 80041e4:	6819      	ldr	r1, [r3, #0]
 80041e6:	1d08      	adds	r0, r1, #4
 80041e8:	6018      	str	r0, [r3, #0]
 80041ea:	062e      	lsls	r6, r5, #24
 80041ec:	d501      	bpl.n	80041f2 <_printf_i+0xba>
 80041ee:	680d      	ldr	r5, [r1, #0]
 80041f0:	e003      	b.n	80041fa <_printf_i+0xc2>
 80041f2:	066d      	lsls	r5, r5, #25
 80041f4:	d5fb      	bpl.n	80041ee <_printf_i+0xb6>
 80041f6:	680d      	ldr	r5, [r1, #0]
 80041f8:	b2ad      	uxth	r5, r5
 80041fa:	4b56      	ldr	r3, [pc, #344]	; (8004354 <_printf_i+0x21c>)
 80041fc:	2708      	movs	r7, #8
 80041fe:	9303      	str	r3, [sp, #12]
 8004200:	2a6f      	cmp	r2, #111	; 0x6f
 8004202:	d000      	beq.n	8004206 <_printf_i+0xce>
 8004204:	3702      	adds	r7, #2
 8004206:	0023      	movs	r3, r4
 8004208:	2200      	movs	r2, #0
 800420a:	3343      	adds	r3, #67	; 0x43
 800420c:	701a      	strb	r2, [r3, #0]
 800420e:	6863      	ldr	r3, [r4, #4]
 8004210:	60a3      	str	r3, [r4, #8]
 8004212:	2b00      	cmp	r3, #0
 8004214:	db03      	blt.n	800421e <_printf_i+0xe6>
 8004216:	2204      	movs	r2, #4
 8004218:	6821      	ldr	r1, [r4, #0]
 800421a:	4391      	bics	r1, r2
 800421c:	6021      	str	r1, [r4, #0]
 800421e:	2d00      	cmp	r5, #0
 8004220:	d102      	bne.n	8004228 <_printf_i+0xf0>
 8004222:	9e04      	ldr	r6, [sp, #16]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00c      	beq.n	8004242 <_printf_i+0x10a>
 8004228:	9e04      	ldr	r6, [sp, #16]
 800422a:	0028      	movs	r0, r5
 800422c:	0039      	movs	r1, r7
 800422e:	f7fb fffb 	bl	8000228 <__aeabi_uidivmod>
 8004232:	9b03      	ldr	r3, [sp, #12]
 8004234:	3e01      	subs	r6, #1
 8004236:	5c5b      	ldrb	r3, [r3, r1]
 8004238:	7033      	strb	r3, [r6, #0]
 800423a:	002b      	movs	r3, r5
 800423c:	0005      	movs	r5, r0
 800423e:	429f      	cmp	r7, r3
 8004240:	d9f3      	bls.n	800422a <_printf_i+0xf2>
 8004242:	2f08      	cmp	r7, #8
 8004244:	d109      	bne.n	800425a <_printf_i+0x122>
 8004246:	6823      	ldr	r3, [r4, #0]
 8004248:	07db      	lsls	r3, r3, #31
 800424a:	d506      	bpl.n	800425a <_printf_i+0x122>
 800424c:	6863      	ldr	r3, [r4, #4]
 800424e:	6922      	ldr	r2, [r4, #16]
 8004250:	4293      	cmp	r3, r2
 8004252:	dc02      	bgt.n	800425a <_printf_i+0x122>
 8004254:	2330      	movs	r3, #48	; 0x30
 8004256:	3e01      	subs	r6, #1
 8004258:	7033      	strb	r3, [r6, #0]
 800425a:	9b04      	ldr	r3, [sp, #16]
 800425c:	1b9b      	subs	r3, r3, r6
 800425e:	6123      	str	r3, [r4, #16]
 8004260:	9b07      	ldr	r3, [sp, #28]
 8004262:	0021      	movs	r1, r4
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	9805      	ldr	r0, [sp, #20]
 8004268:	9b06      	ldr	r3, [sp, #24]
 800426a:	aa09      	add	r2, sp, #36	; 0x24
 800426c:	f7ff fef4 	bl	8004058 <_printf_common>
 8004270:	1c43      	adds	r3, r0, #1
 8004272:	d14c      	bne.n	800430e <_printf_i+0x1d6>
 8004274:	2001      	movs	r0, #1
 8004276:	4240      	negs	r0, r0
 8004278:	b00b      	add	sp, #44	; 0x2c
 800427a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800427c:	3145      	adds	r1, #69	; 0x45
 800427e:	700a      	strb	r2, [r1, #0]
 8004280:	4a34      	ldr	r2, [pc, #208]	; (8004354 <_printf_i+0x21c>)
 8004282:	9203      	str	r2, [sp, #12]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	6821      	ldr	r1, [r4, #0]
 8004288:	ca20      	ldmia	r2!, {r5}
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	0608      	lsls	r0, r1, #24
 800428e:	d516      	bpl.n	80042be <_printf_i+0x186>
 8004290:	07cb      	lsls	r3, r1, #31
 8004292:	d502      	bpl.n	800429a <_printf_i+0x162>
 8004294:	2320      	movs	r3, #32
 8004296:	4319      	orrs	r1, r3
 8004298:	6021      	str	r1, [r4, #0]
 800429a:	2710      	movs	r7, #16
 800429c:	2d00      	cmp	r5, #0
 800429e:	d1b2      	bne.n	8004206 <_printf_i+0xce>
 80042a0:	2320      	movs	r3, #32
 80042a2:	6822      	ldr	r2, [r4, #0]
 80042a4:	439a      	bics	r2, r3
 80042a6:	6022      	str	r2, [r4, #0]
 80042a8:	e7ad      	b.n	8004206 <_printf_i+0xce>
 80042aa:	2220      	movs	r2, #32
 80042ac:	6809      	ldr	r1, [r1, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	6022      	str	r2, [r4, #0]
 80042b2:	0022      	movs	r2, r4
 80042b4:	2178      	movs	r1, #120	; 0x78
 80042b6:	3245      	adds	r2, #69	; 0x45
 80042b8:	7011      	strb	r1, [r2, #0]
 80042ba:	4a27      	ldr	r2, [pc, #156]	; (8004358 <_printf_i+0x220>)
 80042bc:	e7e1      	b.n	8004282 <_printf_i+0x14a>
 80042be:	0648      	lsls	r0, r1, #25
 80042c0:	d5e6      	bpl.n	8004290 <_printf_i+0x158>
 80042c2:	b2ad      	uxth	r5, r5
 80042c4:	e7e4      	b.n	8004290 <_printf_i+0x158>
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	680d      	ldr	r5, [r1, #0]
 80042ca:	1d10      	adds	r0, r2, #4
 80042cc:	6949      	ldr	r1, [r1, #20]
 80042ce:	6018      	str	r0, [r3, #0]
 80042d0:	6813      	ldr	r3, [r2, #0]
 80042d2:	062e      	lsls	r6, r5, #24
 80042d4:	d501      	bpl.n	80042da <_printf_i+0x1a2>
 80042d6:	6019      	str	r1, [r3, #0]
 80042d8:	e002      	b.n	80042e0 <_printf_i+0x1a8>
 80042da:	066d      	lsls	r5, r5, #25
 80042dc:	d5fb      	bpl.n	80042d6 <_printf_i+0x19e>
 80042de:	8019      	strh	r1, [r3, #0]
 80042e0:	2300      	movs	r3, #0
 80042e2:	9e04      	ldr	r6, [sp, #16]
 80042e4:	6123      	str	r3, [r4, #16]
 80042e6:	e7bb      	b.n	8004260 <_printf_i+0x128>
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	1d11      	adds	r1, r2, #4
 80042ec:	6019      	str	r1, [r3, #0]
 80042ee:	6816      	ldr	r6, [r2, #0]
 80042f0:	2100      	movs	r1, #0
 80042f2:	0030      	movs	r0, r6
 80042f4:	6862      	ldr	r2, [r4, #4]
 80042f6:	f000 fb57 	bl	80049a8 <memchr>
 80042fa:	2800      	cmp	r0, #0
 80042fc:	d001      	beq.n	8004302 <_printf_i+0x1ca>
 80042fe:	1b80      	subs	r0, r0, r6
 8004300:	6060      	str	r0, [r4, #4]
 8004302:	6863      	ldr	r3, [r4, #4]
 8004304:	6123      	str	r3, [r4, #16]
 8004306:	2300      	movs	r3, #0
 8004308:	9a04      	ldr	r2, [sp, #16]
 800430a:	7013      	strb	r3, [r2, #0]
 800430c:	e7a8      	b.n	8004260 <_printf_i+0x128>
 800430e:	6923      	ldr	r3, [r4, #16]
 8004310:	0032      	movs	r2, r6
 8004312:	9906      	ldr	r1, [sp, #24]
 8004314:	9805      	ldr	r0, [sp, #20]
 8004316:	9d07      	ldr	r5, [sp, #28]
 8004318:	47a8      	blx	r5
 800431a:	1c43      	adds	r3, r0, #1
 800431c:	d0aa      	beq.n	8004274 <_printf_i+0x13c>
 800431e:	6823      	ldr	r3, [r4, #0]
 8004320:	079b      	lsls	r3, r3, #30
 8004322:	d415      	bmi.n	8004350 <_printf_i+0x218>
 8004324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004326:	68e0      	ldr	r0, [r4, #12]
 8004328:	4298      	cmp	r0, r3
 800432a:	daa5      	bge.n	8004278 <_printf_i+0x140>
 800432c:	0018      	movs	r0, r3
 800432e:	e7a3      	b.n	8004278 <_printf_i+0x140>
 8004330:	0022      	movs	r2, r4
 8004332:	2301      	movs	r3, #1
 8004334:	9906      	ldr	r1, [sp, #24]
 8004336:	9805      	ldr	r0, [sp, #20]
 8004338:	9e07      	ldr	r6, [sp, #28]
 800433a:	3219      	adds	r2, #25
 800433c:	47b0      	blx	r6
 800433e:	1c43      	adds	r3, r0, #1
 8004340:	d098      	beq.n	8004274 <_printf_i+0x13c>
 8004342:	3501      	adds	r5, #1
 8004344:	68e3      	ldr	r3, [r4, #12]
 8004346:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004348:	1a9b      	subs	r3, r3, r2
 800434a:	42ab      	cmp	r3, r5
 800434c:	dcf0      	bgt.n	8004330 <_printf_i+0x1f8>
 800434e:	e7e9      	b.n	8004324 <_printf_i+0x1ec>
 8004350:	2500      	movs	r5, #0
 8004352:	e7f7      	b.n	8004344 <_printf_i+0x20c>
 8004354:	08004d03 	.word	0x08004d03
 8004358:	08004d14 	.word	0x08004d14

0800435c <_sbrk_r>:
 800435c:	2300      	movs	r3, #0
 800435e:	b570      	push	{r4, r5, r6, lr}
 8004360:	4d06      	ldr	r5, [pc, #24]	; (800437c <_sbrk_r+0x20>)
 8004362:	0004      	movs	r4, r0
 8004364:	0008      	movs	r0, r1
 8004366:	602b      	str	r3, [r5, #0]
 8004368:	f7ff fa26 	bl	80037b8 <_sbrk>
 800436c:	1c43      	adds	r3, r0, #1
 800436e:	d103      	bne.n	8004378 <_sbrk_r+0x1c>
 8004370:	682b      	ldr	r3, [r5, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d000      	beq.n	8004378 <_sbrk_r+0x1c>
 8004376:	6023      	str	r3, [r4, #0]
 8004378:	bd70      	pop	{r4, r5, r6, pc}
 800437a:	46c0      	nop			; (mov r8, r8)
 800437c:	20000204 	.word	0x20000204

08004380 <__swbuf_r>:
 8004380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004382:	0005      	movs	r5, r0
 8004384:	000e      	movs	r6, r1
 8004386:	0014      	movs	r4, r2
 8004388:	2800      	cmp	r0, #0
 800438a:	d004      	beq.n	8004396 <__swbuf_r+0x16>
 800438c:	6983      	ldr	r3, [r0, #24]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <__swbuf_r+0x16>
 8004392:	f000 f9f9 	bl	8004788 <__sinit>
 8004396:	4b22      	ldr	r3, [pc, #136]	; (8004420 <__swbuf_r+0xa0>)
 8004398:	429c      	cmp	r4, r3
 800439a:	d12e      	bne.n	80043fa <__swbuf_r+0x7a>
 800439c:	686c      	ldr	r4, [r5, #4]
 800439e:	69a3      	ldr	r3, [r4, #24]
 80043a0:	60a3      	str	r3, [r4, #8]
 80043a2:	89a3      	ldrh	r3, [r4, #12]
 80043a4:	071b      	lsls	r3, r3, #28
 80043a6:	d532      	bpl.n	800440e <__swbuf_r+0x8e>
 80043a8:	6923      	ldr	r3, [r4, #16]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d02f      	beq.n	800440e <__swbuf_r+0x8e>
 80043ae:	6823      	ldr	r3, [r4, #0]
 80043b0:	6922      	ldr	r2, [r4, #16]
 80043b2:	b2f7      	uxtb	r7, r6
 80043b4:	1a98      	subs	r0, r3, r2
 80043b6:	6963      	ldr	r3, [r4, #20]
 80043b8:	b2f6      	uxtb	r6, r6
 80043ba:	4283      	cmp	r3, r0
 80043bc:	dc05      	bgt.n	80043ca <__swbuf_r+0x4a>
 80043be:	0021      	movs	r1, r4
 80043c0:	0028      	movs	r0, r5
 80043c2:	f000 f93f 	bl	8004644 <_fflush_r>
 80043c6:	2800      	cmp	r0, #0
 80043c8:	d127      	bne.n	800441a <__swbuf_r+0x9a>
 80043ca:	68a3      	ldr	r3, [r4, #8]
 80043cc:	3001      	adds	r0, #1
 80043ce:	3b01      	subs	r3, #1
 80043d0:	60a3      	str	r3, [r4, #8]
 80043d2:	6823      	ldr	r3, [r4, #0]
 80043d4:	1c5a      	adds	r2, r3, #1
 80043d6:	6022      	str	r2, [r4, #0]
 80043d8:	701f      	strb	r7, [r3, #0]
 80043da:	6963      	ldr	r3, [r4, #20]
 80043dc:	4283      	cmp	r3, r0
 80043de:	d004      	beq.n	80043ea <__swbuf_r+0x6a>
 80043e0:	89a3      	ldrh	r3, [r4, #12]
 80043e2:	07db      	lsls	r3, r3, #31
 80043e4:	d507      	bpl.n	80043f6 <__swbuf_r+0x76>
 80043e6:	2e0a      	cmp	r6, #10
 80043e8:	d105      	bne.n	80043f6 <__swbuf_r+0x76>
 80043ea:	0021      	movs	r1, r4
 80043ec:	0028      	movs	r0, r5
 80043ee:	f000 f929 	bl	8004644 <_fflush_r>
 80043f2:	2800      	cmp	r0, #0
 80043f4:	d111      	bne.n	800441a <__swbuf_r+0x9a>
 80043f6:	0030      	movs	r0, r6
 80043f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043fa:	4b0a      	ldr	r3, [pc, #40]	; (8004424 <__swbuf_r+0xa4>)
 80043fc:	429c      	cmp	r4, r3
 80043fe:	d101      	bne.n	8004404 <__swbuf_r+0x84>
 8004400:	68ac      	ldr	r4, [r5, #8]
 8004402:	e7cc      	b.n	800439e <__swbuf_r+0x1e>
 8004404:	4b08      	ldr	r3, [pc, #32]	; (8004428 <__swbuf_r+0xa8>)
 8004406:	429c      	cmp	r4, r3
 8004408:	d1c9      	bne.n	800439e <__swbuf_r+0x1e>
 800440a:	68ec      	ldr	r4, [r5, #12]
 800440c:	e7c7      	b.n	800439e <__swbuf_r+0x1e>
 800440e:	0021      	movs	r1, r4
 8004410:	0028      	movs	r0, r5
 8004412:	f000 f80b 	bl	800442c <__swsetup_r>
 8004416:	2800      	cmp	r0, #0
 8004418:	d0c9      	beq.n	80043ae <__swbuf_r+0x2e>
 800441a:	2601      	movs	r6, #1
 800441c:	4276      	negs	r6, r6
 800441e:	e7ea      	b.n	80043f6 <__swbuf_r+0x76>
 8004420:	08004d48 	.word	0x08004d48
 8004424:	08004d68 	.word	0x08004d68
 8004428:	08004d28 	.word	0x08004d28

0800442c <__swsetup_r>:
 800442c:	4b37      	ldr	r3, [pc, #220]	; (800450c <__swsetup_r+0xe0>)
 800442e:	b570      	push	{r4, r5, r6, lr}
 8004430:	681d      	ldr	r5, [r3, #0]
 8004432:	0006      	movs	r6, r0
 8004434:	000c      	movs	r4, r1
 8004436:	2d00      	cmp	r5, #0
 8004438:	d005      	beq.n	8004446 <__swsetup_r+0x1a>
 800443a:	69ab      	ldr	r3, [r5, #24]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d102      	bne.n	8004446 <__swsetup_r+0x1a>
 8004440:	0028      	movs	r0, r5
 8004442:	f000 f9a1 	bl	8004788 <__sinit>
 8004446:	4b32      	ldr	r3, [pc, #200]	; (8004510 <__swsetup_r+0xe4>)
 8004448:	429c      	cmp	r4, r3
 800444a:	d10f      	bne.n	800446c <__swsetup_r+0x40>
 800444c:	686c      	ldr	r4, [r5, #4]
 800444e:	230c      	movs	r3, #12
 8004450:	5ee2      	ldrsh	r2, [r4, r3]
 8004452:	b293      	uxth	r3, r2
 8004454:	0711      	lsls	r1, r2, #28
 8004456:	d42d      	bmi.n	80044b4 <__swsetup_r+0x88>
 8004458:	06d9      	lsls	r1, r3, #27
 800445a:	d411      	bmi.n	8004480 <__swsetup_r+0x54>
 800445c:	2309      	movs	r3, #9
 800445e:	2001      	movs	r0, #1
 8004460:	6033      	str	r3, [r6, #0]
 8004462:	3337      	adds	r3, #55	; 0x37
 8004464:	4313      	orrs	r3, r2
 8004466:	81a3      	strh	r3, [r4, #12]
 8004468:	4240      	negs	r0, r0
 800446a:	bd70      	pop	{r4, r5, r6, pc}
 800446c:	4b29      	ldr	r3, [pc, #164]	; (8004514 <__swsetup_r+0xe8>)
 800446e:	429c      	cmp	r4, r3
 8004470:	d101      	bne.n	8004476 <__swsetup_r+0x4a>
 8004472:	68ac      	ldr	r4, [r5, #8]
 8004474:	e7eb      	b.n	800444e <__swsetup_r+0x22>
 8004476:	4b28      	ldr	r3, [pc, #160]	; (8004518 <__swsetup_r+0xec>)
 8004478:	429c      	cmp	r4, r3
 800447a:	d1e8      	bne.n	800444e <__swsetup_r+0x22>
 800447c:	68ec      	ldr	r4, [r5, #12]
 800447e:	e7e6      	b.n	800444e <__swsetup_r+0x22>
 8004480:	075b      	lsls	r3, r3, #29
 8004482:	d513      	bpl.n	80044ac <__swsetup_r+0x80>
 8004484:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004486:	2900      	cmp	r1, #0
 8004488:	d008      	beq.n	800449c <__swsetup_r+0x70>
 800448a:	0023      	movs	r3, r4
 800448c:	3344      	adds	r3, #68	; 0x44
 800448e:	4299      	cmp	r1, r3
 8004490:	d002      	beq.n	8004498 <__swsetup_r+0x6c>
 8004492:	0030      	movs	r0, r6
 8004494:	f7ff fb9c 	bl	8003bd0 <_free_r>
 8004498:	2300      	movs	r3, #0
 800449a:	6363      	str	r3, [r4, #52]	; 0x34
 800449c:	2224      	movs	r2, #36	; 0x24
 800449e:	89a3      	ldrh	r3, [r4, #12]
 80044a0:	4393      	bics	r3, r2
 80044a2:	81a3      	strh	r3, [r4, #12]
 80044a4:	2300      	movs	r3, #0
 80044a6:	6063      	str	r3, [r4, #4]
 80044a8:	6923      	ldr	r3, [r4, #16]
 80044aa:	6023      	str	r3, [r4, #0]
 80044ac:	2308      	movs	r3, #8
 80044ae:	89a2      	ldrh	r2, [r4, #12]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	81a3      	strh	r3, [r4, #12]
 80044b4:	6923      	ldr	r3, [r4, #16]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10b      	bne.n	80044d2 <__swsetup_r+0xa6>
 80044ba:	21a0      	movs	r1, #160	; 0xa0
 80044bc:	2280      	movs	r2, #128	; 0x80
 80044be:	89a3      	ldrh	r3, [r4, #12]
 80044c0:	0089      	lsls	r1, r1, #2
 80044c2:	0092      	lsls	r2, r2, #2
 80044c4:	400b      	ands	r3, r1
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d003      	beq.n	80044d2 <__swsetup_r+0xa6>
 80044ca:	0021      	movs	r1, r4
 80044cc:	0030      	movs	r0, r6
 80044ce:	f000 fa27 	bl	8004920 <__smakebuf_r>
 80044d2:	220c      	movs	r2, #12
 80044d4:	5ea3      	ldrsh	r3, [r4, r2]
 80044d6:	2001      	movs	r0, #1
 80044d8:	001a      	movs	r2, r3
 80044da:	b299      	uxth	r1, r3
 80044dc:	4002      	ands	r2, r0
 80044de:	4203      	tst	r3, r0
 80044e0:	d00f      	beq.n	8004502 <__swsetup_r+0xd6>
 80044e2:	2200      	movs	r2, #0
 80044e4:	60a2      	str	r2, [r4, #8]
 80044e6:	6962      	ldr	r2, [r4, #20]
 80044e8:	4252      	negs	r2, r2
 80044ea:	61a2      	str	r2, [r4, #24]
 80044ec:	2000      	movs	r0, #0
 80044ee:	6922      	ldr	r2, [r4, #16]
 80044f0:	4282      	cmp	r2, r0
 80044f2:	d1ba      	bne.n	800446a <__swsetup_r+0x3e>
 80044f4:	060a      	lsls	r2, r1, #24
 80044f6:	d5b8      	bpl.n	800446a <__swsetup_r+0x3e>
 80044f8:	2240      	movs	r2, #64	; 0x40
 80044fa:	4313      	orrs	r3, r2
 80044fc:	81a3      	strh	r3, [r4, #12]
 80044fe:	3801      	subs	r0, #1
 8004500:	e7b3      	b.n	800446a <__swsetup_r+0x3e>
 8004502:	0788      	lsls	r0, r1, #30
 8004504:	d400      	bmi.n	8004508 <__swsetup_r+0xdc>
 8004506:	6962      	ldr	r2, [r4, #20]
 8004508:	60a2      	str	r2, [r4, #8]
 800450a:	e7ef      	b.n	80044ec <__swsetup_r+0xc0>
 800450c:	20000010 	.word	0x20000010
 8004510:	08004d48 	.word	0x08004d48
 8004514:	08004d68 	.word	0x08004d68
 8004518:	08004d28 	.word	0x08004d28

0800451c <abort>:
 800451c:	2006      	movs	r0, #6
 800451e:	b510      	push	{r4, lr}
 8004520:	f000 fa88 	bl	8004a34 <raise>
 8004524:	2001      	movs	r0, #1
 8004526:	f7ff f8d5 	bl	80036d4 <_exit>
	...

0800452c <__sflush_r>:
 800452c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800452e:	898b      	ldrh	r3, [r1, #12]
 8004530:	0005      	movs	r5, r0
 8004532:	000c      	movs	r4, r1
 8004534:	071a      	lsls	r2, r3, #28
 8004536:	d45f      	bmi.n	80045f8 <__sflush_r+0xcc>
 8004538:	684a      	ldr	r2, [r1, #4]
 800453a:	2a00      	cmp	r2, #0
 800453c:	dc04      	bgt.n	8004548 <__sflush_r+0x1c>
 800453e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004540:	2a00      	cmp	r2, #0
 8004542:	dc01      	bgt.n	8004548 <__sflush_r+0x1c>
 8004544:	2000      	movs	r0, #0
 8004546:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004548:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800454a:	2f00      	cmp	r7, #0
 800454c:	d0fa      	beq.n	8004544 <__sflush_r+0x18>
 800454e:	2200      	movs	r2, #0
 8004550:	2180      	movs	r1, #128	; 0x80
 8004552:	682e      	ldr	r6, [r5, #0]
 8004554:	602a      	str	r2, [r5, #0]
 8004556:	001a      	movs	r2, r3
 8004558:	0149      	lsls	r1, r1, #5
 800455a:	400a      	ands	r2, r1
 800455c:	420b      	tst	r3, r1
 800455e:	d034      	beq.n	80045ca <__sflush_r+0x9e>
 8004560:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004562:	89a3      	ldrh	r3, [r4, #12]
 8004564:	075b      	lsls	r3, r3, #29
 8004566:	d506      	bpl.n	8004576 <__sflush_r+0x4a>
 8004568:	6863      	ldr	r3, [r4, #4]
 800456a:	1ac0      	subs	r0, r0, r3
 800456c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <__sflush_r+0x4a>
 8004572:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004574:	1ac0      	subs	r0, r0, r3
 8004576:	0002      	movs	r2, r0
 8004578:	6a21      	ldr	r1, [r4, #32]
 800457a:	2300      	movs	r3, #0
 800457c:	0028      	movs	r0, r5
 800457e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004580:	47b8      	blx	r7
 8004582:	89a1      	ldrh	r1, [r4, #12]
 8004584:	1c43      	adds	r3, r0, #1
 8004586:	d106      	bne.n	8004596 <__sflush_r+0x6a>
 8004588:	682b      	ldr	r3, [r5, #0]
 800458a:	2b1d      	cmp	r3, #29
 800458c:	d831      	bhi.n	80045f2 <__sflush_r+0xc6>
 800458e:	4a2c      	ldr	r2, [pc, #176]	; (8004640 <__sflush_r+0x114>)
 8004590:	40da      	lsrs	r2, r3
 8004592:	07d3      	lsls	r3, r2, #31
 8004594:	d52d      	bpl.n	80045f2 <__sflush_r+0xc6>
 8004596:	2300      	movs	r3, #0
 8004598:	6063      	str	r3, [r4, #4]
 800459a:	6923      	ldr	r3, [r4, #16]
 800459c:	6023      	str	r3, [r4, #0]
 800459e:	04cb      	lsls	r3, r1, #19
 80045a0:	d505      	bpl.n	80045ae <__sflush_r+0x82>
 80045a2:	1c43      	adds	r3, r0, #1
 80045a4:	d102      	bne.n	80045ac <__sflush_r+0x80>
 80045a6:	682b      	ldr	r3, [r5, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d100      	bne.n	80045ae <__sflush_r+0x82>
 80045ac:	6560      	str	r0, [r4, #84]	; 0x54
 80045ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045b0:	602e      	str	r6, [r5, #0]
 80045b2:	2900      	cmp	r1, #0
 80045b4:	d0c6      	beq.n	8004544 <__sflush_r+0x18>
 80045b6:	0023      	movs	r3, r4
 80045b8:	3344      	adds	r3, #68	; 0x44
 80045ba:	4299      	cmp	r1, r3
 80045bc:	d002      	beq.n	80045c4 <__sflush_r+0x98>
 80045be:	0028      	movs	r0, r5
 80045c0:	f7ff fb06 	bl	8003bd0 <_free_r>
 80045c4:	2000      	movs	r0, #0
 80045c6:	6360      	str	r0, [r4, #52]	; 0x34
 80045c8:	e7bd      	b.n	8004546 <__sflush_r+0x1a>
 80045ca:	2301      	movs	r3, #1
 80045cc:	0028      	movs	r0, r5
 80045ce:	6a21      	ldr	r1, [r4, #32]
 80045d0:	47b8      	blx	r7
 80045d2:	1c43      	adds	r3, r0, #1
 80045d4:	d1c5      	bne.n	8004562 <__sflush_r+0x36>
 80045d6:	682b      	ldr	r3, [r5, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0c2      	beq.n	8004562 <__sflush_r+0x36>
 80045dc:	2b1d      	cmp	r3, #29
 80045de:	d001      	beq.n	80045e4 <__sflush_r+0xb8>
 80045e0:	2b16      	cmp	r3, #22
 80045e2:	d101      	bne.n	80045e8 <__sflush_r+0xbc>
 80045e4:	602e      	str	r6, [r5, #0]
 80045e6:	e7ad      	b.n	8004544 <__sflush_r+0x18>
 80045e8:	2340      	movs	r3, #64	; 0x40
 80045ea:	89a2      	ldrh	r2, [r4, #12]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	81a3      	strh	r3, [r4, #12]
 80045f0:	e7a9      	b.n	8004546 <__sflush_r+0x1a>
 80045f2:	2340      	movs	r3, #64	; 0x40
 80045f4:	430b      	orrs	r3, r1
 80045f6:	e7fa      	b.n	80045ee <__sflush_r+0xc2>
 80045f8:	690f      	ldr	r7, [r1, #16]
 80045fa:	2f00      	cmp	r7, #0
 80045fc:	d0a2      	beq.n	8004544 <__sflush_r+0x18>
 80045fe:	680a      	ldr	r2, [r1, #0]
 8004600:	600f      	str	r7, [r1, #0]
 8004602:	1bd2      	subs	r2, r2, r7
 8004604:	9201      	str	r2, [sp, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	079b      	lsls	r3, r3, #30
 800460a:	d100      	bne.n	800460e <__sflush_r+0xe2>
 800460c:	694a      	ldr	r2, [r1, #20]
 800460e:	60a2      	str	r2, [r4, #8]
 8004610:	9b01      	ldr	r3, [sp, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	dc00      	bgt.n	8004618 <__sflush_r+0xec>
 8004616:	e795      	b.n	8004544 <__sflush_r+0x18>
 8004618:	003a      	movs	r2, r7
 800461a:	0028      	movs	r0, r5
 800461c:	9b01      	ldr	r3, [sp, #4]
 800461e:	6a21      	ldr	r1, [r4, #32]
 8004620:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004622:	47b0      	blx	r6
 8004624:	2800      	cmp	r0, #0
 8004626:	dc06      	bgt.n	8004636 <__sflush_r+0x10a>
 8004628:	2340      	movs	r3, #64	; 0x40
 800462a:	2001      	movs	r0, #1
 800462c:	89a2      	ldrh	r2, [r4, #12]
 800462e:	4240      	negs	r0, r0
 8004630:	4313      	orrs	r3, r2
 8004632:	81a3      	strh	r3, [r4, #12]
 8004634:	e787      	b.n	8004546 <__sflush_r+0x1a>
 8004636:	9b01      	ldr	r3, [sp, #4]
 8004638:	183f      	adds	r7, r7, r0
 800463a:	1a1b      	subs	r3, r3, r0
 800463c:	9301      	str	r3, [sp, #4]
 800463e:	e7e7      	b.n	8004610 <__sflush_r+0xe4>
 8004640:	20400001 	.word	0x20400001

08004644 <_fflush_r>:
 8004644:	690b      	ldr	r3, [r1, #16]
 8004646:	b570      	push	{r4, r5, r6, lr}
 8004648:	0005      	movs	r5, r0
 800464a:	000c      	movs	r4, r1
 800464c:	2b00      	cmp	r3, #0
 800464e:	d102      	bne.n	8004656 <_fflush_r+0x12>
 8004650:	2500      	movs	r5, #0
 8004652:	0028      	movs	r0, r5
 8004654:	bd70      	pop	{r4, r5, r6, pc}
 8004656:	2800      	cmp	r0, #0
 8004658:	d004      	beq.n	8004664 <_fflush_r+0x20>
 800465a:	6983      	ldr	r3, [r0, #24]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <_fflush_r+0x20>
 8004660:	f000 f892 	bl	8004788 <__sinit>
 8004664:	4b14      	ldr	r3, [pc, #80]	; (80046b8 <_fflush_r+0x74>)
 8004666:	429c      	cmp	r4, r3
 8004668:	d11b      	bne.n	80046a2 <_fflush_r+0x5e>
 800466a:	686c      	ldr	r4, [r5, #4]
 800466c:	220c      	movs	r2, #12
 800466e:	5ea3      	ldrsh	r3, [r4, r2]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d0ed      	beq.n	8004650 <_fflush_r+0xc>
 8004674:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004676:	07d2      	lsls	r2, r2, #31
 8004678:	d404      	bmi.n	8004684 <_fflush_r+0x40>
 800467a:	059b      	lsls	r3, r3, #22
 800467c:	d402      	bmi.n	8004684 <_fflush_r+0x40>
 800467e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004680:	f000 f923 	bl	80048ca <__retarget_lock_acquire_recursive>
 8004684:	0028      	movs	r0, r5
 8004686:	0021      	movs	r1, r4
 8004688:	f7ff ff50 	bl	800452c <__sflush_r>
 800468c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800468e:	0005      	movs	r5, r0
 8004690:	07db      	lsls	r3, r3, #31
 8004692:	d4de      	bmi.n	8004652 <_fflush_r+0xe>
 8004694:	89a3      	ldrh	r3, [r4, #12]
 8004696:	059b      	lsls	r3, r3, #22
 8004698:	d4db      	bmi.n	8004652 <_fflush_r+0xe>
 800469a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800469c:	f000 f916 	bl	80048cc <__retarget_lock_release_recursive>
 80046a0:	e7d7      	b.n	8004652 <_fflush_r+0xe>
 80046a2:	4b06      	ldr	r3, [pc, #24]	; (80046bc <_fflush_r+0x78>)
 80046a4:	429c      	cmp	r4, r3
 80046a6:	d101      	bne.n	80046ac <_fflush_r+0x68>
 80046a8:	68ac      	ldr	r4, [r5, #8]
 80046aa:	e7df      	b.n	800466c <_fflush_r+0x28>
 80046ac:	4b04      	ldr	r3, [pc, #16]	; (80046c0 <_fflush_r+0x7c>)
 80046ae:	429c      	cmp	r4, r3
 80046b0:	d1dc      	bne.n	800466c <_fflush_r+0x28>
 80046b2:	68ec      	ldr	r4, [r5, #12]
 80046b4:	e7da      	b.n	800466c <_fflush_r+0x28>
 80046b6:	46c0      	nop			; (mov r8, r8)
 80046b8:	08004d48 	.word	0x08004d48
 80046bc:	08004d68 	.word	0x08004d68
 80046c0:	08004d28 	.word	0x08004d28

080046c4 <std>:
 80046c4:	2300      	movs	r3, #0
 80046c6:	b510      	push	{r4, lr}
 80046c8:	0004      	movs	r4, r0
 80046ca:	6003      	str	r3, [r0, #0]
 80046cc:	6043      	str	r3, [r0, #4]
 80046ce:	6083      	str	r3, [r0, #8]
 80046d0:	8181      	strh	r1, [r0, #12]
 80046d2:	6643      	str	r3, [r0, #100]	; 0x64
 80046d4:	0019      	movs	r1, r3
 80046d6:	81c2      	strh	r2, [r0, #14]
 80046d8:	6103      	str	r3, [r0, #16]
 80046da:	6143      	str	r3, [r0, #20]
 80046dc:	6183      	str	r3, [r0, #24]
 80046de:	2208      	movs	r2, #8
 80046e0:	305c      	adds	r0, #92	; 0x5c
 80046e2:	f7ff f9c7 	bl	8003a74 <memset>
 80046e6:	4b05      	ldr	r3, [pc, #20]	; (80046fc <std+0x38>)
 80046e8:	6224      	str	r4, [r4, #32]
 80046ea:	6263      	str	r3, [r4, #36]	; 0x24
 80046ec:	4b04      	ldr	r3, [pc, #16]	; (8004700 <std+0x3c>)
 80046ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80046f0:	4b04      	ldr	r3, [pc, #16]	; (8004704 <std+0x40>)
 80046f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80046f4:	4b04      	ldr	r3, [pc, #16]	; (8004708 <std+0x44>)
 80046f6:	6323      	str	r3, [r4, #48]	; 0x30
 80046f8:	bd10      	pop	{r4, pc}
 80046fa:	46c0      	nop			; (mov r8, r8)
 80046fc:	08004a75 	.word	0x08004a75
 8004700:	08004a9d 	.word	0x08004a9d
 8004704:	08004ad5 	.word	0x08004ad5
 8004708:	08004b01 	.word	0x08004b01

0800470c <_cleanup_r>:
 800470c:	b510      	push	{r4, lr}
 800470e:	4902      	ldr	r1, [pc, #8]	; (8004718 <_cleanup_r+0xc>)
 8004710:	f000 f8ba 	bl	8004888 <_fwalk_reent>
 8004714:	bd10      	pop	{r4, pc}
 8004716:	46c0      	nop			; (mov r8, r8)
 8004718:	08004645 	.word	0x08004645

0800471c <__sfmoreglue>:
 800471c:	b570      	push	{r4, r5, r6, lr}
 800471e:	2568      	movs	r5, #104	; 0x68
 8004720:	1e4a      	subs	r2, r1, #1
 8004722:	4355      	muls	r5, r2
 8004724:	000e      	movs	r6, r1
 8004726:	0029      	movs	r1, r5
 8004728:	3174      	adds	r1, #116	; 0x74
 800472a:	f7ff fabd 	bl	8003ca8 <_malloc_r>
 800472e:	1e04      	subs	r4, r0, #0
 8004730:	d008      	beq.n	8004744 <__sfmoreglue+0x28>
 8004732:	2100      	movs	r1, #0
 8004734:	002a      	movs	r2, r5
 8004736:	6001      	str	r1, [r0, #0]
 8004738:	6046      	str	r6, [r0, #4]
 800473a:	300c      	adds	r0, #12
 800473c:	60a0      	str	r0, [r4, #8]
 800473e:	3268      	adds	r2, #104	; 0x68
 8004740:	f7ff f998 	bl	8003a74 <memset>
 8004744:	0020      	movs	r0, r4
 8004746:	bd70      	pop	{r4, r5, r6, pc}

08004748 <__sfp_lock_acquire>:
 8004748:	b510      	push	{r4, lr}
 800474a:	4802      	ldr	r0, [pc, #8]	; (8004754 <__sfp_lock_acquire+0xc>)
 800474c:	f000 f8bd 	bl	80048ca <__retarget_lock_acquire_recursive>
 8004750:	bd10      	pop	{r4, pc}
 8004752:	46c0      	nop			; (mov r8, r8)
 8004754:	20000201 	.word	0x20000201

08004758 <__sfp_lock_release>:
 8004758:	b510      	push	{r4, lr}
 800475a:	4802      	ldr	r0, [pc, #8]	; (8004764 <__sfp_lock_release+0xc>)
 800475c:	f000 f8b6 	bl	80048cc <__retarget_lock_release_recursive>
 8004760:	bd10      	pop	{r4, pc}
 8004762:	46c0      	nop			; (mov r8, r8)
 8004764:	20000201 	.word	0x20000201

08004768 <__sinit_lock_acquire>:
 8004768:	b510      	push	{r4, lr}
 800476a:	4802      	ldr	r0, [pc, #8]	; (8004774 <__sinit_lock_acquire+0xc>)
 800476c:	f000 f8ad 	bl	80048ca <__retarget_lock_acquire_recursive>
 8004770:	bd10      	pop	{r4, pc}
 8004772:	46c0      	nop			; (mov r8, r8)
 8004774:	20000202 	.word	0x20000202

08004778 <__sinit_lock_release>:
 8004778:	b510      	push	{r4, lr}
 800477a:	4802      	ldr	r0, [pc, #8]	; (8004784 <__sinit_lock_release+0xc>)
 800477c:	f000 f8a6 	bl	80048cc <__retarget_lock_release_recursive>
 8004780:	bd10      	pop	{r4, pc}
 8004782:	46c0      	nop			; (mov r8, r8)
 8004784:	20000202 	.word	0x20000202

08004788 <__sinit>:
 8004788:	b513      	push	{r0, r1, r4, lr}
 800478a:	0004      	movs	r4, r0
 800478c:	f7ff ffec 	bl	8004768 <__sinit_lock_acquire>
 8004790:	69a3      	ldr	r3, [r4, #24]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d002      	beq.n	800479c <__sinit+0x14>
 8004796:	f7ff ffef 	bl	8004778 <__sinit_lock_release>
 800479a:	bd13      	pop	{r0, r1, r4, pc}
 800479c:	64a3      	str	r3, [r4, #72]	; 0x48
 800479e:	64e3      	str	r3, [r4, #76]	; 0x4c
 80047a0:	6523      	str	r3, [r4, #80]	; 0x50
 80047a2:	4b13      	ldr	r3, [pc, #76]	; (80047f0 <__sinit+0x68>)
 80047a4:	4a13      	ldr	r2, [pc, #76]	; (80047f4 <__sinit+0x6c>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80047aa:	9301      	str	r3, [sp, #4]
 80047ac:	42a3      	cmp	r3, r4
 80047ae:	d101      	bne.n	80047b4 <__sinit+0x2c>
 80047b0:	2301      	movs	r3, #1
 80047b2:	61a3      	str	r3, [r4, #24]
 80047b4:	0020      	movs	r0, r4
 80047b6:	f000 f81f 	bl	80047f8 <__sfp>
 80047ba:	6060      	str	r0, [r4, #4]
 80047bc:	0020      	movs	r0, r4
 80047be:	f000 f81b 	bl	80047f8 <__sfp>
 80047c2:	60a0      	str	r0, [r4, #8]
 80047c4:	0020      	movs	r0, r4
 80047c6:	f000 f817 	bl	80047f8 <__sfp>
 80047ca:	2200      	movs	r2, #0
 80047cc:	2104      	movs	r1, #4
 80047ce:	60e0      	str	r0, [r4, #12]
 80047d0:	6860      	ldr	r0, [r4, #4]
 80047d2:	f7ff ff77 	bl	80046c4 <std>
 80047d6:	2201      	movs	r2, #1
 80047d8:	2109      	movs	r1, #9
 80047da:	68a0      	ldr	r0, [r4, #8]
 80047dc:	f7ff ff72 	bl	80046c4 <std>
 80047e0:	2202      	movs	r2, #2
 80047e2:	2112      	movs	r1, #18
 80047e4:	68e0      	ldr	r0, [r4, #12]
 80047e6:	f7ff ff6d 	bl	80046c4 <std>
 80047ea:	2301      	movs	r3, #1
 80047ec:	61a3      	str	r3, [r4, #24]
 80047ee:	e7d2      	b.n	8004796 <__sinit+0xe>
 80047f0:	08004c40 	.word	0x08004c40
 80047f4:	0800470d 	.word	0x0800470d

080047f8 <__sfp>:
 80047f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047fa:	0007      	movs	r7, r0
 80047fc:	f7ff ffa4 	bl	8004748 <__sfp_lock_acquire>
 8004800:	4b1f      	ldr	r3, [pc, #124]	; (8004880 <__sfp+0x88>)
 8004802:	681e      	ldr	r6, [r3, #0]
 8004804:	69b3      	ldr	r3, [r6, #24]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d102      	bne.n	8004810 <__sfp+0x18>
 800480a:	0030      	movs	r0, r6
 800480c:	f7ff ffbc 	bl	8004788 <__sinit>
 8004810:	3648      	adds	r6, #72	; 0x48
 8004812:	68b4      	ldr	r4, [r6, #8]
 8004814:	6873      	ldr	r3, [r6, #4]
 8004816:	3b01      	subs	r3, #1
 8004818:	d504      	bpl.n	8004824 <__sfp+0x2c>
 800481a:	6833      	ldr	r3, [r6, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d022      	beq.n	8004866 <__sfp+0x6e>
 8004820:	6836      	ldr	r6, [r6, #0]
 8004822:	e7f6      	b.n	8004812 <__sfp+0x1a>
 8004824:	220c      	movs	r2, #12
 8004826:	5ea5      	ldrsh	r5, [r4, r2]
 8004828:	2d00      	cmp	r5, #0
 800482a:	d11a      	bne.n	8004862 <__sfp+0x6a>
 800482c:	0020      	movs	r0, r4
 800482e:	4b15      	ldr	r3, [pc, #84]	; (8004884 <__sfp+0x8c>)
 8004830:	3058      	adds	r0, #88	; 0x58
 8004832:	60e3      	str	r3, [r4, #12]
 8004834:	6665      	str	r5, [r4, #100]	; 0x64
 8004836:	f000 f847 	bl	80048c8 <__retarget_lock_init_recursive>
 800483a:	f7ff ff8d 	bl	8004758 <__sfp_lock_release>
 800483e:	0020      	movs	r0, r4
 8004840:	2208      	movs	r2, #8
 8004842:	0029      	movs	r1, r5
 8004844:	6025      	str	r5, [r4, #0]
 8004846:	60a5      	str	r5, [r4, #8]
 8004848:	6065      	str	r5, [r4, #4]
 800484a:	6125      	str	r5, [r4, #16]
 800484c:	6165      	str	r5, [r4, #20]
 800484e:	61a5      	str	r5, [r4, #24]
 8004850:	305c      	adds	r0, #92	; 0x5c
 8004852:	f7ff f90f 	bl	8003a74 <memset>
 8004856:	6365      	str	r5, [r4, #52]	; 0x34
 8004858:	63a5      	str	r5, [r4, #56]	; 0x38
 800485a:	64a5      	str	r5, [r4, #72]	; 0x48
 800485c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800485e:	0020      	movs	r0, r4
 8004860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004862:	3468      	adds	r4, #104	; 0x68
 8004864:	e7d7      	b.n	8004816 <__sfp+0x1e>
 8004866:	2104      	movs	r1, #4
 8004868:	0038      	movs	r0, r7
 800486a:	f7ff ff57 	bl	800471c <__sfmoreglue>
 800486e:	1e04      	subs	r4, r0, #0
 8004870:	6030      	str	r0, [r6, #0]
 8004872:	d1d5      	bne.n	8004820 <__sfp+0x28>
 8004874:	f7ff ff70 	bl	8004758 <__sfp_lock_release>
 8004878:	230c      	movs	r3, #12
 800487a:	603b      	str	r3, [r7, #0]
 800487c:	e7ef      	b.n	800485e <__sfp+0x66>
 800487e:	46c0      	nop			; (mov r8, r8)
 8004880:	08004c40 	.word	0x08004c40
 8004884:	ffff0001 	.word	0xffff0001

08004888 <_fwalk_reent>:
 8004888:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800488a:	0004      	movs	r4, r0
 800488c:	0006      	movs	r6, r0
 800488e:	2700      	movs	r7, #0
 8004890:	9101      	str	r1, [sp, #4]
 8004892:	3448      	adds	r4, #72	; 0x48
 8004894:	6863      	ldr	r3, [r4, #4]
 8004896:	68a5      	ldr	r5, [r4, #8]
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	9b00      	ldr	r3, [sp, #0]
 800489c:	3b01      	subs	r3, #1
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	d504      	bpl.n	80048ac <_fwalk_reent+0x24>
 80048a2:	6824      	ldr	r4, [r4, #0]
 80048a4:	2c00      	cmp	r4, #0
 80048a6:	d1f5      	bne.n	8004894 <_fwalk_reent+0xc>
 80048a8:	0038      	movs	r0, r7
 80048aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80048ac:	89ab      	ldrh	r3, [r5, #12]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d908      	bls.n	80048c4 <_fwalk_reent+0x3c>
 80048b2:	220e      	movs	r2, #14
 80048b4:	5eab      	ldrsh	r3, [r5, r2]
 80048b6:	3301      	adds	r3, #1
 80048b8:	d004      	beq.n	80048c4 <_fwalk_reent+0x3c>
 80048ba:	0029      	movs	r1, r5
 80048bc:	0030      	movs	r0, r6
 80048be:	9b01      	ldr	r3, [sp, #4]
 80048c0:	4798      	blx	r3
 80048c2:	4307      	orrs	r7, r0
 80048c4:	3568      	adds	r5, #104	; 0x68
 80048c6:	e7e8      	b.n	800489a <_fwalk_reent+0x12>

080048c8 <__retarget_lock_init_recursive>:
 80048c8:	4770      	bx	lr

080048ca <__retarget_lock_acquire_recursive>:
 80048ca:	4770      	bx	lr

080048cc <__retarget_lock_release_recursive>:
 80048cc:	4770      	bx	lr
	...

080048d0 <__swhatbuf_r>:
 80048d0:	b570      	push	{r4, r5, r6, lr}
 80048d2:	000e      	movs	r6, r1
 80048d4:	001d      	movs	r5, r3
 80048d6:	230e      	movs	r3, #14
 80048d8:	5ec9      	ldrsh	r1, [r1, r3]
 80048da:	0014      	movs	r4, r2
 80048dc:	b096      	sub	sp, #88	; 0x58
 80048de:	2900      	cmp	r1, #0
 80048e0:	da08      	bge.n	80048f4 <__swhatbuf_r+0x24>
 80048e2:	220c      	movs	r2, #12
 80048e4:	5eb3      	ldrsh	r3, [r6, r2]
 80048e6:	2200      	movs	r2, #0
 80048e8:	602a      	str	r2, [r5, #0]
 80048ea:	061b      	lsls	r3, r3, #24
 80048ec:	d411      	bmi.n	8004912 <__swhatbuf_r+0x42>
 80048ee:	2380      	movs	r3, #128	; 0x80
 80048f0:	00db      	lsls	r3, r3, #3
 80048f2:	e00f      	b.n	8004914 <__swhatbuf_r+0x44>
 80048f4:	466a      	mov	r2, sp
 80048f6:	f000 f92f 	bl	8004b58 <_fstat_r>
 80048fa:	2800      	cmp	r0, #0
 80048fc:	dbf1      	blt.n	80048e2 <__swhatbuf_r+0x12>
 80048fe:	23f0      	movs	r3, #240	; 0xf0
 8004900:	9901      	ldr	r1, [sp, #4]
 8004902:	021b      	lsls	r3, r3, #8
 8004904:	4019      	ands	r1, r3
 8004906:	4b05      	ldr	r3, [pc, #20]	; (800491c <__swhatbuf_r+0x4c>)
 8004908:	18c9      	adds	r1, r1, r3
 800490a:	424b      	negs	r3, r1
 800490c:	4159      	adcs	r1, r3
 800490e:	6029      	str	r1, [r5, #0]
 8004910:	e7ed      	b.n	80048ee <__swhatbuf_r+0x1e>
 8004912:	2340      	movs	r3, #64	; 0x40
 8004914:	2000      	movs	r0, #0
 8004916:	6023      	str	r3, [r4, #0]
 8004918:	b016      	add	sp, #88	; 0x58
 800491a:	bd70      	pop	{r4, r5, r6, pc}
 800491c:	ffffe000 	.word	0xffffe000

08004920 <__smakebuf_r>:
 8004920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004922:	2602      	movs	r6, #2
 8004924:	898b      	ldrh	r3, [r1, #12]
 8004926:	0005      	movs	r5, r0
 8004928:	000c      	movs	r4, r1
 800492a:	4233      	tst	r3, r6
 800492c:	d006      	beq.n	800493c <__smakebuf_r+0x1c>
 800492e:	0023      	movs	r3, r4
 8004930:	3347      	adds	r3, #71	; 0x47
 8004932:	6023      	str	r3, [r4, #0]
 8004934:	6123      	str	r3, [r4, #16]
 8004936:	2301      	movs	r3, #1
 8004938:	6163      	str	r3, [r4, #20]
 800493a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800493c:	466a      	mov	r2, sp
 800493e:	ab01      	add	r3, sp, #4
 8004940:	f7ff ffc6 	bl	80048d0 <__swhatbuf_r>
 8004944:	9900      	ldr	r1, [sp, #0]
 8004946:	0007      	movs	r7, r0
 8004948:	0028      	movs	r0, r5
 800494a:	f7ff f9ad 	bl	8003ca8 <_malloc_r>
 800494e:	2800      	cmp	r0, #0
 8004950:	d108      	bne.n	8004964 <__smakebuf_r+0x44>
 8004952:	220c      	movs	r2, #12
 8004954:	5ea3      	ldrsh	r3, [r4, r2]
 8004956:	059a      	lsls	r2, r3, #22
 8004958:	d4ef      	bmi.n	800493a <__smakebuf_r+0x1a>
 800495a:	2203      	movs	r2, #3
 800495c:	4393      	bics	r3, r2
 800495e:	431e      	orrs	r6, r3
 8004960:	81a6      	strh	r6, [r4, #12]
 8004962:	e7e4      	b.n	800492e <__smakebuf_r+0xe>
 8004964:	4b0f      	ldr	r3, [pc, #60]	; (80049a4 <__smakebuf_r+0x84>)
 8004966:	62ab      	str	r3, [r5, #40]	; 0x28
 8004968:	2380      	movs	r3, #128	; 0x80
 800496a:	89a2      	ldrh	r2, [r4, #12]
 800496c:	6020      	str	r0, [r4, #0]
 800496e:	4313      	orrs	r3, r2
 8004970:	81a3      	strh	r3, [r4, #12]
 8004972:	9b00      	ldr	r3, [sp, #0]
 8004974:	6120      	str	r0, [r4, #16]
 8004976:	6163      	str	r3, [r4, #20]
 8004978:	9b01      	ldr	r3, [sp, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00d      	beq.n	800499a <__smakebuf_r+0x7a>
 800497e:	0028      	movs	r0, r5
 8004980:	230e      	movs	r3, #14
 8004982:	5ee1      	ldrsh	r1, [r4, r3]
 8004984:	f000 f8fa 	bl	8004b7c <_isatty_r>
 8004988:	2800      	cmp	r0, #0
 800498a:	d006      	beq.n	800499a <__smakebuf_r+0x7a>
 800498c:	2203      	movs	r2, #3
 800498e:	89a3      	ldrh	r3, [r4, #12]
 8004990:	4393      	bics	r3, r2
 8004992:	001a      	movs	r2, r3
 8004994:	2301      	movs	r3, #1
 8004996:	4313      	orrs	r3, r2
 8004998:	81a3      	strh	r3, [r4, #12]
 800499a:	89a0      	ldrh	r0, [r4, #12]
 800499c:	4307      	orrs	r7, r0
 800499e:	81a7      	strh	r7, [r4, #12]
 80049a0:	e7cb      	b.n	800493a <__smakebuf_r+0x1a>
 80049a2:	46c0      	nop			; (mov r8, r8)
 80049a4:	0800470d 	.word	0x0800470d

080049a8 <memchr>:
 80049a8:	b2c9      	uxtb	r1, r1
 80049aa:	1882      	adds	r2, r0, r2
 80049ac:	4290      	cmp	r0, r2
 80049ae:	d101      	bne.n	80049b4 <memchr+0xc>
 80049b0:	2000      	movs	r0, #0
 80049b2:	4770      	bx	lr
 80049b4:	7803      	ldrb	r3, [r0, #0]
 80049b6:	428b      	cmp	r3, r1
 80049b8:	d0fb      	beq.n	80049b2 <memchr+0xa>
 80049ba:	3001      	adds	r0, #1
 80049bc:	e7f6      	b.n	80049ac <memchr+0x4>
	...

080049c0 <__malloc_lock>:
 80049c0:	b510      	push	{r4, lr}
 80049c2:	4802      	ldr	r0, [pc, #8]	; (80049cc <__malloc_lock+0xc>)
 80049c4:	f7ff ff81 	bl	80048ca <__retarget_lock_acquire_recursive>
 80049c8:	bd10      	pop	{r4, pc}
 80049ca:	46c0      	nop			; (mov r8, r8)
 80049cc:	20000200 	.word	0x20000200

080049d0 <__malloc_unlock>:
 80049d0:	b510      	push	{r4, lr}
 80049d2:	4802      	ldr	r0, [pc, #8]	; (80049dc <__malloc_unlock+0xc>)
 80049d4:	f7ff ff7a 	bl	80048cc <__retarget_lock_release_recursive>
 80049d8:	bd10      	pop	{r4, pc}
 80049da:	46c0      	nop			; (mov r8, r8)
 80049dc:	20000200 	.word	0x20000200

080049e0 <_raise_r>:
 80049e0:	b570      	push	{r4, r5, r6, lr}
 80049e2:	0004      	movs	r4, r0
 80049e4:	000d      	movs	r5, r1
 80049e6:	291f      	cmp	r1, #31
 80049e8:	d904      	bls.n	80049f4 <_raise_r+0x14>
 80049ea:	2316      	movs	r3, #22
 80049ec:	6003      	str	r3, [r0, #0]
 80049ee:	2001      	movs	r0, #1
 80049f0:	4240      	negs	r0, r0
 80049f2:	bd70      	pop	{r4, r5, r6, pc}
 80049f4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d004      	beq.n	8004a04 <_raise_r+0x24>
 80049fa:	008a      	lsls	r2, r1, #2
 80049fc:	189b      	adds	r3, r3, r2
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	2a00      	cmp	r2, #0
 8004a02:	d108      	bne.n	8004a16 <_raise_r+0x36>
 8004a04:	0020      	movs	r0, r4
 8004a06:	f000 f831 	bl	8004a6c <_getpid_r>
 8004a0a:	002a      	movs	r2, r5
 8004a0c:	0001      	movs	r1, r0
 8004a0e:	0020      	movs	r0, r4
 8004a10:	f000 f81a 	bl	8004a48 <_kill_r>
 8004a14:	e7ed      	b.n	80049f2 <_raise_r+0x12>
 8004a16:	2000      	movs	r0, #0
 8004a18:	2a01      	cmp	r2, #1
 8004a1a:	d0ea      	beq.n	80049f2 <_raise_r+0x12>
 8004a1c:	1c51      	adds	r1, r2, #1
 8004a1e:	d103      	bne.n	8004a28 <_raise_r+0x48>
 8004a20:	2316      	movs	r3, #22
 8004a22:	3001      	adds	r0, #1
 8004a24:	6023      	str	r3, [r4, #0]
 8004a26:	e7e4      	b.n	80049f2 <_raise_r+0x12>
 8004a28:	2400      	movs	r4, #0
 8004a2a:	0028      	movs	r0, r5
 8004a2c:	601c      	str	r4, [r3, #0]
 8004a2e:	4790      	blx	r2
 8004a30:	0020      	movs	r0, r4
 8004a32:	e7de      	b.n	80049f2 <_raise_r+0x12>

08004a34 <raise>:
 8004a34:	b510      	push	{r4, lr}
 8004a36:	4b03      	ldr	r3, [pc, #12]	; (8004a44 <raise+0x10>)
 8004a38:	0001      	movs	r1, r0
 8004a3a:	6818      	ldr	r0, [r3, #0]
 8004a3c:	f7ff ffd0 	bl	80049e0 <_raise_r>
 8004a40:	bd10      	pop	{r4, pc}
 8004a42:	46c0      	nop			; (mov r8, r8)
 8004a44:	20000010 	.word	0x20000010

08004a48 <_kill_r>:
 8004a48:	2300      	movs	r3, #0
 8004a4a:	b570      	push	{r4, r5, r6, lr}
 8004a4c:	4d06      	ldr	r5, [pc, #24]	; (8004a68 <_kill_r+0x20>)
 8004a4e:	0004      	movs	r4, r0
 8004a50:	0008      	movs	r0, r1
 8004a52:	0011      	movs	r1, r2
 8004a54:	602b      	str	r3, [r5, #0]
 8004a56:	f7fe fe2d 	bl	80036b4 <_kill>
 8004a5a:	1c43      	adds	r3, r0, #1
 8004a5c:	d103      	bne.n	8004a66 <_kill_r+0x1e>
 8004a5e:	682b      	ldr	r3, [r5, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d000      	beq.n	8004a66 <_kill_r+0x1e>
 8004a64:	6023      	str	r3, [r4, #0]
 8004a66:	bd70      	pop	{r4, r5, r6, pc}
 8004a68:	20000204 	.word	0x20000204

08004a6c <_getpid_r>:
 8004a6c:	b510      	push	{r4, lr}
 8004a6e:	f7fe fe1b 	bl	80036a8 <_getpid>
 8004a72:	bd10      	pop	{r4, pc}

08004a74 <__sread>:
 8004a74:	b570      	push	{r4, r5, r6, lr}
 8004a76:	000c      	movs	r4, r1
 8004a78:	250e      	movs	r5, #14
 8004a7a:	5f49      	ldrsh	r1, [r1, r5]
 8004a7c:	f000 f8a4 	bl	8004bc8 <_read_r>
 8004a80:	2800      	cmp	r0, #0
 8004a82:	db03      	blt.n	8004a8c <__sread+0x18>
 8004a84:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004a86:	181b      	adds	r3, r3, r0
 8004a88:	6563      	str	r3, [r4, #84]	; 0x54
 8004a8a:	bd70      	pop	{r4, r5, r6, pc}
 8004a8c:	89a3      	ldrh	r3, [r4, #12]
 8004a8e:	4a02      	ldr	r2, [pc, #8]	; (8004a98 <__sread+0x24>)
 8004a90:	4013      	ands	r3, r2
 8004a92:	81a3      	strh	r3, [r4, #12]
 8004a94:	e7f9      	b.n	8004a8a <__sread+0x16>
 8004a96:	46c0      	nop			; (mov r8, r8)
 8004a98:	ffffefff 	.word	0xffffefff

08004a9c <__swrite>:
 8004a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9e:	001f      	movs	r7, r3
 8004aa0:	898b      	ldrh	r3, [r1, #12]
 8004aa2:	0005      	movs	r5, r0
 8004aa4:	000c      	movs	r4, r1
 8004aa6:	0016      	movs	r6, r2
 8004aa8:	05db      	lsls	r3, r3, #23
 8004aaa:	d505      	bpl.n	8004ab8 <__swrite+0x1c>
 8004aac:	230e      	movs	r3, #14
 8004aae:	5ec9      	ldrsh	r1, [r1, r3]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	f000 f874 	bl	8004ba0 <_lseek_r>
 8004ab8:	89a3      	ldrh	r3, [r4, #12]
 8004aba:	4a05      	ldr	r2, [pc, #20]	; (8004ad0 <__swrite+0x34>)
 8004abc:	0028      	movs	r0, r5
 8004abe:	4013      	ands	r3, r2
 8004ac0:	81a3      	strh	r3, [r4, #12]
 8004ac2:	0032      	movs	r2, r6
 8004ac4:	230e      	movs	r3, #14
 8004ac6:	5ee1      	ldrsh	r1, [r4, r3]
 8004ac8:	003b      	movs	r3, r7
 8004aca:	f000 f81f 	bl	8004b0c <_write_r>
 8004ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ad0:	ffffefff 	.word	0xffffefff

08004ad4 <__sseek>:
 8004ad4:	b570      	push	{r4, r5, r6, lr}
 8004ad6:	000c      	movs	r4, r1
 8004ad8:	250e      	movs	r5, #14
 8004ada:	5f49      	ldrsh	r1, [r1, r5]
 8004adc:	f000 f860 	bl	8004ba0 <_lseek_r>
 8004ae0:	89a3      	ldrh	r3, [r4, #12]
 8004ae2:	1c42      	adds	r2, r0, #1
 8004ae4:	d103      	bne.n	8004aee <__sseek+0x1a>
 8004ae6:	4a05      	ldr	r2, [pc, #20]	; (8004afc <__sseek+0x28>)
 8004ae8:	4013      	ands	r3, r2
 8004aea:	81a3      	strh	r3, [r4, #12]
 8004aec:	bd70      	pop	{r4, r5, r6, pc}
 8004aee:	2280      	movs	r2, #128	; 0x80
 8004af0:	0152      	lsls	r2, r2, #5
 8004af2:	4313      	orrs	r3, r2
 8004af4:	81a3      	strh	r3, [r4, #12]
 8004af6:	6560      	str	r0, [r4, #84]	; 0x54
 8004af8:	e7f8      	b.n	8004aec <__sseek+0x18>
 8004afa:	46c0      	nop			; (mov r8, r8)
 8004afc:	ffffefff 	.word	0xffffefff

08004b00 <__sclose>:
 8004b00:	b510      	push	{r4, lr}
 8004b02:	230e      	movs	r3, #14
 8004b04:	5ec9      	ldrsh	r1, [r1, r3]
 8004b06:	f000 f815 	bl	8004b34 <_close_r>
 8004b0a:	bd10      	pop	{r4, pc}

08004b0c <_write_r>:
 8004b0c:	b570      	push	{r4, r5, r6, lr}
 8004b0e:	0004      	movs	r4, r0
 8004b10:	0008      	movs	r0, r1
 8004b12:	0011      	movs	r1, r2
 8004b14:	001a      	movs	r2, r3
 8004b16:	2300      	movs	r3, #0
 8004b18:	4d05      	ldr	r5, [pc, #20]	; (8004b30 <_write_r+0x24>)
 8004b1a:	602b      	str	r3, [r5, #0]
 8004b1c:	f7fe fe03 	bl	8003726 <_write>
 8004b20:	1c43      	adds	r3, r0, #1
 8004b22:	d103      	bne.n	8004b2c <_write_r+0x20>
 8004b24:	682b      	ldr	r3, [r5, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d000      	beq.n	8004b2c <_write_r+0x20>
 8004b2a:	6023      	str	r3, [r4, #0]
 8004b2c:	bd70      	pop	{r4, r5, r6, pc}
 8004b2e:	46c0      	nop			; (mov r8, r8)
 8004b30:	20000204 	.word	0x20000204

08004b34 <_close_r>:
 8004b34:	2300      	movs	r3, #0
 8004b36:	b570      	push	{r4, r5, r6, lr}
 8004b38:	4d06      	ldr	r5, [pc, #24]	; (8004b54 <_close_r+0x20>)
 8004b3a:	0004      	movs	r4, r0
 8004b3c:	0008      	movs	r0, r1
 8004b3e:	602b      	str	r3, [r5, #0]
 8004b40:	f7fe fe0d 	bl	800375e <_close>
 8004b44:	1c43      	adds	r3, r0, #1
 8004b46:	d103      	bne.n	8004b50 <_close_r+0x1c>
 8004b48:	682b      	ldr	r3, [r5, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d000      	beq.n	8004b50 <_close_r+0x1c>
 8004b4e:	6023      	str	r3, [r4, #0]
 8004b50:	bd70      	pop	{r4, r5, r6, pc}
 8004b52:	46c0      	nop			; (mov r8, r8)
 8004b54:	20000204 	.word	0x20000204

08004b58 <_fstat_r>:
 8004b58:	2300      	movs	r3, #0
 8004b5a:	b570      	push	{r4, r5, r6, lr}
 8004b5c:	4d06      	ldr	r5, [pc, #24]	; (8004b78 <_fstat_r+0x20>)
 8004b5e:	0004      	movs	r4, r0
 8004b60:	0008      	movs	r0, r1
 8004b62:	0011      	movs	r1, r2
 8004b64:	602b      	str	r3, [r5, #0]
 8004b66:	f7fe fe04 	bl	8003772 <_fstat>
 8004b6a:	1c43      	adds	r3, r0, #1
 8004b6c:	d103      	bne.n	8004b76 <_fstat_r+0x1e>
 8004b6e:	682b      	ldr	r3, [r5, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d000      	beq.n	8004b76 <_fstat_r+0x1e>
 8004b74:	6023      	str	r3, [r4, #0]
 8004b76:	bd70      	pop	{r4, r5, r6, pc}
 8004b78:	20000204 	.word	0x20000204

08004b7c <_isatty_r>:
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	b570      	push	{r4, r5, r6, lr}
 8004b80:	4d06      	ldr	r5, [pc, #24]	; (8004b9c <_isatty_r+0x20>)
 8004b82:	0004      	movs	r4, r0
 8004b84:	0008      	movs	r0, r1
 8004b86:	602b      	str	r3, [r5, #0]
 8004b88:	f7fe fe01 	bl	800378e <_isatty>
 8004b8c:	1c43      	adds	r3, r0, #1
 8004b8e:	d103      	bne.n	8004b98 <_isatty_r+0x1c>
 8004b90:	682b      	ldr	r3, [r5, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d000      	beq.n	8004b98 <_isatty_r+0x1c>
 8004b96:	6023      	str	r3, [r4, #0]
 8004b98:	bd70      	pop	{r4, r5, r6, pc}
 8004b9a:	46c0      	nop			; (mov r8, r8)
 8004b9c:	20000204 	.word	0x20000204

08004ba0 <_lseek_r>:
 8004ba0:	b570      	push	{r4, r5, r6, lr}
 8004ba2:	0004      	movs	r4, r0
 8004ba4:	0008      	movs	r0, r1
 8004ba6:	0011      	movs	r1, r2
 8004ba8:	001a      	movs	r2, r3
 8004baa:	2300      	movs	r3, #0
 8004bac:	4d05      	ldr	r5, [pc, #20]	; (8004bc4 <_lseek_r+0x24>)
 8004bae:	602b      	str	r3, [r5, #0]
 8004bb0:	f7fe fdf6 	bl	80037a0 <_lseek>
 8004bb4:	1c43      	adds	r3, r0, #1
 8004bb6:	d103      	bne.n	8004bc0 <_lseek_r+0x20>
 8004bb8:	682b      	ldr	r3, [r5, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d000      	beq.n	8004bc0 <_lseek_r+0x20>
 8004bbe:	6023      	str	r3, [r4, #0]
 8004bc0:	bd70      	pop	{r4, r5, r6, pc}
 8004bc2:	46c0      	nop			; (mov r8, r8)
 8004bc4:	20000204 	.word	0x20000204

08004bc8 <_read_r>:
 8004bc8:	b570      	push	{r4, r5, r6, lr}
 8004bca:	0004      	movs	r4, r0
 8004bcc:	0008      	movs	r0, r1
 8004bce:	0011      	movs	r1, r2
 8004bd0:	001a      	movs	r2, r3
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	4d05      	ldr	r5, [pc, #20]	; (8004bec <_read_r+0x24>)
 8004bd6:	602b      	str	r3, [r5, #0]
 8004bd8:	f7fe fd88 	bl	80036ec <_read>
 8004bdc:	1c43      	adds	r3, r0, #1
 8004bde:	d103      	bne.n	8004be8 <_read_r+0x20>
 8004be0:	682b      	ldr	r3, [r5, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d000      	beq.n	8004be8 <_read_r+0x20>
 8004be6:	6023      	str	r3, [r4, #0]
 8004be8:	bd70      	pop	{r4, r5, r6, pc}
 8004bea:	46c0      	nop			; (mov r8, r8)
 8004bec:	20000204 	.word	0x20000204

08004bf0 <_init>:
 8004bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf2:	46c0      	nop			; (mov r8, r8)
 8004bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bf6:	bc08      	pop	{r3}
 8004bf8:	469e      	mov	lr, r3
 8004bfa:	4770      	bx	lr

08004bfc <_fini>:
 8004bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bfe:	46c0      	nop			; (mov r8, r8)
 8004c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c02:	bc08      	pop	{r3}
 8004c04:	469e      	mov	lr, r3
 8004c06:	4770      	bx	lr
